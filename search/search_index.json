{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"QuecPython\u6982\u8ff0 \u521d\u8bc6QuecPython QuecPython\u7684\u7531\u6765 QuecPython\u4e0eMicropython\u5173\u7cfb &Micropython\u6e90\u7801\u83b7\u53d6 QuecPython\u4e0eC-SDK\u5173\u7cfb QuecPython\u6280\u672f\u7279\u6027 QuecPython\u7684\u9002\u7528\u573a\u666f \u63a2\u79d8QuecPython\u6280\u672f\u67b6\u6784 \u200b For full documentation visit http://python.quectel.com/. \u200b","title":"QuecPython\u7406\u8bba\u5b66\u4e60"},{"location":"#quecpython","text":"","title":"QuecPython\u6982\u8ff0"},{"location":"#quecpython_1","text":"QuecPython\u7684\u7531\u6765 QuecPython\u4e0eMicropython\u5173\u7cfb &Micropython\u6e90\u7801\u83b7\u53d6 QuecPython\u4e0eC-SDK\u5173\u7cfb QuecPython\u6280\u672f\u7279\u6027 QuecPython\u7684\u9002\u7528\u573a\u666f","title":"\u521d\u8bc6QuecPython"},{"location":"#quecpython_2","text":"\u200b For full documentation visit http://python.quectel.com/. \u200b","title":"\u63a2\u79d8QuecPython\u6280\u672f\u67b6\u6784"},{"location":"QuecPython%20FAQ%26DEBUG/","text":"QuecPython FAQ&DEBUG QuecPython FAQ&Debug\u6587\u6863 \u8be6\u89c1\u6587\u6863\u300aQuecPython FAQ&Debug\u6587\u6863\u300b QuecPython \u6551\u7816\u5904\u7406 \u5982\u4f55\u89e3\u51b3\uff1a\u8be6\u89c1\u6587\u6863\u300aQuectel QuecPython_QPYcom\u5de5\u5177\u4f7f\u7528\u8bf4\u660e_V1.0\u300b QuecPython main.py\u6587\u4ef6\u4f7f\u7528 \u5982\u4f55\u4f7f\u7528main.py&\u4f7f\u7528\u8fc7\u7a0b\u4e2d\u95ee\u9898\u89e3\u51b3 \u73b0\u8c61\uff1a\u4e0a\u4f20py\u6587\u4ef6\u4e14\u6587\u4ef6\u540d\u4e3amain.py\u5230\u6a21\u5757\u540e\u65e0\u6cd5\u4efb\u4f55\u6267\u884c\u6307\u4ee4\uff08\u5305\u62ec\u4e0a\u4f20\u6587\u4ef6\u7b49\uff09 \u5bfc\u81f4\u539f\u56e0\uff1a\u6a21\u5757\u5728\u5f00\u673a\u540e\u4f1a\u81ea\u52a8\u5bfb\u627e\u8fd0\u884c\u6587\u4ef6\u540d\u4e3amain.py\u7684\u811a\u672c\u6587\u4ef6\uff0c\u5982\u679cmain.py\u4e2d\u5b58\u5728while\uff0cfor(,,)\u8fd9\u79cd\u5faa\u73af\u8bed\u53e5\uff0c\u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u963b\u585e\uff0c\u4e32\u53e3\u88ab\u5360\u7528\uff0c\u65e0\u6cd5\u8fdb\u884c\u5176\u4ed6\u64cd\u4f5c \u5982\u4f55\u89e3\u51b3\uff1a\u76ee\u524d\u7248\u672c\u53ea\u80fd\u901a\u8fc7\u91cd\u5237\u56fa\u4ef6\u89e3\u51b3\uff0c\u5efa\u8bae\u5728\u6d4b\u8bd5\u9636\u6bb5\u5c3d\u91cf\u4e0d\u8981\u4f7f\u7528main.py\u4f5c\u4e3a\u5165\u53e3\u6587\u4ef6\uff0c\u53ef\u4f7f\u7528start.py\u6216\u5176\u5b83\u547d\u540d\u6765\u624b\u52a8\u62c9\u8d77\u9879\u76ee\uff0c\u907f\u514d\u91cd\u5237\u56fa\u4ef6\u3002 QuecPython MQTT\u8fde\u63a5\u5f02\u5e38\u5904\u7406 \u5bfc\u81f4\u539f\u56e0\uff1a MQTT\u670d\u52a1\u7aef\u4f1a\u6709\u5fc3\u8df3\u68c0\u6d4b\u673a\u5236\uff0c\u4e00\u6bb5\u65f6\u95f4\u5185\u8bbe\u5907\u4e0e\u4e91\u7aef\u6ca1\u6709\u901a\u4fe1\u6d3b\u52a8\u4f1a\u4e3b\u52a8\u65ad\u5f00\u8fde\u63a5 \u5c1d\u8bd5\u89e3\u51b3\u65b9\u5411\uff1a\u8fde\u63a5\u65ad\u5f00\u662f\u4f9d\u636e\u914d\u7f6emqtt\u65f6\u7684\u8d85\u65f6\u503ckeepalive\uff0c\u5728\u8d85\u51fa\u6d3b\u52a8\u65f6\u95f4\u540e\u4f1a\u4e3b\u52a8\u65ad\u5f00\u8fde\u63a5\uff0c\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u8bbe\u7f6ekeepalive\u6d3b\u52a8\u65f6\u95f4\u4f7f\u7528\u5b9a\u65f6\u5668\u5728\u6d3b\u52a8\u65f6\u95f4\u8d85\u51fa\u524d\u4e3b\u52a8\u5411\u4e91\u7aef\u53d1\u9001ping\u5305\uff0c\u670d\u52a1\u7aef\u8fd4\u56de\u7684\u6570\u636e\u5305\u65e0\u9700\u5ba2\u6237\u5904\u7406\u3002 QuecPython \u9a71\u52a8\u5b89\u88c5\u5931\u8d25\u95ee\u9898\u89e3\u51b3 \u73b0\u8c61\uff1a\u5b89\u88c5EC100Y-CN \u6240\u9700\u9a71\u52a8Quectel_ASR_Series_UMTS&LTE_Windows_USB_Driver_Customer_V1.0.3.zip \u540e\uff0c\u53d1\u73b0\u5728 Windows7 \u4e0b\u672a\u6b63\u5e38\u8bc6\u522b\u51fa\u6a21\u5757\u7684\u6307\u4ee4\u4ea4\u4e92\u4e32\u53e3\u3002 \u5bfc\u81f4\u539f\u56e0\uff1aWindows7 \u4e0b\u65e0\u6cd5\u4f7f\u7528 Microsoft \u7684 USB \u4e32\u884c\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\u3002 \u5982\u4f55\u89e3\u51b3\uff1a\u8be6\u89c1\u6587\u6863\u300aEC100Y-CN_windows7 \u5b89\u88c5 USB \u9a71\u52a8\u6307\u4ee4\u4ea4\u4e92\u4e32\u53e3\u672a\u8bc6\u522b\u89e3\u51b3\u65b9\u6cd5 V1.0.pdf\u300b QuecPython apn_cfg.json\u6587\u4ef6\u89e3\u6790","title":"QuecPython FAQ&DEBUG"},{"location":"QuecPython%20FAQ%26DEBUG/#quecpython-faqdebug","text":"","title":"QuecPython FAQ&amp;DEBUG"},{"location":"QuecPython%20FAQ%26DEBUG/#quecpython-faqdebug_1","text":"\u8be6\u89c1\u6587\u6863\u300aQuecPython FAQ&Debug\u6587\u6863\u300b","title":"QuecPython FAQ&amp;Debug\u6587\u6863"},{"location":"QuecPython%20FAQ%26DEBUG/#quecpython","text":"\u5982\u4f55\u89e3\u51b3\uff1a\u8be6\u89c1\u6587\u6863\u300aQuectel QuecPython_QPYcom\u5de5\u5177\u4f7f\u7528\u8bf4\u660e_V1.0\u300b","title":"QuecPython \u6551\u7816\u5904\u7406"},{"location":"QuecPython%20FAQ%26DEBUG/#quecpython-mainpy","text":"\u5982\u4f55\u4f7f\u7528main.py&\u4f7f\u7528\u8fc7\u7a0b\u4e2d\u95ee\u9898\u89e3\u51b3 \u73b0\u8c61\uff1a\u4e0a\u4f20py\u6587\u4ef6\u4e14\u6587\u4ef6\u540d\u4e3amain.py\u5230\u6a21\u5757\u540e\u65e0\u6cd5\u4efb\u4f55\u6267\u884c\u6307\u4ee4\uff08\u5305\u62ec\u4e0a\u4f20\u6587\u4ef6\u7b49\uff09 \u5bfc\u81f4\u539f\u56e0\uff1a\u6a21\u5757\u5728\u5f00\u673a\u540e\u4f1a\u81ea\u52a8\u5bfb\u627e\u8fd0\u884c\u6587\u4ef6\u540d\u4e3amain.py\u7684\u811a\u672c\u6587\u4ef6\uff0c\u5982\u679cmain.py\u4e2d\u5b58\u5728while\uff0cfor(,,)\u8fd9\u79cd\u5faa\u73af\u8bed\u53e5\uff0c\u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u963b\u585e\uff0c\u4e32\u53e3\u88ab\u5360\u7528\uff0c\u65e0\u6cd5\u8fdb\u884c\u5176\u4ed6\u64cd\u4f5c \u5982\u4f55\u89e3\u51b3\uff1a\u76ee\u524d\u7248\u672c\u53ea\u80fd\u901a\u8fc7\u91cd\u5237\u56fa\u4ef6\u89e3\u51b3\uff0c\u5efa\u8bae\u5728\u6d4b\u8bd5\u9636\u6bb5\u5c3d\u91cf\u4e0d\u8981\u4f7f\u7528main.py\u4f5c\u4e3a\u5165\u53e3\u6587\u4ef6\uff0c\u53ef\u4f7f\u7528start.py\u6216\u5176\u5b83\u547d\u540d\u6765\u624b\u52a8\u62c9\u8d77\u9879\u76ee\uff0c\u907f\u514d\u91cd\u5237\u56fa\u4ef6\u3002","title":"QuecPython main.py\u6587\u4ef6\u4f7f\u7528"},{"location":"QuecPython%20FAQ%26DEBUG/#quecpython-mqtt","text":"\u5bfc\u81f4\u539f\u56e0\uff1a MQTT\u670d\u52a1\u7aef\u4f1a\u6709\u5fc3\u8df3\u68c0\u6d4b\u673a\u5236\uff0c\u4e00\u6bb5\u65f6\u95f4\u5185\u8bbe\u5907\u4e0e\u4e91\u7aef\u6ca1\u6709\u901a\u4fe1\u6d3b\u52a8\u4f1a\u4e3b\u52a8\u65ad\u5f00\u8fde\u63a5 \u5c1d\u8bd5\u89e3\u51b3\u65b9\u5411\uff1a\u8fde\u63a5\u65ad\u5f00\u662f\u4f9d\u636e\u914d\u7f6emqtt\u65f6\u7684\u8d85\u65f6\u503ckeepalive\uff0c\u5728\u8d85\u51fa\u6d3b\u52a8\u65f6\u95f4\u540e\u4f1a\u4e3b\u52a8\u65ad\u5f00\u8fde\u63a5\uff0c\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u8bbe\u7f6ekeepalive\u6d3b\u52a8\u65f6\u95f4\u4f7f\u7528\u5b9a\u65f6\u5668\u5728\u6d3b\u52a8\u65f6\u95f4\u8d85\u51fa\u524d\u4e3b\u52a8\u5411\u4e91\u7aef\u53d1\u9001ping\u5305\uff0c\u670d\u52a1\u7aef\u8fd4\u56de\u7684\u6570\u636e\u5305\u65e0\u9700\u5ba2\u6237\u5904\u7406\u3002","title":"QuecPython MQTT\u8fde\u63a5\u5f02\u5e38\u5904\u7406"},{"location":"QuecPython%20FAQ%26DEBUG/#quecpython_1","text":"\u73b0\u8c61\uff1a\u5b89\u88c5EC100Y-CN \u6240\u9700\u9a71\u52a8Quectel_ASR_Series_UMTS&LTE_Windows_USB_Driver_Customer_V1.0.3.zip \u540e\uff0c\u53d1\u73b0\u5728 Windows7 \u4e0b\u672a\u6b63\u5e38\u8bc6\u522b\u51fa\u6a21\u5757\u7684\u6307\u4ee4\u4ea4\u4e92\u4e32\u53e3\u3002 \u5bfc\u81f4\u539f\u56e0\uff1aWindows7 \u4e0b\u65e0\u6cd5\u4f7f\u7528 Microsoft \u7684 USB \u4e32\u884c\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\u3002 \u5982\u4f55\u89e3\u51b3\uff1a\u8be6\u89c1\u6587\u6863\u300aEC100Y-CN_windows7 \u5b89\u88c5 USB \u9a71\u52a8\u6307\u4ee4\u4ea4\u4e92\u4e32\u53e3\u672a\u8bc6\u522b\u89e3\u51b3\u65b9\u6cd5 V1.0.pdf\u300b","title":"QuecPython \u9a71\u52a8\u5b89\u88c5\u5931\u8d25\u95ee\u9898\u89e3\u51b3"},{"location":"QuecPython%20FAQ%26DEBUG/#quecpython-apn_cfgjson","text":"","title":"QuecPython apn_cfg.json\u6587\u4ef6\u89e3\u6790"},{"location":"QuecPython%20Solution%E6%96%B9%E6%A1%88%E5%BC%80%E5%8F%91/","text":"QuecPython Solution\u65b9\u6848\u5f00\u53d1 Tracker Tracker Solution\u65b9\u6848 \u4e91\u5587\u53ed \u4e91\u5587\u53ed Solution\u65b9\u6848 DTU DTU Solution\u65b9\u6848 \u5bf9\u8bb2\u673a \u5bf9\u8bb2\u673a Solution\u65b9\u6848","title":"QuecPython Solution\u65b9\u6848\u5f00\u53d1"},{"location":"QuecPython%20Solution%E6%96%B9%E6%A1%88%E5%BC%80%E5%8F%91/#quecpython-solution","text":"","title":"QuecPython Solution\u65b9\u6848\u5f00\u53d1"},{"location":"QuecPython%20Solution%E6%96%B9%E6%A1%88%E5%BC%80%E5%8F%91/#tracker","text":"Tracker Solution\u65b9\u6848","title":"Tracker"},{"location":"QuecPython%20Solution%E6%96%B9%E6%A1%88%E5%BC%80%E5%8F%91/#_1","text":"\u4e91\u5587\u53ed Solution\u65b9\u6848","title":"\u4e91\u5587\u53ed"},{"location":"QuecPython%20Solution%E6%96%B9%E6%A1%88%E5%BC%80%E5%8F%91/#dtu","text":"DTU Solution\u65b9\u6848","title":"DTU"},{"location":"QuecPython%20Solution%E6%96%B9%E6%A1%88%E5%BC%80%E5%8F%91/#_2","text":"\u5bf9\u8bb2\u673a Solution\u65b9\u6848","title":"\u5bf9\u8bb2\u673a"},{"location":"QuecPython%E4%BA%91%E6%9C%8D%E5%8A%A1/","text":"QuecPython \u4e91\u670d\u52a1 QuecPython \u63a5\u5165\u963f\u91cc\u4e91 QuecPython \u63a5\u5165\u817e\u8baf\u4e91 QuecPython QuecCloud QuecPython \u534e\u4e3a\u4e91 QuecPython \u4e9a\u9a6c\u900a\u4e91","title":"QuecPython\u4e91\u670d\u52a1"},{"location":"QuecPython%E4%BA%91%E6%9C%8D%E5%8A%A1/#quecpython","text":"","title":"QuecPython \u4e91\u670d\u52a1"},{"location":"QuecPython%E4%BA%91%E6%9C%8D%E5%8A%A1/#quecpython_1","text":"","title":"QuecPython \u63a5\u5165\u963f\u91cc\u4e91"},{"location":"QuecPython%E4%BA%91%E6%9C%8D%E5%8A%A1/#quecpython_2","text":"","title":"QuecPython \u63a5\u5165\u817e\u8baf\u4e91"},{"location":"QuecPython%E4%BA%91%E6%9C%8D%E5%8A%A1/#quecpython-queccloud","text":"","title":"QuecPython QuecCloud"},{"location":"QuecPython%E4%BA%91%E6%9C%8D%E5%8A%A1/#quecpython_3","text":"","title":"QuecPython \u534e\u4e3a\u4e91"},{"location":"QuecPython%E4%BA%91%E6%9C%8D%E5%8A%A1/#quecpython_4","text":"","title":"QuecPython \u4e9a\u9a6c\u900a\u4e91"},{"location":"QuecPython%E4%BA%A7%E5%93%81%E5%BC%80%E5%8F%91%E5%8F%8A%E9%87%8F%E4%BA%A7/","text":"QuecPython \u4ea7\u54c1\u5f00\u53d1\u53ca\u91cf\u4ea7 \u91cf\u4ea7\u6d41\u7a0b QuecPython \u751f\u4ea7\u56fa\u4ef6\u5305\u542b3\u4e2a\u90e8\u5206\uff1a \u652f\u6301QuecPython \u8fd0\u884c\u73af\u5883\u7684\u56fa\u4ef6 \u56fa\u4ef6\u53ef\u4ee5\u4eceSDK \u4e2d\u83b7\u53d6\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7QPYCom.exe \u4e0b\u8f7d\u6700\u65b0\u7248\u672c\uff0c\u5f53\u524d\u56fa\u4ef6\u6700\u65b0\u7248\u672c\u662fv0008\u3002 \u5305\u542b\u5ba2\u6237\u811a\u672c/\u914d\u7f6e\u6587\u4ef6\u7684\u955c\u50cf customer_fs.bin\u7531QPYcom.exe\u751f\u6210\uff0c\u4e0b\u8f7d\u754c\u9762\u9009\u62e9\u8981\u5408\u5e76\u7684\u811a\u672c/\u914d\u7f6e\u6587\u4ef6\u70b9\u51fb\u5408\u5e76\u6309\u94ae\u751f\u6210customer_fs.bin\u3002 \u5305\u542b\u5ba2\u6237\u811a\u672c/\u914d\u7f6e\u6587\u4ef6\u5907\u4efd\u7684\u955c\u50cf customer_backup_fs.bin\uff0c\u7531QPYcom.exe\u751f\u6210\uff0c\u811a\u672c\u5982\u9700\u5907\u4efd\uff0c\u9700\u8981\u52fe\u9009\u5907\u4efd\u9009\u9879\uff0c\u5728\u5408\u6210\u65f6\u4f1a\u5728customer_backup_fs \u4e2d\u653e\u7f6e\u76f8\u5e94\u6587\u4ef6\u7684\u5907\u4efd\uff0ccustomer_fs \u4e2d\u7684\u6587\u4ef6\u5982\u679c\u53d1\u751f\u635f\u574f\u6216\u8005\u4e22\u5931\uff0c\u90a3\u4e48\u4f1a\u4ece\u5907\u4efd\u533a\u8fd8\u539f\u6210\u5de5\u5382\u7248\u672c\u3002 \u91cf\u4ea7\u5de5\u5177\u4f7f\u7528\u6587\u6863 QPYcom.exe QuecPython \u8c03\u8bd5\u4ee5\u53ca\u91cf\u4ea7\u5305\u751f\u6210\u5de5\u5177\uff0c\u4e3b\u8981\u529f\u80fd\u6709\u56fa\u4ef6\u4e0b\u8f7d\u3001\u5728\u7ebf\u8c03\u8bd5\u3001\u91cf\u4ea7\u5305\u751f\u6210\u7b49\uff0c\u8be6\u7ec6\u4f7f\u7528\u8bf4\u660e\u53c2\u89c1\u300aQuectel QuecPython_QPYcom\u5de5\u5177\u4f7f\u7528\u8bf4\u660e_V1.0.docx\u300b\u3002 MultiDownload.exe \u79fb\u8fdc\u63d0\u4f9b\u7ed9\u5ba2\u6237\u7684\u591a\u53e3\u4e0b\u8f7d\u5de5\u5177\uff0c\u652f\u6301\u4e00\u62d6\u591a\u4e0b\u8f7d\uff0c\u8be6\u7ec6\u4f7f\u7528\u8bf4\u660e\u53c2\u89c1\u300aQuectel_QMulti_DL_\u7528\u6237\u6307\u5bfc_V1.7.pdf\u300b \u4ee3\u7801\u4fdd\u62a4 \u4ee3\u7801\u52a0\u5bc6 \u5173\u95ed\u63a7\u5236\u53f0","title":"QuecPython\u4ea7\u54c1\u5f00\u53d1\u53ca\u91cf\u4ea7"},{"location":"QuecPython%E4%BA%A7%E5%93%81%E5%BC%80%E5%8F%91%E5%8F%8A%E9%87%8F%E4%BA%A7/#quecpython","text":"","title":"QuecPython \u4ea7\u54c1\u5f00\u53d1\u53ca\u91cf\u4ea7"},{"location":"QuecPython%E4%BA%A7%E5%93%81%E5%BC%80%E5%8F%91%E5%8F%8A%E9%87%8F%E4%BA%A7/#_1","text":"QuecPython \u751f\u4ea7\u56fa\u4ef6\u5305\u542b3\u4e2a\u90e8\u5206\uff1a \u652f\u6301QuecPython \u8fd0\u884c\u73af\u5883\u7684\u56fa\u4ef6 \u56fa\u4ef6\u53ef\u4ee5\u4eceSDK \u4e2d\u83b7\u53d6\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7QPYCom.exe \u4e0b\u8f7d\u6700\u65b0\u7248\u672c\uff0c\u5f53\u524d\u56fa\u4ef6\u6700\u65b0\u7248\u672c\u662fv0008\u3002 \u5305\u542b\u5ba2\u6237\u811a\u672c/\u914d\u7f6e\u6587\u4ef6\u7684\u955c\u50cf customer_fs.bin\u7531QPYcom.exe\u751f\u6210\uff0c\u4e0b\u8f7d\u754c\u9762\u9009\u62e9\u8981\u5408\u5e76\u7684\u811a\u672c/\u914d\u7f6e\u6587\u4ef6\u70b9\u51fb\u5408\u5e76\u6309\u94ae\u751f\u6210customer_fs.bin\u3002 \u5305\u542b\u5ba2\u6237\u811a\u672c/\u914d\u7f6e\u6587\u4ef6\u5907\u4efd\u7684\u955c\u50cf customer_backup_fs.bin\uff0c\u7531QPYcom.exe\u751f\u6210\uff0c\u811a\u672c\u5982\u9700\u5907\u4efd\uff0c\u9700\u8981\u52fe\u9009\u5907\u4efd\u9009\u9879\uff0c\u5728\u5408\u6210\u65f6\u4f1a\u5728customer_backup_fs \u4e2d\u653e\u7f6e\u76f8\u5e94\u6587\u4ef6\u7684\u5907\u4efd\uff0ccustomer_fs \u4e2d\u7684\u6587\u4ef6\u5982\u679c\u53d1\u751f\u635f\u574f\u6216\u8005\u4e22\u5931\uff0c\u90a3\u4e48\u4f1a\u4ece\u5907\u4efd\u533a\u8fd8\u539f\u6210\u5de5\u5382\u7248\u672c\u3002","title":"\u91cf\u4ea7\u6d41\u7a0b"},{"location":"QuecPython%E4%BA%A7%E5%93%81%E5%BC%80%E5%8F%91%E5%8F%8A%E9%87%8F%E4%BA%A7/#_2","text":"","title":"\u91cf\u4ea7\u5de5\u5177\u4f7f\u7528\u6587\u6863"},{"location":"QuecPython%E4%BA%A7%E5%93%81%E5%BC%80%E5%8F%91%E5%8F%8A%E9%87%8F%E4%BA%A7/#qpycomexe","text":"QuecPython \u8c03\u8bd5\u4ee5\u53ca\u91cf\u4ea7\u5305\u751f\u6210\u5de5\u5177\uff0c\u4e3b\u8981\u529f\u80fd\u6709\u56fa\u4ef6\u4e0b\u8f7d\u3001\u5728\u7ebf\u8c03\u8bd5\u3001\u91cf\u4ea7\u5305\u751f\u6210\u7b49\uff0c\u8be6\u7ec6\u4f7f\u7528\u8bf4\u660e\u53c2\u89c1\u300aQuectel QuecPython_QPYcom\u5de5\u5177\u4f7f\u7528\u8bf4\u660e_V1.0.docx\u300b\u3002","title":"QPYcom.exe"},{"location":"QuecPython%E4%BA%A7%E5%93%81%E5%BC%80%E5%8F%91%E5%8F%8A%E9%87%8F%E4%BA%A7/#multidownloadexe","text":"\u79fb\u8fdc\u63d0\u4f9b\u7ed9\u5ba2\u6237\u7684\u591a\u53e3\u4e0b\u8f7d\u5de5\u5177\uff0c\u652f\u6301\u4e00\u62d6\u591a\u4e0b\u8f7d\uff0c\u8be6\u7ec6\u4f7f\u7528\u8bf4\u660e\u53c2\u89c1\u300aQuectel_QMulti_DL_\u7528\u6237\u6307\u5bfc_V1.7.pdf\u300b","title":"MultiDownload.exe"},{"location":"QuecPython%E4%BA%A7%E5%93%81%E5%BC%80%E5%8F%91%E5%8F%8A%E9%87%8F%E4%BA%A7/#_3","text":"","title":"\u4ee3\u7801\u4fdd\u62a4"},{"location":"QuecPython%E4%BA%A7%E5%93%81%E5%BC%80%E5%8F%91%E5%8F%8A%E9%87%8F%E4%BA%A7/#_4","text":"","title":"\u4ee3\u7801\u52a0\u5bc6"},{"location":"QuecPython%E4%BA%A7%E5%93%81%E5%BC%80%E5%8F%91%E5%8F%8A%E9%87%8F%E4%BA%A7/#_5","text":"","title":"\u5173\u95ed\u63a7\u5236\u53f0"},{"location":"QuecPython%E5%B0%8F%E5%AE%9E%E9%AA%8C/","text":"QuecPython \u5c0f\u5b9e\u9a8c \u5f00\u53d1\u4e2d \u300a\u8dd1\u9a6c\u706f\u5b9e\u9a8c\u300b \u300a\u8702\u9e23\u5668\u5b9e\u9a8c\u300b \u300a\u6309\u952e\u8f93\u5165\u5b9e\u9a8c\u300b \u300a\u4e32\u53e3\u5b9e\u9a8c\u300b \u300a\u5916\u90e8\u4e2d\u65ad\u5b9e\u9a8c\u300b \u300a\u72ec\u7acb\u770b\u95e8\u72d7\u5b9e\u9a8c\u300b \u300a\u5b9a\u65f6\u5668\u4e2d\u65ad\u5b9e\u9a8c\u300b \u300aPWM\u8f93\u51fa\u5b9e\u9a8c\u300b \u300aLCD\u89e6\u6478\u5c4f\u663e\u793a\u5b9e\u9a8c\u300b \u300a\u5f85\u673a\u5524\u9192\u5b9e\u9a8c\u300b \u300aRTC\u5b9e\u9a8c\u300b \u300a\u5185\u90e8\u6e29\u6e7f\u5ea6\u4f20\u611f\u5668\u5b9e\u9a8c\u300b \u300a\u5149\u654f\u4f20\u611f\u5668\u5b9e\u9a8c\u300b \u300a\u52a0\u901f\u5ea6\u4f20\u611f\u5668\u5b9e\u9a8c\u300b \u300aADC\u5b9e\u9a8c\u300b \u300aIIC \u5b9e\u9a8c\u300b \u300aSPI \u5b9e\u9a8c\u300b \u300a\u97f3\u9891\u64ad\u653e\u5b9e\u9a8c\u300b \u300a\u5f55\u97f3\u5b9e\u9a8c\u300b \u300a\u8f93\u5165\u6355\u83b7\u5b9e\u9a8c\u300b \u300a\u6b65\u8fdb\u7535\u673a\u9a71\u52a8\u5b9e\u9a8c\u300b \u300aDMA\u5b9e\u9a8c\u300b \u300aPWM DAC\u5b9e\u9a8c\u300b \u300a\u7ee7\u7535\u5668\u5b9e\u9a8c\u300b","title":"QuecPython\u5c0f\u5b9e\u9a8c"},{"location":"QuecPython%E5%B0%8F%E5%AE%9E%E9%AA%8C/#quecpython","text":"","title":"QuecPython \u5c0f\u5b9e\u9a8c"},{"location":"QuecPython%E5%B0%8F%E5%AE%9E%E9%AA%8C/#_1","text":"\u300a\u8dd1\u9a6c\u706f\u5b9e\u9a8c\u300b \u300a\u8702\u9e23\u5668\u5b9e\u9a8c\u300b \u300a\u6309\u952e\u8f93\u5165\u5b9e\u9a8c\u300b \u300a\u4e32\u53e3\u5b9e\u9a8c\u300b \u300a\u5916\u90e8\u4e2d\u65ad\u5b9e\u9a8c\u300b \u300a\u72ec\u7acb\u770b\u95e8\u72d7\u5b9e\u9a8c\u300b \u300a\u5b9a\u65f6\u5668\u4e2d\u65ad\u5b9e\u9a8c\u300b \u300aPWM\u8f93\u51fa\u5b9e\u9a8c\u300b \u300aLCD\u89e6\u6478\u5c4f\u663e\u793a\u5b9e\u9a8c\u300b \u300a\u5f85\u673a\u5524\u9192\u5b9e\u9a8c\u300b \u300aRTC\u5b9e\u9a8c\u300b \u300a\u5185\u90e8\u6e29\u6e7f\u5ea6\u4f20\u611f\u5668\u5b9e\u9a8c\u300b \u300a\u5149\u654f\u4f20\u611f\u5668\u5b9e\u9a8c\u300b \u300a\u52a0\u901f\u5ea6\u4f20\u611f\u5668\u5b9e\u9a8c\u300b \u300aADC\u5b9e\u9a8c\u300b \u300aIIC \u5b9e\u9a8c\u300b \u300aSPI \u5b9e\u9a8c\u300b \u300a\u97f3\u9891\u64ad\u653e\u5b9e\u9a8c\u300b \u300a\u5f55\u97f3\u5b9e\u9a8c\u300b \u300a\u8f93\u5165\u6355\u83b7\u5b9e\u9a8c\u300b \u300a\u6b65\u8fdb\u7535\u673a\u9a71\u52a8\u5b9e\u9a8c\u300b \u300aDMA\u5b9e\u9a8c\u300b \u300aPWM DAC\u5b9e\u9a8c\u300b \u300a\u7ee7\u7535\u5668\u5b9e\u9a8c\u300b","title":"\u5f00\u53d1\u4e2d"},{"location":"QuecPython%E5%B9%B3%E5%8F%B0%E6%80%A7%E6%8E%A5%E5%8F%A3/","text":"QuecPython \u5e73\u53f0\u6027\u63a5\u53e3 QuecPython \u591a\u7ebf\u7a0b\u5f00\u53d1 QuecPython Fota\u56fa\u4ef6\u5347\u7ea7 QuecPython modem\u83b7\u53d6\u8bbe\u5907\u4fe1\u606f QuecPython \u811a\u672c\u5347\u7ea7 QuecPython \u811a\u672c\u5907\u4efd","title":"QuecPython\u5e73\u53f0\u6027\u63a5\u53e3"},{"location":"QuecPython%E5%B9%B3%E5%8F%B0%E6%80%A7%E6%8E%A5%E5%8F%A3/#quecpython","text":"","title":"QuecPython \u5e73\u53f0\u6027\u63a5\u53e3"},{"location":"QuecPython%E5%B9%B3%E5%8F%B0%E6%80%A7%E6%8E%A5%E5%8F%A3/#quecpython_1","text":"","title":"QuecPython \u591a\u7ebf\u7a0b\u5f00\u53d1"},{"location":"QuecPython%E5%B9%B3%E5%8F%B0%E6%80%A7%E6%8E%A5%E5%8F%A3/#quecpython-fota","text":"","title":"QuecPython Fota\u56fa\u4ef6\u5347\u7ea7"},{"location":"QuecPython%E5%B9%B3%E5%8F%B0%E6%80%A7%E6%8E%A5%E5%8F%A3/#quecpython-modem","text":"","title":"QuecPython modem\u83b7\u53d6\u8bbe\u5907\u4fe1\u606f"},{"location":"QuecPython%E5%B9%B3%E5%8F%B0%E6%80%A7%E6%8E%A5%E5%8F%A3/#quecpython_2","text":"","title":"QuecPython \u811a\u672c\u5347\u7ea7"},{"location":"QuecPython%E5%B9%B3%E5%8F%B0%E6%80%A7%E6%8E%A5%E5%8F%A3/#quecpython_3","text":"","title":"QuecPython \u811a\u672c\u5907\u4efd"},{"location":"QuecPython%E5%BA%94%E7%94%A8%E7%BC%96%E7%A8%8B%E6%A1%86%E6%9E%B6/","text":"QuecPython \u5e94\u7528\u7f16\u7a0b\u6846\u67b6 \u6846\u67b6\u6a21\u578b\u4ecb\u7ecd \u5982\u4f55\u4f7f\u7528\u6846\u67b6","title":"QuecPython\u5e94\u7528\u7f16\u7a0b\u6846\u67b6"},{"location":"QuecPython%E5%BA%94%E7%94%A8%E7%BC%96%E7%A8%8B%E6%A1%86%E6%9E%B6/#quecpython","text":"","title":"QuecPython \u5e94\u7528\u7f16\u7a0b\u6846\u67b6"},{"location":"QuecPython%E5%BA%94%E7%94%A8%E7%BC%96%E7%A8%8B%E6%A1%86%E6%9E%B6/#_1","text":"","title":"\u6846\u67b6\u6a21\u578b\u4ecb\u7ecd"},{"location":"QuecPython%E5%BA%94%E7%94%A8%E7%BC%96%E7%A8%8B%E6%A1%86%E6%9E%B6/#_2","text":"","title":"\u5982\u4f55\u4f7f\u7528\u6846\u67b6"},{"location":"QuecPython%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/","text":"QuecPython\u5f00\u53d1\u51c6\u5907 For full documentation visit http://python.quectel.com/. QuecPython\u5b98\u7f51\u4ecb\u7ecd\u53caSDK\u5305\u83b7\u53d6 \u5b98\u7f51\u8d44\u6e90\u4ecb\u7ecd\uff08\u624b\u628a\u624b\u6559\u5b66\u6587\u6863\u3001\u6559\u5b66\u89c6\u9891\u3001wiki\u3001\u4e0b\u8f7d\u8d44\u6e90\u7b49\uff09 QuecPython\u5f00\u53d1\u4ea4\u6d41QQ\u7fa4\u3001\u5fae\u4fe1\u516c\u4f17\u53f7 \u521d\u59cbQuecPython\u5f00\u53d1\u677f QuecPython \u652f\u6301\u7684\u5e73\u53f0\uff08CAT1/CATM/NB\uff09 \u5f00\u53d1\u677f\u4ecb\u7ecd\uff08EC100Y/EC600S/EC200U\uff09 \u5916\u8bbe\u8d44\u6e90\u5e93\uff08LCD/Sensor/SD\uff09 QuecPython\u5f00\u53d1\u73af\u5883\u642d\u5efa \u4e32\u53e3\u9a71\u52a8\u5b89\u88c5\uff08UART/USB CDC\uff09 \u4e32\u53e3\u5de5\u5177\u4ecb\u7ecd\u673a\u57fa\u7840\u4fe1\u606f\u67e5\u8be2 Python\u4ee3\u7801\u7f16\u8f91\u5de5\u5177\u4ecb\u7ecd \u5f00\u53d1\u6a21\u578b\u7b80\u4ecb\uff08\u56fe\u6587\u4ecb\u7ecdQuecPython\u8fd0\u884c\u6a21\u578b,PC/\u4e32\u53e3/\u6a21\u5757\u8fd0\u884c\u73af\u5883\u7684\u5173\u7cfb\uff09 QuecPython API\u7c7b\u5e93\u4ecb\u7ecd MicroPython\u6807\u51c6\u5e93\u548c\u5fae\u5e93 Python\u57fa\u7840\u5c5e\u6027 \u5185\u7f6e\u51fd\u6570 Python \u89e3\u91ca\u5668\u5185\u7f6e\u4e86\u5f88\u591a\u51fd\u6570\u548c\u7c7b\u578b\uff0c\u60a8\u53ef\u4ee5\u5728\u4efb\u4f55\u65f6\u5019\u4f7f\u7528\u5b83\u4eec\uff0c\u4ee5\u4e0b\u6309\u5b57\u6bcd\u8868\u987a\u5e8f\u5217\u51fa\u5b83\u4eec\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605CPython\u6587\u6863\uff1a Built-in Functions \u5185\u7f6e\u51fd\u6570 abs() all() any() bin() callable() chr() classmethod() compile() delattr() dir() divmod() enumerate() eval() exec() filter() getattr() globals() hasattr() hash() hex() id() input() isinstance() issubclass() iter() len() locals() map() max() min() next() oct() open() ord() pow() print() property() range() repr() reversed() round() setattr() sorted() staticmothed() sum() super() type() zip() \u5185\u7f6e\u5e38\u91cf \u6709\u5c11\u6570\u7684\u5e38\u91cf\u5b58\u5728\u4e0e\u5185\u7f6e\u547d\u540d\u7a7a\u95f4\u4e2d\uff0c\u5982\u4e0b\u8868\u6240\u793a\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605\u9605CPython\u6587\u6863\uff1a Built-in Constants \u5185\u7f6e\u5e38\u91cf False bool \u7c7b\u578b\u7684\u5047\u503c True bool \u7c7b\u578b\u7684\u771f\u503c None Nonetype\u7c7b\u578b\u7684\u552f\u4e00\u503c __debug__ Python\u6ca1\u6709\u4ee5 -O \u9009\u9879\u542f\u52a8\uff0c\u5219\u6b64\u5e38\u91cf\u4e3a\u771f\u503c Ellipsis \u4e0e\u7528\u6237\u5b9a\u4e49\u7684\u5bb9\u5668\u6570\u636e\u7c7b\u578b\u7684\u6269\u5c55\u5207\u7247\u8bed\u6cd5\u7ed3\u5408\u4f7f\u7528 NotImplemented \u4e8c\u8fdb\u5236\u7279\u6b8a\u65b9\u6cd5\u5e94\u8fd4\u56de\u7684\u7279\u6b8a\u503c\uff08\u4f8b\u5982\uff0c eq() \u3001__lt()__\u7b49\uff09\u8868\u793a\u64cd\u4f5c\u6ca1\u6709\u9488\u5bf9\u5176\u4ed6\u7c7b\u578b\u5b9e\u73b0 \u5185\u7f6e\u7c7b\u578b \u4e0b\u8868\u5217\u51fa\u5185\u7f6e\u7684\u6570\u636e\u7c7b\u578b\uff0c\u66f4\u591a\u8be6\u60c5\u8bf7\u53c2\u9605\u9605CPython\u6587\u6863\uff1a Built-in Types \u5185\u7f6e\u7c7b\u578b int \u6574\u6570\uff0c\u6570\u503c\u7c7b\u578b float \u6d6e\u70b9\u6570\uff0c\u6570\u503c\u7c7b\u578b complex \u590d\u6570\uff0c\u6570\u503c\u7c7b\u578b bool bool\uff0c\u6570\u503c\u7c7b\u578b list \u5217\u8868\uff0c\u5e8f\u5217\u7c7b\u578b tuple \u5143\u7ec4\uff0c\u5e8f\u5217\u7c7b\u578b range range\u5bf9\u8c61\uff0c\u5e8f\u5217\u7c7b\u578b str \u5b57\u7b26\u4e32\uff0c\u5e8f\u5217\u7c7b\u578b bytes \u5355\u4e2a\u5b57\u8282\u6784\u6210\u7684\u4e0d\u53ef\u53d8\u5e8f\u5217\uff0c\u5e8f\u5217\u7c7b\u578b bytearray bytes\u5bf9\u8c61\u7684\u53ef\u53d8\u5bf9\u5e94\u7269\uff0c\u5e8f\u5217\u7c7b\u578b memoryview \u4e8c\u8fdb\u5236\u5e8f\u5217 dict \u5b57\u5178\uff0c\u6620\u5c04\u7c7b\u578b set \u96c6\u5408 frozenset \u96c6\u5408\uff0c\u4e0d\u53ef\u4fee\u6539\uff0c\u5177\u6709\u54c8\u5e0c\u503c object \u5bf9\u8c61\uff0cpython3.x\u540eclass\u9ed8\u8ba4\u7684\u57fa\u7c7b slice \u51fd\u6570\uff0c\u5207\u7247 \u6807\u51c6\u5e93 uos - \u57fa\u672c\u7cfb\u7edf\u670d\u52a1 uos\u6a21\u5757\u5305\u542b\u6587\u4ef6\u7cfb\u7edf\u8bbf\u95ee\u548c\u6302\u8f7d\u6784\u5efa\uff0c\u8be5\u6a21\u5757\u5b9e\u73b0\u4e86CPython\u6a21\u5757\u76f8\u5e94\u6a21\u5757\u7684\u5b50\u96c6\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605\u9605CPython\u6587\u6863\uff1a os uos.remove(path) \u5220\u9664\u6587\u4ef6\u3002path\u8868\u793a\u6587\u4ef6\u540d\u3002 uos.chdir(path) \u6539\u53d8\u5f53\u524d\u76ee\u5f55\u3002path\u8868\u793a\u76ee\u5f55\u540d\u3002 uos.getcwd() \u83b7\u53d6\u5f53\u524d\u8def\u5f84\u3002 uos.listdir( [dir] ) \u6ca1\u6709\u53c2\u6570\u5217\u51fa\u5f53\u524d\u76ee\u5f55\u6587\u4ef6\uff0c\u5426\u5219\u5217\u51fa\u7ed9\u5b9a\u76ee\u5f55\u7684\u6587\u4ef6\u3002dir\u4e3a\u53ef\u9009\u53c2\u6570\uff0c\u8868\u793a\u76ee\u5f55\u540d\uff0c\u9ed8\u8ba4\u4e3a \u2018/\u2019 \u76ee\u5f55\u3002 \u793a\u4f8b\uff1a >>> uos.listdir() [\u2018file1\u2019, \u2018read.txt\u2019, \u2018demo.py\u2019] uos.mkdir(path) \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u76ee\u5f55\u3002path\u8868\u793a\u51c6\u5907\u521b\u5efa\u7684\u76ee\u5f55\u540d\u3002 \u793a\u4f8b\uff1a >>> uos.mkdir('testdir') >>> uos.listdir() [\u2018file1\u2019, \u2018read.txt\u2019, \u2018demo.py\u2019, 'testdir'] uos.rename(old_path, new_path) \u91cd\u547d\u540d\u6587\u4ef6\u3002old_path\u8868\u793a\u65e7\u6587\u4ef6\u6216\u76ee\u5f55\u540d\uff0cnew_path\u8868\u793a\u65b0\u6587\u4ef6\u6216\u76ee\u5f55\u540d\u3002 \u793a\u4f8b\uff1a >>> uos.rename('testdir', 'testdir1') uos.rmdir(path) \u5220\u9664\u6307\u5b9a\u76ee\u5f55\u3002path\u8868\u793a\u76ee\u5f55\u540d\u3002 \u793a\u4f8b\uff1a >>> uos.rmdir('testdir') >>> uos.listdir() [\u2018file1\u2019, \u2018read.txt\u2019, \u2018demo.py\u2019] uos.ilistdir( [dir] ) \u8be5\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u8be5\u8fed\u4ee3\u5668\u4f1a\u751f\u6210\u6240\u5217\u51fa\u6761\u76ee\u5bf9\u5e94\u76843\u5143\u7ec4\u3002dir\u4e3a\u53ef\u9009\u53c2\u6570\uff0c\u8868\u793a\u76ee\u5f55\u540d\uff0c\u6ca1\u6709\u53c2\u6570\u65f6\uff0c\u9ed8\u8ba4\u5217\u51fa\u5f53\u524d\u76ee\u5f55\uff0c\u6709\u53c2\u6570\u65f6\uff0c\u5219\u5217\u51fadir\u53c2\u6570\u6307\u5b9a\u7684\u76ee\u5f55\u3002\u5143\u7ec4\u7684\u5f62\u5f0f\u4e3a (name, type, inode[, size]) : name \u662f\u6761\u76ee\u7684\u540d\u79f0\uff0c\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u5982\u679cdir\u662f\u5b57\u8282\u5bf9\u8c61\uff0c\u5219\u540d\u79f0\u4e3a\u5b57\u8282; type \u662f\u6761\u76ee\u7684\u7c7b\u578b\uff0c\u6574\u578b\u6570\uff0c0x4000\u8868\u793a\u76ee\u5f55\uff0c0x8000\u8868\u793a\u5e38\u89c4\u6587\u4ef6\uff1b \u662f\u4e00\u4e2a\u4e0e\u6587\u4ef6\u7684\u7d22\u5f15\u8282\u70b9\u76f8\u5bf9\u5e94\u7684\u6574\u6570\uff0c\u5bf9\u4e8e\u6ca1\u6709\u8fd9\u79cd\u6982\u5ff5\u7684\u6587\u4ef6\u7cfb\u7edf\u6765\u8bf4\uff0c\u53ef\u80fd\u4e3a0\uff1b \u4e00\u4e9b\u5e73\u53f0\u53ef\u80fd\u4f1a\u8fd4\u56de\u4e00\u4e2a4\u5143\u7ec4\uff0c\u5176\u4e2d\u5305\u542b\u6761\u76ee\u7684size\u3002\u5bf9\u4e8e\u6587\u4ef6\u6761\u76ee\uff0csize\u8868\u793a\u6587\u4ef6\u5927\u5c0f\u7684\u6574\u6570\uff0c\u5982\u679c\u672a\u77e5\uff0c\u5219\u4e3a-1\u3002\u5bf9\u4e8e\u76ee\u5f55\u9879\uff0c\u5176\u542b\u4e49\u76ee\u524d\u5c1a\u672a\u5b9a\u4e49\u3002 uos.stat(path) \u83b7\u53d6\u6587\u4ef6\u6216\u76ee\u5f55\u7684\u72b6\u6001\u3002path\u8868\u793a\u6587\u4ef6\u6216\u76ee\u5f55\u540d\u3002\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u5143\u7ec4\uff0c\u8fd4\u56de\u503c\u5f62\u5f0f\u4e3a\uff1a (mode, ino, dev, nlink, uid, gid, size, atime, mtime, ctime) mode \u2013 inode\u4fdd\u62a4\u6a21\u5f0f ino \u2013 inode\u8282\u70b9\u53f7 dev \u2013 inode\u9a7b\u7559\u7684\u8bbe\u5907 nlink \u2013 inode\u7684\u94fe\u63a5\u6570 uid \u2013 \u6240\u6709\u8005\u7684\u7528\u6237ID gid \u2013 \u6240\u6709\u8005\u7684\u7ec4ID size \u2013 \u6587\u4ef6\u5927\u5c0f\uff0c\u5355\u4f4d\u5b57\u8282 atime \u2013 \u4e0a\u6b21\u8bbf\u95ee\u7684\u65f6\u95f4 mtime \u2013 \u6700\u540e\u4e00\u6b21\u4fee\u6539\u7684\u65f6\u95f4 ctime \u2013 \u64cd\u4f5c\u7cfb\u7edf\u62a5\u544a\u7684\u201cctime\u201d\uff0c\u5728\u67d0\u4e9b\u7cfb\u7edf\u4e0a\u662f\u6700\u65b0\u7684\u5143\u6570\u636e\u66f4\u6539\u7684\u65f6\u95f4\uff0c\u5728\u5176\u5b83\u7cfb\u7edf\u4e0a\u662f\u521b\u5efa\u65f6\u95f4\uff0c\u8be6\u7ec6\u4fe1\u606f\u53c2\u89c1\u5e73\u53f0\u6587\u6863 uos.statvfs(path) \u83b7\u53d6\u6587\u4ef6\u7cfb\u7edf\u72b6\u6001\u4fe1\u606f\u3002path\u8868\u793a\u6587\u4ef6\u6216\u76ee\u5f55\u540d\u3002\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u6587\u4ef6\u7cfb\u7edf\u4fe1\u606f\u7684\u5143\u7ec4\uff1a (f_bsize, f_frsize, f_blocks, f_bfree, f_bavail, f_files, f_ffree, f_favail, f_flag, f_namemax) f_bsize \u2013 \u6587\u4ef6\u7cfb\u7edf\u5757\u5927\u5c0f\uff0c\u5355\u4f4d\u5b57\u8282 f_frsize \u2013 \u5206\u6808\u5927\u5c0f\uff0c\u5355\u4f4d\u5b57\u8282 f_blocks \u2013 \u6587\u4ef6\u7cfb\u7edf\u6570\u636e\u5757\u603b\u6570 f_bfree \u2013 \u53ef\u7528\u5757\u6570 f_bavai \u2013 \u975e\u8d85\u7ea7\u7528\u6237\u53ef\u83b7\u53d6\u7684\u5757\u6570 f_files \u2013 \u6587\u4ef6\u7ed3\u70b9\u603b\u6570 f_ffree \u2013 \u53ef\u7528\u6587\u4ef6\u7ed3\u70b9\u6570 f_favail \u2013 \u8d85\u7ea7\u7528\u6237\u7684\u53ef\u7528\u6587\u4ef6\u7ed3\u70b9\u6570 f_flag \u2013 \u6302\u8f7d\u6807\u8bb0 f_namemax \u2013 \u6700\u5927\u6587\u4ef6\u957f\u5ea6\uff0c\u5355\u4f4d\u5b57\u8282 \u793a\u4f8b\uff1a >>> import uos >>> res = uos.statvfs(\"main.py\") >>> print(res) (4096, 4096, 256, 249, 249, 0, 0, 0, 0, 255) uos.uname() \u83b7\u53d6\u5173\u4e8e\u5e95\u5c42\u4fe1\u606f\u6216\u5176\u64cd\u4f5c\u7cfb\u7edf\u7684\u4fe1\u606f\u3002\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4\uff0c\u5f62\u5f0f\u4e3a\uff1a (sysname, nodename, release, version, machine) sysname \u2013 \u5e95\u5c42\u7cfb\u7edf\u7684\u540d\u79f0\uff0cstring\u7c7b\u578b nodename \u2013 \u7f51\u7edc\u540d\u79f0(\u53ef\u4ee5\u4e0e sysname \u76f8\u540c) \uff0cstring\u7c7b\u578b release \u2013 \u5e95\u5c42\u7cfb\u7edf\u7684\u7248\u672c\uff0cstring\u7c7b\u578b version \u2013 MicroPython\u7248\u672c\u548c\u6784\u5efa\u65e5\u671f\uff0cstring\u7c7b\u578b machine \u2013 \u5e95\u5c42\u786c\u4ef6(\u5982\u4e3b\u677f\u3001CPU)\u7684\u6807\u8bc6\u7b26\uff0cstring\u7c7b\u578b \u793a\u4f8b\uff1a >>> import uos >>> uos.uname() (sysname='EC100Y', nodename='EC100Y', release='1.12.0', version='v1.12 on 2020-06-23', machine='EC100Y with QUECTEL') uos.urandom(n) \u8fd4\u56de\u5177\u6709 n\u4e2a \u968f\u673a\u5b57\u8282\u7684bytes\u5bf9\u8c61\uff0c\u53ea\u8981\u6709\u53ef\u80fd\uff0c\u5b83\u5c31\u4f1a\u7531\u786c\u4ef6\u968f\u673a\u6570\u751f\u6210\u5668\u751f\u6210\u3002 \u793a\u4f8b\uff1a >>> import uos >>> uos.urandom(5) b'\\xb3\\xc9Y\\x1b\\xe9' gc - \u5185\u5b58\u788e\u7247\u56de\u6536 gc \u6a21\u5757\u5b9e\u73b0\u5185\u5b58\u5783\u573e\u56de\u6536\u673a\u5236\uff0c\u8be5\u6a21\u5757\u5b9e\u73b0\u4e86CPython\u6a21\u5757\u76f8\u5e94\u6a21\u5757\u7684\u5b50\u96c6\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605\u9605CPython\u6587\u6863\uff1a gc gc.enable() \u542f\u7528\u81ea\u52a8\u56de\u6536\u5185\u5b58\u788e\u7247\u673a\u5236\u3002 gc.disable() \u7981\u7528\u81ea\u52a8\u56de\u6536\u673a\u5236\u3002 gc.collect() \u56de\u6536\u5185\u5b58\u788e\u7247\u3002 gc.mem_alloc() \u8fd4\u56de\u5206\u914d\u7684\u5806RAM\u7684\u5b57\u8282\u6570\u3002\u6b64\u529f\u80fd\u662fMicroPython\u6269\u5c55\u3002 gc.mem_free() \u8fd4\u56de\u53ef\u7528\u5806RAM\u7684\u5b57\u8282\u6570\uff0c\u5982\u679c\u6b64\u6570\u91cf\u672a\u77e5\uff0c\u5219\u8fd4\u56de-1\u3002\u6b64\u529f\u80fd\u662fMicroPython\u6269\u5c55\u3002 ubinascii - \u4e8c\u8fdb\u5236\u4e0eASCII\u8f6c\u6362 ubinascii \u6a21\u5757\u5b9e\u73b0\u4e86\u4e8c\u8fdb\u5236\u6570\u636e\u4e0e\u5404\u79cdASCII\u7f16\u7801\u4e4b\u95f4\u7684\u8f6c\u6362(\u53cc\u5411)\uff0c\u8be5\u6a21\u5757\u5b9e\u73b0\u4e86CPython\u6a21\u5757\u76f8\u5e94\u6a21\u5757\u7684\u5b50\u96c6\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605\u9605CPython\u6587\u6863\uff1a binascii ubinascii.a2b_base64(data) \u89e3\u7801base64\u7f16\u7801\u7684\u6570\u636e\uff0c\u4f1a\u81ea\u52a8\u5ffd\u7565\u8f93\u5165\u4e2d\u7684\u65e0\u6548\u5b57\u7b26\uff0c\u8fd4\u56de bytes \u5bf9\u8c61\u3002 ubinascii.b2a_base64(data) \u4ee5base64\u683c\u5f0f\u7f16\u7801\u4e8c\u8fdb\u5236\u6570\u636e\uff0c\u8fd4\u56de\u7f16\u7801\u6570\u636e\u3002\u540e\u9762\u8ddf\u6362\u884c\u7b26\uff0c\u4f5c\u4e3a bytes \u5bf9\u8c61\u3002 ubinascii.hexlify(data, [sep]) \u5c06\u4e8c\u8fdb\u5236\u6570\u636e\u8f6c\u6362\u4e3a\u5341\u516d\u8fdb\u5236\u5b57\u7b26\u4e32\u8868\u793a\u3002 \u793a\u4f8b\uff1a >>> import ubinascii # \u6ca1\u6709sep\u53c2\u6570 >>> ubinascii.hexlify('\\x11\\x22123') b'1122313233' >>> ubinascii.hexlify('abcdfg') b'616263646667' # \u6307\u5b9a\u4e86\u7b2c\u4e8c\u4e2a\u53c2\u6570sep\uff0c\u5b83\u5c06\u7528\u4e8e\u5206\u9694\u4e24\u4e2a\u5341\u516d\u8fdb\u5236\u6570 >>> ubinascii.hexlify('\\x11\\x22123', ' ') b'11 22 31 32 33' >>> ubinascii.hexlify('\\x11\\x22123', ',') b'11,22,31,32,33' ubinascii.unhexlify(data) \u5c06\u5341\u516d\u8fdb\u5236\u5f62\u5f0f\u7684\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u4e8c\u8fdb\u5236\u5f62\u5f0f\u7684\u5b57\u7b26\u4e32\u8868\u793a\u3002 \u793a\u4f8b\uff1a >>> import ubinascii >>> ubinascii.unhexlify('313222') b'12\"' ucollections - \u96c6\u5408\u548c\u5bb9\u5668\u7c7b\u578b ucollections \u6a21\u5757\u7528\u4e8e\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5bb9\u5668\u7c7b\u578b\uff0c\u7528\u4e8e\u4fdd\u5b58\u5404\u79cd\u5bf9\u8c61\u3002\u8be5\u6a21\u5757\u5b9e\u73b0\u4e86CPython\u6a21\u5757\u76f8\u5e94\u6a21\u5757\u7684\u5b50\u96c6\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605\u9605CPython\u6587\u6863\uff1a collections mytuple = ucollections.namedtuple(name, fields) \u521b\u5efa\u4e00\u4e2a\u5177\u6709\u7279\u5b9a\u540d\u79f0\u548c\u4e00\u7ec4\u5b57\u6bb5\u7684\u65b0namedtuple\u5bb9\u5668\u7c7b\u578b\uff0cnamedtuple\u662f\u5143\u7ec4\u7684\u5b50\u7c7b\uff0c\u5141\u8bb8\u901a\u8fc7\u7d22\u5f15\u6765\u8bbf\u95ee\u5b83\u7684\u5b57\u6bb5\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e name str \u65b0\u521b\u5efa\u5bb9\u5668\u7684\u7c7b\u578b\u540d\u79f0 fields tuple \u65b0\u521b\u5efa\u5bb9\u5668\u7c7b\u578b\u5305\u542b\u5b50\u7c7b\u578b\u7684\u5b57\u6bb5 \u793a\u4f8b\uff1a >>> import ucollections >>> mytuple = ucollections.namedtuple(\"mytuple\", (\"id\", \"name\")) >>> t1 = mytuple(1, \"foo\") >>> t2 = mytuple(2, \"bar\") >>> print(t1.name) foo dq = ucollections.deque(iterable, maxlen, flag) \u521b\u5efadeque\u53cc\u5411\u961f\u5217 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e iterable tuple iterable\u5fc5\u987b\u662f\u7a7a\u5143\u7ec4 maxlen int \u6307\u5b9amaxlen\u5e76\u5c06\u53cc\u7aef\u961f\u5217\u9650\u5236\u4e3a\u6b64\u6700\u5927\u957f\u5ea6 flag int \u53ef\u9009\u53c2\u6570\uff1b0(\u9ed8\u8ba4)\uff1a\u4e0d\u68c0\u67e5\u961f\u5217\u662f\u5426\u6ea2\u51fa\uff0c\u8fbe\u5230\u6700\u5927\u957f\u5ea6\u65f6\u7ee7\u7eedappend\u4f1a\u4e22\u5f03\u4e4b\u524d\u7684\u503c \uff0c1\uff1a\u5f53\u961f\u5217\u8fbe\u5230\u6700\u5927\u8bbe\u5b9a\u957f\u5ea6\u4f1a\u629b\u51faIndexError: full \u8fd4\u56de\u503c deque\u5bf9\u8c61 deque\u5bf9\u8c61\u65b9\u6cd5 \u200b dq.append(data) \u5f80\u961f\u5217\u4e2d\u63d2\u5165\u503c\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e data \u57fa\u672c\u6570\u636e\u7c7b\u578b \u9700\u8981\u6dfb\u52a0\u5230\u961f\u5217\u7684\u6570\u503c \u8fd4\u56de\u503c \u65e0 \u200b dq.popleft() \u4ecedeque\u7684\u5de6\u4fa7\u79fb\u9664\u5e76\u8fd4\u56de\u79fb\u9664\u7684\u6570\u636e\u3002\u5982\u679c\u6ca1\u6709deque\u4e3a\u7a7a\uff0c\u4f1a\u5f15\u8d77\u7d22\u5f15\u9519\u8bef \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u8fd4\u56depop\u51fa\u7684\u503c \u4f7f\u7528\u793a\u4f8b from ucollections import deque dq = deque((),5) dq.append(1) dq.append([\"a\"]) dq.append(\"a\") dq.popleft() # 1 dq.popleft() # [\"a\"] dq.popleft() # a urandom - \u751f\u6210\u968f\u673a\u6570 urandom \u6a21\u5757\u63d0\u4f9b\u4e86\u751f\u6210\u968f\u673a\u6570\u7684\u5de5\u5177\u3002 urandom.choice(obj) \u968f\u673a\u751f\u6210\u5bf9\u8c61 obj \u4e2d\u7684\u5143\u7d20\uff0cobj \u7c7b\u578b string\u3002 \u793a\u4f8b\uff1a >>> import urandom >>> urandom.choice(\"QuecPython\") 't' urandom.getrandbits(k) \u968f\u673a\u4ea7\u751f\u4e00\u4e2ak\u6bd4\u7279\u957f\u7684\u968f\u673a\u6574\u6570\u3002 \u793a\u4f8b\uff1a >>> import urandom >>> urandom.getrandbits(1) #1\u4f4d\u4e8c\u8fdb\u5236\u4f4d\uff0c\u8303\u56f4\u4e3a0~1\uff08\u5341\u8fdb\u5236\uff1a0~1\uff09 1 >>> urandom.getrandbits(1) 0 >>> urandom.getrandbits(8) #8\u4f4d\u4e8c\u8fdb\u5236\u4f4d\uff0c\u8303\u56f4\u4e3a0000 0000~1111 11111\uff08\u5341\u8fdb\u5236\uff1a0~255\uff09 224 urandom.randint(start, end) \u968f\u673a\u751f\u6210\u4e00\u4e2a start \u5230 end \u4e4b\u95f4\u7684\u6574\u6570\u3002 \u793a\u4f8b\uff1a >>> import urandom >>> urandom.randint(1, 4) 4 >>> urandom.randint(1, 4) 2 urandom.random() \u968f\u673a\u751f\u6210\u4e00\u4e2a 0 \u5230 1 \u4e4b\u95f4\u7684\u6d6e\u70b9\u6570\u3002 \u793a\u4f8b\uff1a >>> import urandom >>> urandom.random() 0.8465231 urandom.randrange(start, end, step) \u968f\u673a\u751f\u6210 start \u5230 end \u95f4\u5e76\u4e14\u9012\u589e\u4e3a step \u7684\u6b63\u6574\u6570\u3002 \u793a\u4f8b\uff1a >>> import urandom >>> urandom.randrange(0, 8, 2) 0 >>> urandom.randrange(0, 8, 2) 6 urandom.seed(sed) \u6307\u5b9a\u968f\u673a\u6570\u79cd\u5b50\uff0c\u901a\u5e38\u548c\u5176\u5b83\u968f\u673a\u6570\u751f\u6210\u51fd\u6570\u642d\u914d\u4f7f\u7528\u3002 \u793a\u4f8b\uff1a >>> import urandom >>> urandom.seed(20) #\u6307\u5b9a\u968f\u673a\u6570\u79cd\u5b50 >>> for i in range(0, 15): #\u751f\u62100~15\u8303\u56f4\u5185\u7684\u968f\u673a\u5e8f\u5217 ... print(urandom.randint(1, 10)) ... 8 10 9 10 2 1 9 3 2 2 6 1 10 9 6 urandom.uniform(start, end) \u968f\u673a\u751f\u6210 start \u5230 end \u8303\u56f4\u5185\u7684\u6d6e\u70b9\u6570\u3002 \u793a\u4f8b\uff1a >>> import urandom >>> urandom.uniform(3, 5) 3.219261 >>> urandom.uniform(3, 5) 4.00403 math - \u6570\u5b66\u8fd0\u7b97 math \u6a21\u5757\u63d0\u4f9b\u6570\u5b66\u8fd0\u7b97\u51fd\u6570\u3002\u8be5\u6a21\u5757\u5b9e\u73b0\u76f8\u5e94CPython\u6a21\u5757\u7684\u5b50\u96c6\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605\u9605CPython\u6587\u6863\uff1a math math.pow(x, y) \u8fd4\u56dex\u7684y\u6b21\u65b9\uff0c\u8fd4\u56de\u503c\u662f\u6d6e\u70b9\u6570\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.pow(2, 3) 8.0 math.acos(x) \u8fd4\u56dex\u7684\u53cd\u4f59\u5f26\u5f27\u5ea6\u503c\uff0c\u8fd4\u56de\u503c\u4e3a\u6d6e\u70b9\u6570\u3002x\u662f-1~1\u4e4b\u95f4\u7684\u6570\uff0c\u5305\u62ec-1\u548c1\uff0c\u5982\u679c\u5c0f\u4e8e-1\u6216\u8005\u5927\u4e8e1\uff0c\u4f1a\u4ea7\u751f\u9519\u8bef\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.acos(0.6) 0.9272952 math.asin(x) \u8fd4\u56dex\u7684\u53cd\u6b63\u5f26\u5f27\u5ea6\u503c\uff0c\u8fd4\u56de\u503c\u4e3a\u6d6e\u70b9\u6570\u3002x\u662f-1~1\u4e4b\u95f4\u7684\u6570\uff0c\u5305\u62ec-1\u548c1\uff0c\u5982\u679c\u5c0f\u4e8e-1\u6216\u8005\u5927\u4e8e1\uff0c\u4f1a\u4ea7\u751f\u9519\u8bef\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.asin(-1) -1.570796 math.atan(x) \u8fd4\u56dex\u7684\u53cd\u6b63\u5207\u5f27\u5ea6\u503c\uff0c\u8fd4\u56de\u503c\u4e3a\u6d6e\u70b9\u6570\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.atan(-8) -1.446441 >>> math.atan(6.4) 1.4158 math.atan2(x, y) \u8fd4\u56de\u7ed9\u5b9a\u7684 X \u53ca Y \u5750\u6807\u503c\u7684\u53cd\u6b63\u5207\u503c\uff0c\u8fd4\u56de\u503c\u4e3a\u6d6e\u70b9\u6570\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.atan2(-0.50,0.48) -0.8058035 >>> math.atan2(7, 9) 0.6610432 math.ceil(x) \u8fd4\u56de\u6570\u5b57\u7684\u4e0a\u5165\u6574\u6570\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.ceil(4.1) 5 math.copysign(x, y) \u628ay\u7684\u6b63\u8d1f\u53f7\u52a0\u5230x\u524d\u9762\uff0c\u53ef\u4ee5\u4f7f\u75280\uff0c\u8fd4\u56de\u503c\u4e3a\u6d6e\u70b9\u6570\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.copysign(5, 0) 5.0 >>> math.copysign(5, -4) -5.0 >>> math.copysign(5, 9) 5.0 math.cos(x) \u8fd4\u56dex\u7684\u5f27\u5ea6\u7684\u4f59\u5f26\u503c\uff0c\u8303\u56f4\u518d-1~1\u4e4b\u95f4\uff0c\u8fd4\u56de\u503c\u4e3a\u6d6e\u70b9\u6570\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.cos(3) -0.9899925 math.degrees(x) \u5c06\u5f27\u5ea6\u8f6c\u6362\u4e3a\u89d2\u5ea6\uff0c\u8fd4\u56de\u503c\u4e3a\u6d6e\u70b9\u6570\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.degrees(5) 286.4789 >>> math.degrees(math.pi/2) 90.0 math.e \u6570\u5b66\u5e38\u91cf e \uff0c e \u5373\u81ea\u7136\u5e38\u6570\u3002 math.exp(x) \u8fd4\u56dee\u7684x\u6b21\u5e42\uff0c\u8fd4\u56de\u503c\u4e3a\u6d6e\u70b9\u6570\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.exp(1) 2.718282 >>> print(math.e) 2.718282 math.fabs(x) \u8fd4\u56de\u6570\u5b57\u7684\u7edd\u5bf9\u503c\uff0c\u8fd4\u56de\u503c\u4e3a\u6d6e\u70b9\u6570\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.fabs(-3.88) 3.88 math.floor(x) \u8fd4\u56de\u6570\u5b57\u7684\u4e0b\u820d\u6574\u6570\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.floor(8.7) 8 >>> math.floor(9) 9 >>> math.floor(-7.6) -8 math.fmod(x, y) \u8fd4\u56dex/y\u7684\u4f59\u6570\uff0c\u8fd4\u56de\u503c\u4e3a\u6d6e\u70b9\u6570\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.fmod(15, 4) 3.0 >>> math.fmod(15, 3) 0.0 math.modf(x) \u8fd4\u56de\u7531x\u7684\u5c0f\u6570\u90e8\u5206\u548c\u6574\u6570\u90e8\u5206\u7ec4\u6210\u7684\u5143\u7ec4\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.modf(17.592) (0.5919991, 17.0) math.frexp(x) \u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4(m,e),\u5176\u8ba1\u7b97\u65b9\u5f0f\u4e3a\uff1ax\u5206\u522b\u96640.5\u548c1,\u5f97\u5230\u4e00\u4e2a\u503c\u7684\u8303\u56f4\uff0c2e\u7684\u503c\u5728\u8fd9\u4e2a\u8303\u56f4\u5185\uff0ce\u53d6\u7b26\u5408\u8981\u6c42\u7684\u6700\u5927\u6574\u6570\u503c,\u7136\u540ex/(2e)\uff0c\u5f97\u5230m\u7684\u503c\u3002\u5982\u679cx\u7b49\u4e8e0\uff0c\u5219m\u548ce\u7684\u503c\u90fd\u4e3a0\uff0cm\u7684\u7edd\u5bf9\u503c\u7684\u8303\u56f4\u4e3a(0.5,1)\u4e4b\u95f4\uff0c\u4e0d\u5305\u62ec0.5\u548c1\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.frexp(52) (0.8125, 6) math.isfinite(x) \u5224\u65ad x \u662f\u5426\u4e3a\u6709\u9650\u6570\uff0c\u662f\u5219\u8fd4\u56deTrue\uff0c\u5426\u5219\u8fd4\u56deFalse\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.isfinite(8) True math.isinf(x) \u5982\u679cx\u662f\u6b63\u65e0\u7a77\u5927\u6216\u8d1f\u65e0\u7a77\u5927\uff0c\u5219\u8fd4\u56deTrue,\u5426\u5219\u8fd4\u56deFalse\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.isinf(123) False math.isnan(x) \u5982\u679cx\u4e0d\u662f\u6570\u5b57True,\u5426\u5219\u8fd4\u56deFalse\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.isnan(23) False math.ldexp(x, exp) \u8fd4\u56dex (2 *i)\u7684\u503c\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.ldexp(2, 1) 4.0 math.log(x) \u8fd4\u56dex\u7684\u81ea\u7136\u5bf9\u6570\uff0cx > 0\uff0c\u5c0f\u4e8e0\u4f1a\u62a5\u9519\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.log(2) 0.6931472 math.pi \u6570\u5b66\u5e38\u91cf pi\uff08\u5706\u5468\u7387\uff0c\u4e00\u822c\u4ee5\u03c0\u6765\u8868\u793a\uff09\u3002 math.radians(x) \u5c06\u89d2\u5ea6\u8f6c\u6362\u4e3a\u5f27\u5ea6\uff0c\u8fd4\u56de\u503c\u4e3a\u6d6e\u70b9\u6570\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.radians(90) 1.570796 math.sin(x) \u8fd4\u56dex\u5f27\u5ea6\u7684\u6b63\u5f26\u503c\uff0c\u6570\u503c\u5728 -1 \u5230 1 \u4e4b\u95f4\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.sin(-18) 0.7509873 >>> math.sin(50) -0.2623749 math.sqrt(x) \u8fd4\u56de\u6570\u5b57x\u7684\u5e73\u65b9\u6839\uff0c\u8fd4\u56de\u503c\u4e3a\u6d6e\u70b9\u6570\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.sqrt(4) 2.0 >>> math.sqrt(7) 2.645751 math.tan(x) \u8fd4\u56de x \u5f27\u5ea6\u7684\u6b63\u5207\u503c\uff0c\u6570\u503c\u5728 -1 \u5230 1 \u4e4b\u95f4\uff0c\u4e3a\u6d6e\u70b9\u6570\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.tan(9) -0.4523157 math.trunc(x) \u8fd4\u56dex\u7684\u6574\u6570\u90e8\u5206\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.trunc(7.123) 7 usocket - socket\u6a21\u5757 usocket \u6a21\u5757\u63d0\u4f9b\u5bf9BSD\u5957\u63a5\u5b57\u63a5\u53e3\u7684\u8bbf\u95ee\u3002\u8be5\u6a21\u5757\u5b9e\u73b0\u76f8\u5e94CPython\u6a21\u5757\u7684\u5b50\u96c6\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605\u9605CPython\u6587\u6863\uff1a socket usocket.socket(af=AF_INET, type=SOCK_STREAM, proto=IPPROTO_TCP) \u6839\u636e\u7ed9\u5b9a\u7684\u5730\u5740\u65cf\u3001\u5957\u63a5\u5b57\u7c7b\u578b\u4ee5\u53ca\u534f\u8bae\u7c7b\u578b\u53c2\u6570\uff0c\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5957\u63a5\u5b57\u3002\u6ce8\u610f\uff0c\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u4e0d\u9700\u8981\u6307\u5b9a proto \uff0c\u4e5f\u4e0d\u5efa\u8bae\u8fd9\u6837\u505a\uff0c\u56e0\u4e3a\u67d0\u4e9bMicroPython\u7aef\u53e3\u53ef\u80fd\u4f1a\u7701\u7565 IPPROTO_* \u5e38\u91cf\u3002 \u5e38\u91cf\u8bf4\u660e af - \u5730\u5740\u65cf usocket.AF_INET \uff1aIPV4 usocket.AF_INET6 \uff1aIPV6 type - socket\u7c7b\u578b usocket.SOCK_STREAM \uff1a\u5bf9\u5e94TCP\u7684\u6d41\u5f0f\u5957\u63a5\u5b57 usocket.SOCK_DGRAM \uff1a\u5bf9\u5e94UDP\u7684\u6570\u636e\u5305\u5957\u63a5\u5b57 usocket.SOCK_RAW \uff1a\u539f\u59cb\u5957\u63a5\u5b57 proto - \u534f\u8bae\u53f7 usocket.IPPROTO_TCP usocket.IPPROTO_UDP \u5176\u4ed6 usocket.SOL_SOCKET - \u5957\u63a5\u5b57\u9009\u9879\u7ea7\u522b\uff0c usocket.SO_REUSEADDR - \u5141\u8bb8\u7ed1\u5b9a\u5730\u5740\u5feb\u901f\u91cd\u7528 \u793a\u4f8b\uff1a import usocket # \u521b\u5efa\u57fa\u4e8eTCP\u7684\u6d41\u5f0f\u5957\u63a5\u5b57 socket = usocket.socket(usocket.AF_INET, usocket.SOCK_STREAM) # \u521b\u5efa\u57fa\u4e8eUDP\u7684\u6570\u636e\u62a5\u5957\u63a5\u5b57 socket = usocket.socket(usocket.AF_INET, usocket.SOCK_DGRAM) usocket.getaddrinfo(host, port) \u5c06\u4e3b\u673a\u57df\u540d\uff08host\uff09\u548c\u7aef\u53e3\uff08port\uff09\u8f6c\u6362\u4e3a\u7528\u4e8e\u521b\u5efa\u5957\u63a5\u5b57\u76845\u5143\u7ec4\u5e8f\u5217\uff0c\u5143\u7ec4\u7ed3\u6784\u5982\u4e0b\uff1a (family, type, proto, canonname, sockaddr) socket\u7c7b\u7684\u65b9\u6cd5 socket.bind(address) \u7ed1\u5b9a\u5730\u5740address\u3002\u5728\u6b64\u4e4b\u524d\uff0csocket\u5fc5\u987b\u6ca1\u6709\u7ed1\u5b9a\u8fc7\u3002 address \uff1a\u7531\u5730\u5740\u7aef\u53e3\u53f7\u7ec4\u6210\u7684\u5217\u8868\u6216\u8005\u5143\u7ec4 \u793a\u4f8b\uff1a addr = ('127.0.0.1', 6000) socket.bind(addr) socket.listen(backlog) \u5141\u8bb8\u670d\u52a1\u7aef\u63a5\u53d7\u8fde\u63a5\uff0c\u53ef\u6307\u5b9a\u6700\u5927\u8fde\u63a5\u6570\u3002 backlog \uff1a\u63a5\u53d7\u5957\u63a5\u5b57\u7684\u6700\u5927\u4e2a\u6570\uff0c\u81f3\u5c11\u4e3a0\u3002 socket.accept() \u63a5\u53d7\u8fde\u63a5\u8bf7\u6c42\uff0c\u8fd4\u56de\u5143\u7ec4\uff0c\u5305\u542b\u65b0\u7684\u5957\u63a5\u5b57\u548c\u5ba2\u6237\u7aef\u5730\u5740\uff0c\u5f62\u5f0f\u4e3a\uff1a (conn, address) conn \uff1a\u65b0\u7684\u5957\u63a5\u5b57\u5bf9\u8c61\uff0c\u53ef\u4ee5\u7528\u6765\u53d1\u9001\u548c\u63a5\u6536\u6570\u636e address \uff1a\u8fde\u63a5\u5230\u670d\u52a1\u5668\u7684\u5ba2\u6237\u7aef\u5730\u5740 socket.connect(address) \u8fde\u63a5\u5230\u6307\u5b9a\u5730\u5740address\u7684\u670d\u52a1\u5668\u3002 address \uff1a\u5305\u542b\u5730\u5740\u548c\u7aef\u53e3\u53f7\u7684\u5143\u7ec4\u6216\u5217\u8868 socket.read( [ size ] ) \u4ece\u5957\u63a5\u5b57\u4e2d\u8bfb\u53d6size\u5b57\u8282\u6570\u636e\uff0c\u8fd4\u56de\u4e00\u4e2a\u5b57\u8282\u5bf9\u8c61\u3002\u5982\u679c\u6ca1\u6709\u6307\u5b9asize\uff0c\u5219\u4f1a\u4ece\u5957\u63a5\u5b57\u8bfb\u53d6\u6240\u6709\u53ef\u8bfb\u6570\u636e\uff0c\u76f4\u5230\u8bfb\u53d6\u5230\u6570\u636e\u7ed3\u675f\uff0c\u6b64\u65f6\u4f5c\u7528\u548c socket.readall() \u76f8\u540c\u3002 socket.readinto(buf, [ , nbytes ]) \u5c06\u5b57\u8282\u8bfb\u53d6\u5230\u7f13\u51b2\u533abuf\u4e2d\u3002\u5982\u679c\u6307\u5b9a\u4e86nbytes\uff0c\u5219\u6700\u591a\u8bfb\u53d6nbytes\u6570\u91cf\u7684\u5b57\u8282\uff1b\u5982\u679c\u6ca1\u6709\u6307\u5b9anbytes\uff0c\u5219\u6700\u591a\u8bfb\u53d6len(buf)\u5b57\u8282\u3002\u8fd4\u56de\u503c\u662f\u5b9e\u9645\u8bfb\u53d6\u7684\u5b57\u8282\u6570\u3002 socket.readline() \u6309\u884c\u8bfb\u53d6\u6570\u636e\uff0c\u9047\u5230\u6362\u884c\u7b26\u7ed3\u675f\uff0c\u8fd4\u56de\u8bfb\u53d6\u7684\u6570\u636e\u884c\u3002 socket.write(buf) \u5199\u5165\u7f13\u51b2\u533a\u7684\u6570\u636e\uff0cbuf\u4e3a\u5f85\u5199\u5165\u7684\u6570\u636e\uff0c\u8fd4\u56de\u5b9e\u9645\u5199\u5165\u7684\u5b57\u8282\u6570\u3002 socket.send(bytes) \u53d1\u9001\u6570\u636e\uff0c\u8fd4\u56de\u5b9e\u9645\u53d1\u9001\u7684\u5b57\u8282\u6570\u3002 bytes \uff1abytes\u578b\u6570\u636e socket.sendall(bytes) \u5c06\u6240\u6709\u6570\u636e\u90fd\u53d1\u9001\u5230\u5957\u63a5\u5b57\u3002\u4e0e send() \u65b9\u6cd5\u4e0d\u540c\u7684\u662f\uff0c\u6b64\u65b9\u6cd5\u5c06\u5c1d\u8bd5\u901a\u8fc7\u4f9d\u6b21\u9010\u5757\u53d1\u9001\u6570\u636e\u6765\u53d1\u9001\u6240\u6709\u6570\u636e\u3002 \u6ce8\u610f\uff1a\u8be5\u65b9\u6cd5\u518d\u975e\u963b\u585e\u5957\u63a5\u5b57\u4e0a\u7684\u884c\u4e3a\u662f\u4e0d\u786e\u5b9a\u7684\uff0c\u5efa\u8bae\u518dMicroPython\u4e2d\uff0c\u4f7f\u7528 write() \u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u5177\u6709\u76f8\u540c\u7684\u201c\u7981\u6b62\u77ed\u5199\u201d\u7b56\u7565\u6765\u963b\u585e\u5957\u63a5\u5b57\uff0c\u5e76\u4e14\u5c06\u8fd4\u56de\u5728\u975e\u963b\u585e\u5957\u63a5\u5b57\u4e0a\u53d1\u9001\u7684\u5b57\u8282\u6570\u3002 bytes \uff1abytes\u578b\u6570\u636e socket.sendto(bytes, address) \u5c06\u6570\u636e\u53d1\u9001\u5230\u5957\u63a5\u5b57\u3002\u8be5\u5957\u63a5\u5b57\u4e0d\u5e94\u8fde\u63a5\u5230\u8fdc\u7a0b\u5957\u63a5\u5b57\uff0c\u56e0\u4e3a\u76ee\u6807\u5957\u63a5\u5b57\u662f\u7531 address \u6307\u5b9a\u7684\u3002 bytes \uff1abytes\u578b\u6570\u636e address \uff1a\u5305\u542b\u5730\u5740\u548c\u7aef\u53e3\u53f7\u7684\u5143\u7ec4\u6216\u5217\u8868 socket.recv(bufsize) \u4ece\u5957\u63a5\u5b57\u63a5\u6536\u6570\u636e\u3002\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u5b57\u8282\u5bf9\u8c61\uff0c\u8868\u793a\u63a5\u6536\u5230\u7684\u6570\u636e\u3002\u4e00\u6b21\u63a5\u6536\u7684\u6700\u5927\u6570\u636e\u91cf\u7531bufsize\u6307\u5b9a\u3002 bufsize \uff1a\u4e00\u6b21\u63a5\u6536\u7684\u6700\u5927\u6570\u636e\u91cf socket.close() \u5c06\u5957\u63a5\u5b57\u6807\u8bb0\u4e3a\u5173\u95ed\u5e76\u91ca\u653e\u6240\u6709\u8d44\u6e90\u3002 socket.recvfrom(bufsize) \u4ece\u5957\u63a5\u5b57\u63a5\u6536\u6570\u636e\u3002\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4\uff0c\u5305\u542b\u5b57\u8282\u5bf9\u8c61\u548c\u5730\u5740\u3002 \u8fd4\u56de\u503c\u5f62\u5f0f\u4e3a\uff1a (bytes, address) bytes \uff1a\u63a5\u6536\u6570\u636e\u7684\u5b57\u8282\u5bf9\u8c61 address \uff1a\u53d1\u9001\u6570\u636e\u7684\u5957\u63a5\u5b57\u7684\u5730\u5740 socket.setsockopt(level, optname, value) \u8bbe\u7f6e\u5957\u63a5\u5b57\u9009\u9879\u7684\u503c\u3002 level \uff1a\u5957\u63a5\u5b57\u9009\u9879\u7ea7\u522b optname \uff1asocket\u9009\u9879 value \uff1a\u65e2\u53ef\u4ee5\u662f\u4e00\u4e2a\u6574\u6570\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u8868\u793a\u7f13\u51b2\u533a\u7684bytes\u7c7b\u5bf9\u8c61 \u793a\u4f8b\uff1a socket.setsockopt(usocket.SOL_SOCKET, usocket.SO_REUSEADDR, 1) socket.setblocking(flag) \u8bbe\u7f6e\u5957\u63a5\u5b57\u4e3a\u963b\u585e\u6a21\u5f0f\u6216\u8005\u975e\u963b\u585e\u6a21\u5f0f\u3002\u5982\u679c\u6807\u5fd7\u4e3afalse\uff0c\u5219\u5c06\u5957\u63a5\u5b57\u8bbe\u7f6e\u4e3a\u975e\u963b\u585e\uff0c\u5426\u5219\u8bbe\u7f6e\u4e3a\u963b\u585e\u6a21\u5f0f\u3002 \u8be5\u65b9\u6cd5\u662f\u67d0\u4e9b settimeout() \u8c03\u7528\u7684\u7b80\u5199\uff1a socket.setblocking(True) \u76f8\u5f53\u4e8e socket.settimeout(None) socket.setblocking(False) \u76f8\u5f53\u4e8e socket.settimeout(0) socket.settimeout(value) \u8bbe\u7f6e\u5957\u63a5\u5b57\u7684\u8d85\u65f6\u65f6\u95f4\uff0c\u5355\u4f4d\u79d2\u3002 value \uff1a\u53ef\u4ee5\u662f\u8868\u793a\u79d2\u7684\u975e\u8d1f\u6d6e\u70b9\u6570\uff0c\u4e5f\u53ef\u4ee5\u662fNone\u3002\u5982\u679c\u7ed9\u51fa\u4e00\u4e2a\u975e\u96f6\u503c\uff0c\u5219 OSError \u5728\u8be5\u64cd\u4f5c\u5b8c\u6210\u4e4b\u524d\u5df2\u8d85\u8fc7\u8d85\u65f6\u65f6\u95f4\u503c\uff0c\u5219\u968f\u540e\u7684\u5957\u63a5\u5b57\u64cd\u4f5c\u5c06\u5f15\u53d1\u5f02\u5e38\u3002\u5982\u679c\u7ed9\u5b9a\u96f6\uff0c\u5219\u5c06\u5957\u63a5\u5b57\u7f6e\u4e8e\u975e\u963b\u585e\u6a21\u5f0f\u3002\u5982\u679c\u672a\u6307\u5b9a\uff0c\u5219\u5957\u63a5\u5b57\u5c06\u5904\u4e8e\u963b\u585e\u6a21\u5f0f\u3002 socket.makefile(mode='rb') \u8fd4\u56de\u4e0e\u5957\u63a5\u5b57\u5173\u8054\u7684\u6587\u4ef6\u5bf9\u8c61\uff0c\u8fd4\u56de\u503c\u7c7b\u578b\u4e0e\u6307\u5b9a\u7684\u53c2\u6570\u6709\u5173\u3002\u4ec5\u652f\u6301\u4e8c\u8fdb\u5236\u6a21\u5f0f (rb\u548cwb)\u3002 socket\u901a\u4fe1\u793a\u4f8b \uff1a # \u5ba2\u6237\u7aef\u793a\u4f8b import usocket client = usocket.socket(usocket.AF_INET, usocket.SOCK_STREAM) sockaddr = usocket.getaddrinfo('www.tongxinmao.com',80)[0][-1] client.connect(sockaddr) while True: re_data = input() client.send(re_data.encode(\"utf8\")) data = client.recv(1024) print(data.decode(\"utf8\")) uio - \u8f93\u5165\u8f93\u51fa\u6d41 uio \u6a21\u5757\u5305\u542b\u5176\u4ed6\u7c7b\u578b\u7684stream\uff08\u7c7b\u6587\u4ef6\uff09\u5bf9\u8c61\u548c\u8f85\u52a9\u51fd\u6570\u3002\u8be5\u6a21\u5757\u5b9e\u73b0\u76f8\u5e94CPython\u6a21\u5757\u7684\u5b50\u96c6\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605\u9605CPython\u6587\u6863\uff1a io fd = uio.open(name, mode=\u2019r\u2019, **kwarg) \u6253\u5f00\u6587\u4ef6\uff0c\u5185\u7f6e open() \u51fd\u6570\u662f\u8be5\u51fd\u6570\u7684\u522b\u540d\u3002 name \uff1a\u6587\u4ef6\u540d mode \uff1a\u6253\u5f00\u6a21\u5f0f r \u53ea\u8bfb\u6a21\u5f0f\u6253\u5f00\u6587\u4ef6 w \u5199\u5165\u6a21\u5f0f\u6253\u5f00\u6587\u4ef6\uff0c\u6bcf\u6b21\u5199\u5165\u4f1a\u8986\u76d6\u4e0a\u6b21\u5199\u5165\u6570\u636e a \u53ea\u5199\u8ffd\u52a0\u6a21\u5f0f\u6253\u5f00\u6587\u4ef6\uff0c\u53ef\u8fde\u7eed\u5199\u5165\u6587\u4ef6\u6570\u636e\u800c\u4e0d\u662f\u8986\u76d6\u6570\u636e **kwarg \uff1a\u53ef\u53d8\u957f\u53c2\u6570\u5217\u8868 fd.close() \u5173\u95ed\u6253\u5f00\u7684\u6587\u4ef6\u3002 ustruct - \u6253\u5305\u548c\u89e3\u538b\u539f\u59cb\u6570\u636e\u7c7b\u578b \u8be5\u6a21\u5757\u5b9e\u73b0\u76f8\u5e94CPython\u6a21\u5757\u7684\u5b50\u96c6\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605\u9605CPython\u6587\u6863\uff1a struct \u5b57\u8282\u987a\u5e8f\uff0c\u5927\u5c0f\u548c\u5bf9\u9f50\u65b9\u5f0f \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cC\u7c7b\u578b\u4ee5\u673a\u5668\u7684\u672c\u673a\u683c\u5f0f\u548c\u5b57\u8282\u987a\u5e8f\u8868\u793a\uff0c\u5e76\u5728\u5fc5\u8981\u65f6\u901a\u8fc7\u8df3\u8fc7\u586b\u5145\u5b57\u8282\u6765\u6b63\u786e\u5bf9\u9f50\uff08\u6839\u636eC\u7f16\u8bd1\u5668\u4f7f\u7528\u7684\u89c4\u5219\uff09\u3002\u6839\u636e\u4e0b\u8868\uff0c\u683c\u5f0f\u5b57\u7b26\u4e32\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u53ef\u7528\u4e8e\u6307\u793a\u6253\u5305\u6570\u636e\u7684\u5b57\u8282\u987a\u5e8f\uff0c\u5927\u5c0f\u548c\u5bf9\u9f50\u65b9\u5f0f\uff1a Character Byte order Size Alignment @ native native native = native standard none < little-endian standard none > big-endian standard none ! network (= big-endian) standard none \u683c\u5f0f\u5316\u5b57\u7b26\u8868 Format C Type Python type Standard size x pad byte no value c char bytes of length 1 1 b signed char integer 1 B unsigned char integer 1 ? _Bool bool 1 h short integer 2 H unsigned short integer 2 i int integer 4 I unsigned int integer 4 l long integer 4 L unsigned long integer 4 q long long integer 8 Q unsigned long long integer 8 n ssize_t integer N size_t integer f float float 4 d double float 8 s char[] bytes p char[] bytes P void * integer \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cC\u7c7b\u578b\u4ee5\u673a\u5668\u7684\u672c\u673a\u683c\u5f0f\u548c\u5b57\u8282\u987a\u5e8f\u8868\u793a\uff0c\u5e76\u5728\u5fc5\u8981\u65f6\u901a\u8fc7\u8df3\u8fc7\u586b\u5145\u5b57\u8282\u6765\u6b63\u786e\u5bf9\u9f50\uff08\u6839\u636eC\u7f16\u8bd1\u5668\u4f7f\u7528\u7684\u89c4\u5219\uff09 ustruct.calcsize(fmt) \u8fd4\u56de\u5b58\u653e fmt \u9700\u8981\u7684\u5b57\u8282\u6570\u3002 fmt \uff1a\u683c\u5f0f\u5b57\u7b26\u7684\u7c7b\u578b\uff0c\u8be6\u60c5\u89c1\u4e0a\u6587\u683c\u5316\u5f0f\u5b57\u7b26\u8868 \u793a\u4f8b\uff1a >>> import ustruct >>> ustruct.calcsize('i') 4 >>> ustruct.calcsize('f') 4 >>> ustruct.calcsize('d') 8 ustruct.pack(fmt, v1, v2, ...) \u6309\u7167\u683c\u5f0f\u5b57\u7b26\u4e32 fmt \u538b\u7f29\u53c2\u6570v1\u3001 v2\u3001\u2026\u8fd4\u56de\u503c\u662f\u53c2\u6570\u7f16\u7801\u540e\u7684\u5b57\u8282\u5bf9\u8c61\u3002 fmt \uff1a\u683c\u5f0f\u5b57\u7b26\u7684\u7c7b\u578b\uff0c\u8be6\u60c5\u89c1\u4e0a\u6587\u683c\u5316\u5f0f\u5b57\u7b26\u8868 unstrcut.unpack(fmt, data) \u6839\u636e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32 fmt \u5bf9\u6570\u636e\u8fdb\u884c\u89e3\u538b\uff0c\u8fd4\u56de\u503c\u4e3a\u4e00\u4e2a\u5143\u7ec4\u3002 \u793a\u4f8b\uff1a >>> import ustruct >>> ustruct.pack('ii', 7, 9) #\u6253\u53052\u4e24\u4e2a\u6574\u6570 b'\\x07\\x00\\x00\\x00\\t\\x00\\x00\\x00' >>> ustruct.unpack('ii', b'\\x07\\x00\\x00\\x00\\t\\x00\\x00\\x00') #\u89e3\u538b\u4e24\u4e2a\u6574\u6570 (7, 9) ustruct.pack_info(fmt, buffer, offset, v1, v2, ...) \u6839\u636e\u683c\u5f0f\u5b57\u7b26\u4e32fmt\u5c06\u503cv1\u3001v2\u3001 \u2026\u6253\u5305\u5230\u4ece offset \u5f00\u59cb\u7684\u7f13\u51b2\u533a\u4e2d\u3002\u4ece\u7f13\u51b2\u533a\u7684\u672b\u5c3e\u7b97\u8d77\uff0c offset \u53ef\u80fd\u4e3a\u8d1f\u3002 fmt \uff1a\u683c\u5f0f\u5b57\u7b26\u7684\u7c7b\u578b\uff0c\u8be6\u60c5\u89c1\u4e0a\u6587\u683c\u5316\u5f0f\u5b57\u7b26\u8868 unstruct.unpack_from(fmt, data, offset=0) \u6839\u636e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32 fmt \u89e3\u6790\u4ece offest \u5f00\u59cb\u7684\u6570\u636e\u89e3\u538b\uff0c\u4ece\u7f13\u51b2\u533a\u672b\u5c3e\u5f00\u59cb\u8ba1\u6570\u7684\u504f\u79fb\u91cf\u53ef\u80fd\u4e3a\u8d1f\u503c\u3002\u8fd4\u56de\u503c\u662f\u89e3\u538b\u503c\u7684\u5143\u7ec4\u3002 ujson - JSON\u7f16\u7801\u548c\u89e3\u7801 ujson \u6a21\u5757\u5b9e\u73b0\u5728Python\u6570\u636e\u5bf9\u8c61\u548cJSON\u6570\u636e\u683c\u5f0f\u4e4b\u95f4\u8fdb\u884c\u8f6c\u6362\u7684\u529f\u80fd\u3002\u8be5\u6a21\u5757\u5b9e\u73b0\u76f8\u5e94CPython\u6a21\u5757\u7684\u5b50\u96c6\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605\u9605CPython\u6587\u6863\uff1a json ujson.dump(obj, stream) \u5c06 obj \u6570\u636e\u5bf9\u8c61\u8f6c\u5316\u6210 JSON\u5b57\u7b26\u4e32\uff0c\u5c06\u5176\u5199\u5165\u5230\u7ed9\u5b9a\u7684 stream \u4e2d\u3002 ujson.dumps(dict) \u5c06 dict \u7c7b\u578b\u7684\u6570\u636e\u8f6c\u6362\u6210str\u3002 ujson.load(stream) \u89e3\u6790\u7ed9\u5b9a\u7684\u6570\u636e stream \uff0c\u5c06\u5176\u89e3\u91ca\u4e3aJSON\u5b57\u7b26\u4e32\u5e76\u53cd\u5e8f\u5217\u5316\u6210Python\u5bf9\u8c61\u3002 ujson.loads(str) \u89e3\u6790JSON\u5b57\u7b26\u4e32\u5e76\u8fd4\u56de obj \u5bf9\u8c61 \u793a\u4f8b\uff1a >>> import ujson >>> msg = ['foo',{'bar':('baz',None,1,2)}] >>> print(msg) ['foo', {'bar': ('baz', None, 1, 2)}] >>> s = ujson.dumps(msg) >>> print(s) [\"foo\", {\"bar\": [\"baz\", null, 1, 2]}] >>> s1 = ujson.loads(s) >>> print(s1) ['foo', {'bar': ['baz', None, 1, 2]}] utime - \u4e0e\u65f6\u95f4\u76f8\u5173\u529f\u80fd utime \u6a21\u5757\u7528\u4e8e\u83b7\u53d6\u5f53\u524d\u65f6\u95f4\u548c\u65e5\u671f\u3001\u6d4b\u91cf\u65f6\u95f4\u95f4\u9694\u548c\u5ef6\u8fdf\u3002\u8be5\u6a21\u5757\u5b9e\u73b0\u76f8\u5e94CPython\u6a21\u5757\u7684\u5b50\u96c6\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605\u9605CPython\u6587\u6863\uff1a time utime.localtime([secs]) \u8be5\u51fd\u6570\u7528\u6765\u5c06\u4e00\u4e2a\u4ee5\u79d2\u8868\u793a\u7684\u65f6\u95f4\u8f6c\u6362\u4e3a\u4e00\u4e2a\u5143\u7ec4\uff0c\u5143\u7ec4\u5305\u542b\u4e86\u4e86\u5e74\u3001\u6708\u3001\u65e5\u3001\u65f6\u3001\u5206\u3001\u79d2\u3001\u661f\u671f\u3001\u4e00\u5e74\u4e2d\u7b2c\u51e0\u5929\uff1b\u5982\u679c\u6ca1\u6709\u7ed9\u5b9a\u53c2\u6570sec\uff0c\u5219\u4f7f\u7528RTC\u65f6\u95f4\u3002\u8fd4\u56de\u503c\u5f62\u5f0f\u5982\u4e0b\uff1a (year, month, mday, hour, minute, second, weekday, yearday) year \uff1a\u5e74\u4efd\uff0cint\u578b month \uff1a\u6708\u4efd\uff0c1~12\uff0cint\u578b mday \uff1a\u65e5\uff0c\u5f53\u6708\u591a\u5c11\u53f7\uff0c1~31\uff0cint\u578b hour \uff1a\u5c0f\u65f6\uff0c0~23\uff0cint\u578b minute \uff1a\u5206\u949f\uff0c0~59\uff0cint\u578b second \uff1a\u79d2\uff0c0~59\uff0cint\u578b weekday \uff1a\u661f\u671f\uff0c\u5468\u4e00\u5230\u5468\u65e5\u662f0~6\uff0cint\u578b yearday \uff1a\u4e00\u5e74\u4e2d\u7684\u7b2c\u591a\u5c11\u5929\uff0cint\u578b \u793a\u4f8b\uff1a >>> import utime >>> utime.localtime() (2020, 9, 29, 8, 54, 42, 1, 273) >>> utime.localtime(646898736) (2020, 7, 1, 6, 5, 36, 2, 183) utime.mktime(date) \u8be5\u51fd\u6570\u4f5c\u7528\u4e0elocatime()\u76f8\u53cd\uff0c\u5b83\u5c06\u4e00\u4e2a\u5b58\u653e\u5728\u5143\u7ec4\u4e2d\u7684\u65f6\u95f4\u8f6c\u6362\u4e3a\u4ee5\u79d2\u8ba1\u7684\u65f6\u95f4\u6233\u3002 \u793a\u4f8b\uff1a >>> import utime >>> date = (2020, 9, 29, 8, 54, 42, 1, 273) >>> utime.mktime(date) 1601340882 utime.sleep(seconds) \u4f11\u7720\u7ed9\u5b9a\u79d2\u6570\u7684\u65f6\u95f4\u3002 \u6ce8\u610f\uff1asleep()\u51fd\u6570\u7684\u8c03\u7528\u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u4f11\u7720\u963b\u585e\u3002 utime.sleep_ms(ms) \u4f11\u7720\u7ed9\u5b9a\u6beb\u79d2\u6570\u7684\u65f6\u95f4\u3002 \u6ce8\u610f\uff1asleep_ms()\u51fd\u6570\u7684\u8c03\u7528\u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u4f11\u7720\u963b\u585e\u3002 utime.sleep_us(us) \u4f11\u7720\u7ed9\u5b9a\u5fae\u79d2\u7684\u65f6\u95f4\u3002 \u6ce8\u610f\uff1asleep_us()\u51fd\u6570\u7684\u8c03\u7528\u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u4f11\u7720\u963b\u585e\u3002 utime.ticks_ms() \u8fd4\u56de\u4e0d\u65ad\u9012\u589e\u7684\u6beb\u79d2\u8ba1\u6570\u5668\uff0c\u5728\u67d0\u4e9b\u503c\u540e\u4f1a\u91cd\u65b0\u8ba1\u6570(\u672a\u6307\u5b9a)\u3002\u8ba1\u6570\u503c\u672c\u8eab\u65e0\u7279\u5b9a\u610f\u4e49\uff0c\u53ea\u9002\u5408\u7528\u5728 ticks_diff() \u51fd\u6570\u4e2d\u3002 \u6ce8\u610f\uff1asleep_us()\u51fd\u6570\u7684\u8c03\u7528\u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u4f11\u7720\u963b\u585e\u3002 utime.ticks_us() \u548c ticks_ms() \u7c7b\u4f3c\uff0c\u53ea\u662f\u8fd4\u56de\u5fae\u79d2\u8ba1\u6570\u5668\u3002 utime.ticks_cpu() \u548c ticks_ms/ticks_us \u7c7b\u4f3c\uff0c\u5177\u6709\u66f4\u9ad8\u7cbe\u5ea6 (\u4f7f\u7528 CPU \u65f6\u949f)\u3002 utime.ticks_diff(old, new) \u8ba1\u7b97\u4e24\u6b21\u8c03\u7528 ticks_ms() \uff0c ticks_us() \uff0c\u6216 ticks_cpu() \u4e4b\u95f4\u7684\u65f6\u95f4\u3002\u56e0\u4e3a\u8fd9\u4e9b\u51fd\u6570\u7684\u8ba1\u6570\u503c\u53ef\u80fd\u4f1a\u56de\u7ed5\uff0c\u6240\u4ee5\u4e0d\u80fd\u76f4\u63a5\u76f8\u51cf\uff0c\u9700\u8981\u4f7f\u7528 ticks_diff() \u51fd\u6570\u3002\u201c\u65e7\u201d \u65f6\u95f4\u9700\u8981\u5728 \u201c\u65b0\u201d \u65f6\u95f4\u4e4b\u524d\uff0c\u5426\u5219\u7ed3\u679c\u65e0\u6cd5\u786e\u5b9a\u3002\u8fd9\u4e2a\u51fd\u6570\u4e0d\u8981\u7528\u5728\u8ba1\u7b97\u5f88\u957f\u7684\u65f6\u95f4 (\u56e0\u4e3a ticks_*() \u51fd\u6570\u4f1a\u56de\u7ed5\uff0c\u901a\u5e38\u5468\u671f\u4e0d\u662f\u5f88\u957f)\u3002\u901a\u5e38\u7528\u6cd5\u662f\u5728\u5e26\u8d85\u65f6\u7684\u8f6e\u8be2\u4e8b\u4ef6\u4e2d\u8c03\u7528\u3002 \u793a\u4f8b\uff1a import utime start = utime.ticks_us() while pin.value() == 0: if utime.ticks_diff(time.ticks_us(), start) > 500: raise TimeoutError utime.time() \u8fd4\u56de\u81ea\u7eaa\u5143\u4ee5\u6765\u7684\u79d2\u6570\uff08\u4ee5\u6574\u6570\u5f62\u5f0f\uff09\u3002\u5982\u679c\u672a\u8bbe\u7f6eRTC\uff0c\u5219\u6b64\u51fd\u6570\u8fd4\u56de\u81ea\u7279\u5b9a\u4e8e\u7aef\u53e3\u7684\u53c2\u8003\u65f6\u95f4\u70b9\u4ee5\u6765\u7684\u79d2\u6570\uff08\u5bf9\u4e8e\u4e0d\u5177\u6709\u7535\u6c60\u540e\u5907RTC\u7684\u5d4c\u5165\u5f0f\u677f\uff0c\u901a\u5e38\u662f\u7531\u4e8e\u52a0\u7535\u6216\u590d\u4f4d\uff09\u3002\u5982\u679c\u8981\u5f00\u53d1\u53ef\u79fb\u690d\u7684MicroPython\u5e94\u7528\u7a0b\u5e8f\uff0c\u5219\u4e0d\u5e94\u4f9d\u8d56\u6b64\u529f\u80fd\u63d0\u4f9b\u9ad8\u4e8e\u79d2\u7684\u7cbe\u5ea6\u3002\u5982\u679c\u9700\u8981\u66f4\u9ad8\u7684\u7cbe\u5ea6\uff0c\u8bf7\u4f7f\u7528 ticks_ms() \u548c ticks_us() \u51fd\u6570\uff0c\u5982\u679c\u9700\u8981\u65e5\u5386\u65f6\u95f4\uff0c\u5219 localtime() \u4e0d\u5e26\u53c2\u6570\u4f1a\u66f4\u597d\u3002 sys - \u7cfb\u7edf\u76f8\u5173\u529f\u80fd sys \u6a21\u5757\u4e2d\u63d0\u4f9b\u4e86\u4e0eQuecPython\u8fd0\u884c\u73af\u5883\u6709\u5173\u7684\u51fd\u6570\u548c\u53d8\u91cf\u3002\u8be5\u6a21\u5757\u5b9e\u73b0\u76f8\u5e94CPython\u6a21\u5757\u7684\u5b50\u96c6\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605\u9605CPython\u6587\u6863\uff1a sys \u5e38\u6570\u8bf4\u660e sys.argv \u5f53\u524d\u7a0b\u5e8f\u542f\u52a8\u7684\u53ef\u53d8\u53c2\u6570\u5217\u8868\u3002 sys.byteorder \u5b57\u8282\u987a\u5e8f (\u2018little\u2019 - \u5c0f\u7aef\uff0c \u2018big\u2019 - \u5927\u7aef)\u3002 sys.implementation \u8fd4\u56de\u5f53\u524dmicroPython\u7248\u672c\u4fe1\u606f\u3002\u5bf9\u4e8eMicroPython\uff0c\u5b83\u5177\u6709\u4ee5\u4e0b\u5c5e\u6027\uff1a name - \u5b57\u7b26\u4e32\u201c micropython\u201d version - \u5143\u7ec4\uff08\u4e3b\u8981\uff0c\u6b21\u8981\uff0c\u5fae\u578b\uff09\uff0c\u4f8b\u5982\uff081\u30017\u30010\uff09 \u5efa\u8bae\u4f7f\u7528\u6b64\u5bf9\u8c61\u6765\u5c06MicroPython\u4e0e\u5176\u4ed6Python\u5b9e\u73b0\u533a\u5206\u5f00\u3002 sys.maxsize \u672c\u673a\u6574\u6570\u7c7b\u578b\u53ef\u4ee5\u5728\u5f53\u524d\u5e73\u53f0\u4e0a\u4fdd\u7559\u7684\u6700\u5927\u503c\uff0c\u5982\u679c\u5b83\u5c0f\u4e8e\u5e73\u53f0\u6700\u5927\u503c\uff0c\u5219\u4e3aMicroPython\u6574\u6570\u7c7b\u578b\u8868\u793a\u7684\u6700\u5927\u503c\uff08\u5bf9\u4e8e\u4e0d\u652f\u6301\u957f\u6574\u578b\u7684MicroPython\u7aef\u53e3\u5c31\u662f\u8fd9\u79cd\u60c5\u51b5\uff09\u3002 sys.modules \u5df2\u8f7d\u5165\u6a21\u5757\u7684\u5b57\u5178\u3002 sys.platform MicroPython\u8fd0\u884c\u7684\u5e73\u53f0\u3002 sys.stdin \u6807\u51c6\u8f93\u5165\uff08\u9ed8\u8ba4\u662fUSB\u865a\u62df\u4e32\u53e3\uff0c\u53ef\u9009\u5176\u4ed6\u4e32\u53e3\uff09\u3002 sys.stdout \u6807\u51c6\u8f93\u51fa\uff08\u9ed8\u8ba4\u662fUSB\u865a\u62df\u4e32\u53e3\uff0c\u53ef\u9009\u5176\u4ed6\u4e32\u53e3\uff09\u3002 sys.version MicroPython \u8bed\u8a00\u7248\u672c\uff0c\u5b57\u7b26\u4e32\u683c\u5f0f\u3002 sys.version_info MicroPython \u8bed\u8a00\u7248\u672c\uff0c\u6574\u6570\u5143\u7ec4\u683c\u5f0f\u3002 \u65b9\u6cd5 sys.exit(retval=0) \u4f7f\u7528\u7ed9\u5b9a\u7684\u53c2\u6570\u9000\u51fa\u5f53\u524d\u7a0b\u5e8f\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u8be5\u51fd\u6570\u4f1a\u5f15\u53d1 SystemExit \u9000\u51fa\u3002\u5982\u679c\u7ed9\u5b9a\u4e86\u53c2\u6570\uff0c\u5219\u5c06\u5176\u503c\u4f5c\u4e3a\u53c2\u6570\u8d4b\u503c\u7ed9 SystemExit \u3002 sys.print_exception(exc, file=sys.stdout) \u6253\u5370\u5f02\u5e38\u5230\u6587\u4ef6\u5bf9\u8c61\uff0c\u9ed8\u8ba4\u662f sys.stdout\uff0c\u5373\u8f93\u51fa\u5f02\u5e38\u4fe1\u606f\u7684\u6807\u51c6\u8f93\u51fa\u3002 uzlib - zlib\u89e3\u538b\u7f29 uzlib \u6a21\u5757\u89e3\u538b\u7f29\u7528 DEFLATE\u7b97\u6cd5 \u538b\u7f29\u7684\u4e8c\u8fdb\u5236\u6570\u636e \uff08\u901a\u5e38\u5728zlib\u5e93\u548cgzip\u5b58\u6863\u5668\u4e2d\u4f7f\u7528\uff09\uff0c\u538b\u7f29\u5c1a\u672a\u5b9e\u73b0\u3002\u8be5\u6a21\u5757\u5b9e\u73b0\u76f8\u5e94CPython\u6a21\u5757\u7684\u5b50\u96c6\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605\u9605CPython\u6587\u6863\uff1a zlib \u6ce8\u610f\uff1a\u89e3\u538b\u7f29\u524d\uff0c\u5e94\u68c0\u67e5\u6a21\u5757\u5185\u53ef\u4f7f\u7528\u7684\u7a7a\u95f4\uff0c\u786e\u4fdd\u6709\u8db3\u591f\u7a7a\u95f4\u89e3\u538b\u6587\u4ef6\u3002 uzlib.decompress(data, wbits=0, bufsize=0) \u8fd4\u56de\u89e3\u538b\u540e\u7684 bytes \u5bf9\u8c61\u3002 wbits \u662f\u89e3\u538b\u65f6\u4f7f\u7528\u7684DEFLATE\u5b57\u5178\u7a97\u53e3\u5927\u5c0f\uff088-15\uff0c\u5b57\u5178\u5927\u5c0f\u662f wbits \u503c\u76842\u7684\u5e42\uff09\u3002\u5982\u679c\u8be5\u503c\u4e3a\u6b63\uff0c\u5219\u5047\u5b9a data \u4e3azlib\u6d41\uff08\u5e26\u6709zlib\u6807\u5934\uff09\uff0c\u5982\u679c\u4e3a\u8d1f\uff0c\u5219\u5047\u5b9a\u4e3a\u539f\u59cb\u7684DEFLATE\u6d41\u3002 bufsize \u53c2\u6570\u662f\u4e3a\u4e86\u4e0eCPython\u517c\u5bb9\uff0c\u5c06\u88ab\u5ffd\u7565\u3002 class uzlib.DecompIO(stream, wbits=0) \u521b\u5efa\u4e00\u4e2a stream \u88c5\u9970\u5668\uff0c\u8be5\u88c5\u9970\u5668\u5141\u8bb8\u5728\u53e6\u4e00\u4e2a\u6d41\u4e2d\u900f\u660e\u5730\u538b\u7f29\u6570\u636e\u3002\u8fd9\u5141\u8bb8\u5904\u7406\u6570\u636e\u5927\u4e8e\u53ef\u7528\u5806\u5927\u5c0f\u7684\u538b\u7f29\u6d41\u3002wbits\u7684\u503c\u9664\u4e86\u4e0a\u9762\u6240\u8ff0\u7684\u503c\u4ee5\u5916\uff0c\u8fd8\u53ef\u4ee5\u53d6\u503c24..31\uff0816 + 8..15\uff09\uff0c\u8fd9\u8868\u793a\u8f93\u5165\u6d41\u5177\u6709gzip\u6807\u5934\u3002 _thread - \u591a\u7ebf\u7a0b _thread \u6a21\u5757\u63d0\u4f9b\u521b\u5efa\u65b0\u7ebf\u7a0b\u7684\u65b9\u6cd5\uff0c\u5e76\u63d0\u4f9b\u4e92\u65a5\u9501\u3002 _thread.get_ident() \u83b7\u53d6\u5f53\u524d\u7ebf\u7a0b\u53f7\u3002 _thread.get_heap_size() \u83b7\u53d6\u7cfb\u7edf\u5269\u4f59\u5185\u5b58\u5927\u5c0f\u3002 _thread.stack_size(size) \u8bbe\u7f6e\u521b\u5efa\u65b0\u7ebf\u7a0b\u4f7f\u7528\u7684\u6808\u5927\u5c0f\uff08\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\uff09\uff0c\u9ed8\u8ba4\u4e3a8k\u3002 _thread.start_new_thread(function, args) \u521b\u5efa\u4e00\u4e2a\u65b0\u7ebf\u7a0b\uff0c\u63a5\u6536\u6267\u884c\u51fd\u6570\u548c\u88ab\u6267\u884c\u51fd\u6570\u53c2\u6570\u3002 _thread.allocate_lock() \u521b\u5efa\u4e00\u4e2a\u4e92\u65a5\u9501\u5bf9\u8c61\u3002 \u793a\u4f8b\uff1a import _thread lock = _thread.allocate_lock() lock.acquire() \u83b7\u53d6\u9501\uff0c\u6210\u529f\u8fd4\u56deTrue\uff0c\u5426\u5219\u8fd4\u56deFalse\u3002 lock.release() \u91ca\u653e\u9501\u3002 lock.locked() \u8fd4\u56de\u9501\u7684\u72b6\u6001\uff0cTrue\u8868\u793a\u88ab\u67d0\u4e2a\u7ebf\u7a0b\u83b7\u53d6\uff0cFalse\u5219\u8868\u793a\u6ca1\u6709\u3002 _thread\u4f7f\u7528\u793a\u4f8b import _thread a = 0 lock = _thread.allocate_lock() def th_func(delay, id): global a while True: lock.acquire() # \u83b7\u53d6\u9501 if a >= 10: print('thread %d exit' % id) lock.release() # \u91ca\u653e\u9501 break a+=1 print('[thread %d] a is %d' % (id, a)) lock.release() for i in range(2): _thread.start_new_thread(th_func, (i + 1, i)) uhashlib - \u54c8\u5e0c\u7b97\u6cd5 \u6a21\u5757\u529f\u80fd: \u5b9e\u73b0\u4e8c\u8fdb\u5236\u6570\u636e\u6563\u5217\u7b97\u6cd5,\u76ee\u524d\u652f\u6301sha256\uff0csha1\uff0cMD5\u3002 \u200b hash_obj = uhashlib.sha256(bytes) \u521b\u5efa\u4e00\u4e2aSHA256\u54c8\u5e0c\u5bf9\u8c61 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e bytes bytes \u53ef\u9009\u53c2\u6570\uff0c\u53ef\u5728\u521b\u5efa\u65f6\u4f20\u5165bytes\u6570\u636e\uff0c\u4e5f\u53ef\u901a\u8fc7update\u65b9\u6cd5 \u8fd4\u56de\u503c SHA256\u54c8\u5e0c\u5bf9\u8c61 \u200b hash_obj = uhashlib.sha1(bytes) \u521b\u5efa\u4e00\u4e2aSHA1\u54c8\u5e0c\u5bf9\u8c61 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e bytes bytes \u53ef\u9009\u53c2\u6570\uff0c\u53ef\u5728\u521b\u5efa\u65f6\u4f20\u5165bytes\u6570\u636e\uff0c\u4e5f\u53ef\u901a\u8fc7update\u65b9\u6cd5 \u8fd4\u56de\u503c SHA1\u54c8\u5e0c\u5bf9\u8c61 \u200b hash_obj = uhashlib.md5(bytes) \u521b\u5efa\u4e00\u4e2aMD5\u54c8\u5e0c\u5bf9\u8c61 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e bytes bytes \u53ef\u9009\u53c2\u6570\uff0c\u53ef\u5728\u521b\u5efa\u65f6\u4f20\u5165bytes\u6570\u636e\uff0c\u4e5f\u53ef\u901a\u8fc7update\u65b9\u6cd5 \u8fd4\u56de\u503c MD5\u54c8\u5e0c\u5bf9\u8c61 \u54c8\u5e0c\u5bf9\u8c61\u65b9\u6cd5 \u200b hash_obj .update(bytes) \u5c06\u66f4\u591a\u7684bytes\u6570\u636e\u52a0\u5230\u6563\u5217 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e bytes bytes \u9700\u8981\u88ab\u52a0\u5bc6\u7684\u6570\u636e \u8fd4\u56de\u503c \u65e0 \u200b hash_obj .digest() \u8fd4\u56de\u901a\u8fc7\u54c8\u5e0c\u4f20\u9012\u7684\u6240\u6709\u6570\u636e\u7684\u6563\u5217\uff0c\u6570\u636e\u4e3a\u5b57\u8282\u7c7b\u578b\u3002\u8c03\u7528\u6b64\u65b9\u6cd5\u540e\uff0c\u65e0\u6cd5\u518d\u5c06\u66f4\u591a\u7684\u6570\u636e\u9001\u5165\u6563\u5217\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u8fd4\u56de\u52a0\u5bc6\u540e\u5b57\u8282\u7c7b\u578b\u7684\u6570\u636e \u4f7f\u7528\u5b9e\u4f8b import uhashlib import ubinascii hash_obj = uhashlib.sha256() # \u521b\u5efahash\u5bf9\u8c61 hash_obj.update(b\"QuecPython\") res = hash_obj.digest() # b\"\\x1e\\xc6gq\\xb3\\xa9\\xac>\\xa4\\xc4O\\x00\\x9eTW\\x97\\xd4.\\x9e}Bo\\xff\\x82u\\x89Th\\xfe'\\xc6\\xcd\" # \u8f6c\u6210\u5341\u516d\u8fdb\u5236\u8868\u793a hex_msg = ubinascii.hexlify(res) # b'1ec66771b3a9ac3ea4c44f009e545797d42e9e7d426fff8275895468fe27c6cd' QuecPython\u7c7b\u5e93 example - \u6267\u884cpython\u811a\u672c \u6a21\u5757\u529f\u80fd\uff1a\u63d0\u4f9b\u65b9\u6cd5\u8ba9\u7528\u6237\u53ef\u4ee5\u5728\u547d\u4ee4\u884c\u6216\u8005\u4ee3\u7801\u4e2d\u6267\u884cpython\u811a\u672c\u3002 example.exec(filename) \u6267\u884c\u6307\u5b9a\u7684python\u811a\u672c\u6587\u4ef6\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e filename string \u8981\u6267\u884cpython\u811a\u672c\u7684\u6587\u4ef6\u540d \u8fd4\u56de\u503c \u65e0 \u793a\u4f8b # \u5047\u8bbe\u6709\u6587\u4ef6test.py,\u5185\u5bb9\u5982\u4e0b def myprint(): count = 10 while count > 0: count -= 1 print('##### test #####') myprint() #\u5c06test.py\u6587\u4ef6\u4e0a\u4f20\u5230\u6a21\u5757\u4e2d\uff0c\u8fdb\u5165\u547d\u4ee4\u884c\u6267\u884c\u5982\u4e0b\u4ee3\u7801 >>> uos.listdir() ['apn_cfg.json', 'test.py'] >>> import example >>> example.exec('test.py') # \u6267\u884c\u7ed3\u679c\u5982\u4e0b ##### test ##### ##### test ##### ##### test ##### ##### test ##### ##### test ##### ##### test ##### ##### test ##### ##### test ##### ##### test ##### ##### test ##### dataCall - \u6570\u636e\u62e8\u53f7 \u6a21\u5757\u529f\u80fd\uff1a\u63d0\u4f9b\u6570\u636e\u62e8\u53f7\u76f8\u5173\u63a5\u53e3\u3002 dataCall.start(profileIdx, ipType, apn, username, password, authType) \u542f\u52a8\u62e8\u53f7\uff0c\u8fdb\u884c\u6570\u636e\u94fe\u8def\u6fc0\u6d3b\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e profileIdx int PDP\u7d22\u5f15\uff0c\u53d6\u503c1-8\uff0c\u4e00\u822c\u8bbe\u7f6e\u4e3a1\uff0c\u8bbe\u7f6e\u5176\u4ed6\u503c\u53ef\u80fd\u9700\u8981\u4e13\u7528apn\u4e0e\u5bc6\u7801\u624d\u80fd\u8bbe\u7f6e\u6210\u529f ipType int IP\u7c7b\u578b\uff0c0-IPV4\uff0c1-IPV6\uff0c2-IPV4\u548cIPV6 apn string apn\u540d\u79f0\uff0c\u53ef\u4e3a\u7a7a username string apn\u7528\u6237\u540d\uff0c\u53ef\u4e3a\u7a7a password string apn\u5bc6\u7801\uff0c\u53ef\u4e3a\u7a7a authType int \u52a0\u5bc6\u65b9\u5f0f\uff0c0-\u4e0d\u52a0\u5bc6\uff0c1-PAP\uff0c2-CHAP\uff0c3-PAP\u6216CHAP \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u6574\u578b\u503c0\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\u3002 \u793a\u4f8b >>> import dataCall >>> dataCall.start(1, 0, \"3gnet.mnc001.mcc460.gprs\", \"\", \"\", 0) 0 dataCall.setApn(profileIdx, ipType, apn, username, password, authType) \u7528\u6237apn\u4fe1\u606f\u914d\u7f6e\u63a5\u53e3\uff0c\u7528\u6237\u8c03\u7528\u8be5\u63a5\u53e3\u540e\uff0c\u4f1a\u5728\u7528\u6237\u5206\u533a\u76ee\u5f55\u4e0b\u521b\u5efauser_apn.json\u6587\u4ef6\uff0c\u7528\u4e8e\u4fdd\u5b58\u7528\u6237apn\u4fe1\u606f\uff0c\u5e76\u4f7f\u7528\u8be5apn\u4fe1\u606f\u542f\u52a8\u62e8\u53f7\uff0c\u8fdb\u884c\u6570\u636e\u94fe\u8def\u6fc0\u6d3b\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e profileIdx int PDP\u7d22\u5f15\uff0c\u53d6\u503c1-8\uff0c\u4e00\u822c\u8bbe\u7f6e\u4e3a1\uff0c\u8bbe\u7f6e\u5176\u4ed6\u503c\u53ef\u80fd\u9700\u8981\u4e13\u7528apn\u4e0e\u5bc6\u7801\u624d\u80fd\u8bbe\u7f6e\u6210\u529f ipType int IP\u7c7b\u578b\uff0c0-IPV4\uff0c1-IPV6\uff0c2-IPV4\u548cIPV6 apn string apn\u540d\u79f0\uff0c\u53ef\u4e3a\u7a7a username string apn\u7528\u6237\u540d\uff0c\u53ef\u4e3a\u7a7a password string apn\u5bc6\u7801\uff0c\u53ef\u4e3a\u7a7a authType int \u52a0\u5bc6\u65b9\u5f0f\uff0c0-\u4e0d\u52a0\u5bc6\uff0c1-PAP\uff0c2-CHAP\uff0c3-PAP\u6216CHAP \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u6574\u578b\u503c0\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\u3002 \u793a\u4f8b >>> import dataCall >>> dataCall.setApn(1, 0, \"3gnet.mnc001.mcc460.gprs\", \"\", \"\", 0) 0 dataCall.setCallback(usrFun) \u6ce8\u518c\u7528\u6237\u56de\u8c03\u51fd\u6570\uff0c\u5f53\u7f51\u7edc\u72b6\u6001\u53d1\u751f\u53d8\u5316\uff0c\u6bd4\u5982\u65ad\u7ebf\u3001\u4e0a\u7ebf\u65f6\uff0c\u4f1a\u901a\u8fc7\u8be5\u56de\u8c03\u51fd\u6570\u901a\u77e5\u7528\u6237\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e usrFun function \u7528\u6237\u56de\u8c03\u51fd\u6570\uff0c\u51fd\u6570\u5f62\u5f0f\u89c1\u793a\u4f8b \u8fd4\u56de\u503c \u6ce8\u518c\u5931\u8d25\u8fd4\u56de\u6574\u578b-1\uff0c\u6210\u529f\u8fd4\u56de\u6574\u578b0\u3002 \u793a\u4f8b >>> import dataCall >>> import net >>> def nw_cb(args): pdp = args[0] nw_sta = args[1] if nw_sta == 1: print(\"*** network %d connected! ***\" % pdp) else: print(\"*** network %d not connected! ***\" % pdp) >>> dataCall.setCallback(nw_cb) 0 >>> net.setModemFun(4) # \u8fdb\u5165\u98de\u884c\u6a21\u5f0f 0 >>> *** network 1 not connected! *** # \u8fdb\u5165\u98de\u884c\u6a21\u5f0f\u5bfc\u81f4\u65ad\u7f51\uff0c\u901a\u8fc7\u56de\u8c03\u544a\u77e5\u7528\u6237 >>> net.setModemFun(1) # \u9000\u51fa\u98de\u884c\u6a21\u5f0f 0 >>> *** network 1 connected! *** # \u9000\u51fa\u98de\u884c\u6a21\u5f0f\uff0c\u81ea\u52a8\u62e8\u53f7\uff0c\u7b49\u5f85\u8054\u7f51\u6210\u529f\uff0c\u901a\u8fc7\u56de\u8c03\u544a\u77e5\u7528\u6237 dataCall.getInfo(profileIdx, ipType) \u83b7\u53d6\u6570\u636e\u62e8\u53f7\u4fe1\u606f\uff0c\u5305\u62ec\u8fde\u63a5\u72b6\u6001\u3001IP\u5730\u5740\u3001DNS\u7b49\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e profileIdx int PDP\u7d22\u5f15\uff0c\u53d6\u503c1-8 ipType int IP\u7c7b\u578b\uff0c0-IPV4\uff0c1-IPV6\uff0c2-IPV4\u548cIPV6 \u8fd4\u56de\u503c \u9519\u8bef\u8fd4\u56de\u6574\u578b-1\uff0c\u6210\u529f\u8fd4\u56de\u62e8\u53f7\u4fe1\u606f\uff0c\u8fd4\u56de\u683c\u5f0f\u6839\u636eipType\u7684\u4e0d\u540c\u800c\u6709\u6240\u533a\u522b\uff1a ipType =0\uff0c\u8fd4\u56de\u503c\u683c\u5f0f\u5982\u4e0b\uff1a (profileIdx, ipType, [nwState, reconnect, ipv4Addr, priDns, secDns]) profileIdx \uff1aPDP\u7d22\u5f15\uff0c\u53d6\u503c1-8 ipType \uff1aIP\u7c7b\u578b\uff0c0-IPV4\uff0c1-IPV6\uff0c2-IPV4\u548cIPV6 nwState \uff1a\u62e8\u53f7\u7ed3\u679c\uff0c0-\u5931\u8d25\uff0c1-\u6210\u529f reconnect \uff1a\u91cd\u62e8\u6807\u5fd7 ipv4Addr \uff1aipv4\u5730\u5740 priDns \uff1adns\u4fe1\u606f secDns \uff1adns\u4fe1\u606f ipType =1\uff0c\u8fd4\u56de\u503c\u683c\u5f0f\u5982\u4e0b\uff1a (profileIdx, ipType, [nwState, reconnect, ipv6Addr, priDns, secDns]) profileIdx \uff1aPDP\u7d22\u5f15\uff0c\u53d6\u503c1-8 ipType \uff1aIP\u7c7b\u578b\uff0c0-IPV4\uff0c1-IPV6\uff0c2-IPV4\u548cIPV6 nwState \uff1a\u62e8\u53f7\u7ed3\u679c\uff0c0-\u5931\u8d25\uff0c1-\u6210\u529f reconnect \uff1a\u91cd\u62e8\u6807\u5fd7 ipv6Addr \uff1aipv6\u5730\u5740 priDns \uff1adns\u4fe1\u606f secDns \uff1adns\u4fe1\u606f ipType =2\uff0c\u8fd4\u56de\u503c\u683c\u5f0f\u5982\u4e0b\uff1a (profileIdx, ipType, [nwState, reconnect, ipv4Addr, priDns, secDns], [nwState, reconnect, ipv6Addr, priDns, secDns]) \u793a\u4f8b >>> import dataCall >>> dataCall.getInfo(1, 0) (1, 0, [1, 0, '10.91.44.177', '58.242.2.2', '218.104.78.2']) \u6ce8\uff1a\u8fd4\u56de\u503c (1, 0, [0, 0, '0.0.0.0', '0.0.0.0', '0.0.0.0']) \u8868\u793a\u5f53\u524d\u6ca1\u6709\u62e8\u53f7\u6216\u8005\u62e8\u53f7\u6ca1\u6709\u6210\u529f\u3002 cellLocator - \u57fa\u7ad9\u5b9a\u4f4d \u6a21\u5757\u529f\u80fd\uff1a\u63d0\u4f9b\u57fa\u7ad9\u5b9a\u4f4d\u63a5\u53e3\uff0c\u83b7\u53d6\u5750\u6807\u4fe1\u606f\u3002 cellLocator.getLocation(serverAddr, port, token, timeout, profileID) \u83b7\u53d6\u57fa\u7ad9\u5750\u6807\u4fe1\u606f\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e serverAddr string \u670d\u52a1\u5668\u57df\u540d\uff0c\u957f\u5ea6\u5fc5\u987b\u5c0f\u4e8e255 bytes\uff0c\u76ee\u524d\u4ec5\u652f\u6301 \u201cwww.queclocator.com\u201d port int \u670d\u52a1\u5668\u7aef\u53e3\uff0c\u76ee\u524d\u4ec5\u652f\u6301 80 \u7aef\u53e3 token string \u5bc6\u94a5\uff0c16\u4f4d\u5b57\u7b26\u7ec4\u6210\uff0c\u9700\u8981\u7533\u8bf7 timeout int \u8bbe\u7f6e\u8d85\u65f6\u65f6\u95f4\uff0c\u8303\u56f41-300s\uff0c\u9ed8\u8ba4300s profileID int PDP\u7d22\u5f15\uff0c\u8303\u56f41-8 \u8fd4\u56de\u503c \u529f\u8fd4\u56de\u5ea6\u683c\u5f0f\u7ecf\u7eac\u5ea6\u5750\u6807\u4fe1\u606f\uff0c\u8fd4\u56de\u683c\u5f0f\uff1a (latitude, longtitude, accuracy) \uff0c (0.0, 0.0, 0) \u8868\u793a\u672a\u83b7\u53d6\u5230\u6709\u6548\u5750\u6807\u4fe1\u606f\uff1b\u5931\u8d25\u8fd4\u56de\u9519\u8bef\u7801\u8bf4\u660e\u5982\u4e0b\uff1a -1 \u2013 \u521d\u59cb\u5316\u5931\u8d25 -2 \u2013 \u670d\u52a1\u5668\u5730\u5740\u8fc7\u957f\uff08\u8d85\u8fc7255\u5b57\u8282\uff09 -3 \u2013 \u5bc6\u94a5\u957f\u5ea6\u9519\u8bef\uff0c\u5fc5\u987b\u4e3a16\u5b57\u8282 -4 \u2013 \u8d85\u65f6\u65f6\u957f\u8d85\u51fa\u8303\u56f4\uff0c\u652f\u6301\u7684\u8303\u56f4\uff081~300\uff09s -5 \u2013 \u6307\u5b9a\u7684PDP\u7f51\u7edc\u672a\u8fde\u63a5\uff0c\u8bf7\u786e\u8ba4PDP\u662f\u5426\u6b63\u786e -6 \u2013 \u83b7\u53d6\u5750\u6807\u51fa\u9519 \u793a\u4f8b >>> import cellLocator >>> cellLocator.getLocation(\"www.queclocator.com\", 80, \"1111111122222222\", 8, 1) (117.1138, 31.82279, 550) # \u4e0a\u9762\u4f7f\u7528\u7684\u5bc6\u94a5\u4ec5\u4e3a\u6d4b\u8bd5\u5bc6\u94a5 sim - SIM\u5361 \u6a21\u5757\u529f\u80fd\uff1a\u63d0\u4f9bsim\u5361\u64cd\u4f5c\u76f8\u5173API\uff0c\u5982\u67e5\u8be2sim\u5361\u72b6\u6001\u3001iccid\u3001imsi\u7b49\u3002 \u6ce8\u610f\uff1a\u80fd\u6210\u529f\u83b7\u53d6IMSI\u3001ICCID\u3001\u7535\u8bdd\u53f7\u7801\u7684\u524d\u63d0\u662fSIM\u5361\u72b6\u6001\u4e3a1\uff0c\u53ef\u901a\u8fc7sim.getStatus()\u67e5\u8be2\u3002 sim.getImsi() \u83b7\u53d6sim\u5361\u7684imsi\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56destring\u7c7b\u578b\u7684imsi\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b-1\u3002 \u793a\u4f8b >>> import sim >>> sim.getImsi() '460185466870381' sim.getIccid() \u83b7\u53d6sim\u5361\u7684iccid\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56destring\u7c7b\u578b\u7684iccid\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b-1\u3002 \u793a\u4f8b >>> sim.getIccid() '89860390845513443049' sim.getPhoneNumber() \u83b7\u53d6sim\u5361\u7684\u7535\u8bdd\u53f7\u7801\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56destring\u7c7b\u578b\u7684phone number\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b-1\u3002 \u793a\u4f8b >>> sim.getPhoneNumber() '+8618166328752' sim.getStatus() \u83b7\u53d6sim\u5361\u7684\u72b6\u6001\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u8fd4\u56de\u503c \u8bf4\u660e 0 SIM was removed. 1 SIM is ready. 2 Expecting the universal PIN./SIM is locked, waiting for a CHV1 password. 3 Expecting code to unblock the universal PIN./SIM is blocked, CHV1 unblocking password is required. 4 SIM is locked due to a SIM/USIM personalization check failure. 5 SIM is blocked due to an incorrect PCK; an MEP unblocking password is required. 6 Expecting key for hidden phone book entries. 7 Expecting code to unblock the hidden key. 8 SIM is locked; waiting for a CHV2 password. 9 SIM is blocked; CHV2 unblocking password is required. 10 SIM is locked due to a network personalization check failure. 11 SIM is blocked due to an incorrect NCK; an MEP unblocking password is required. 12 SIM is locked due to a network subset personalization check failure. 13 SIM is blocked due to an incorrect NSCK; an MEP unblocking password is required. 14 SIM is locked due to a service provider personalization check failure. 15 SIM is blocked due to an incorrect SPCK; an MEP unblocking password is required. 16 SIM is locked due to a corporate personalization check failure. 17 SIM is blocked due to an incorrect CCK; an MEP unblocking password is required. 18 SIM is being initialized; waiting for completion. 19 Use of CHV1/CHV2/universal PIN/code to unblock the CHV1/code to unblock the CHV2/code to unblock the universal PIN/ is blocked. 20 Unknow status. sim.enablePin(pin) \u542f\u7528sim\u5361PIN\u7801\u9a8c\u8bc1\uff0c\u5f00\u542f\u540e\u9700\u8981\u8f93\u5165\u6b63\u786e\u7684PIN\u9a8c\u8bc1\u6210\u529f\u540e\uff0csim\u5361\u624d\u80fd\u6b63\u5e38\u4f7f\u7528\u3002\u53ea\u67093\u6b21\u8f93\u5165PIN\u7801\u673a\u4f1a\uff0c3\u6b21\u90fd\u9519\u8bef\uff0csim\u5361\u88ab\u9501\u5b9a\uff0c\u9700\u8981PUK\u6765\u89e3\u9501\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e pin string PIN\u7801\uff0c\u4e00\u822c\u9ed8\u8ba4\u662f\u20181234\u2019 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u6574\u578b0\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b-1\u3002 \u793a\u4f8b >>> sim.enablePin(\"1234\") 0 sim.disablePin(pin) \u5173\u95edsim\u5361PIN\u7801\u9a8c\u8bc1\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e pin string PIN\u7801\uff0c\u4e00\u822c\u9ed8\u8ba4\u662f\u20181234\u2019 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u6574\u578b0\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b-1\u3002 \u793a\u4f8b >>> sim.disablePin(\"1234\") 0 sim.verifyPin(pin) sim\u5361PIN\u7801\u9a8c\u8bc1\u3002\u9700\u8981\u5728\u8c03\u7528sim.enablePin(pin)\u6210\u529f\u4e4b\u540e\uff0c\u624d\u80fd\u8fdb\u884c\u9a8c\u8bc1\uff0c\u9a8c\u8bc1\u6210\u529f\u540e\uff0csim\u5361\u624d\u80fd\u6b63\u5e38\u4f7f\u7528\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e pin string PIN\u7801\uff0c\u4e00\u822c\u9ed8\u8ba4\u662f\u20181234\u2019 \u8fd4\u56de\u503c \u9a8c\u8bc1\u6210\u529f\u8fd4\u56de\u6574\u578b0\uff0c\u9a8c\u8bc1\u5931\u8d25\u8fd4\u56de\u6574\u578b-1\u3002 \u793a\u4f8b >>> sim.verifyPin(\"1234\") 0 sim.unblockPin(puk, newPin) sim\u5361\u89e3\u9501\u3002\u5f53\u591a\u6b21\u9519\u8bef\u8f93\u5165 PIN/PIN2 \u7801\u540e\uff0cSIM \u5361\u72b6\u6001\u4e3a\u8bf7\u6c42 PUK/PUK2 \u65f6\uff0c\u8f93\u5165 PUK/PUK2 \u7801\u548c\u65b0\u7684 PIN/PIN2 \u7801\u8fdb\u884c\u89e3\u9501\uff0cpuk\u7801\u8f93\u516510\u6b21\u9519\u8bef\uff0cSIM\u5361\u5c06\u88ab\u6c38\u4e45\u9501\u5b9a\u81ea\u52a8\u62a5\u5e9f\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e puk string PUK\u7801\uff0c\u957f\u5ea68\u4f4d\u6570\u5b57 newPin string \u65b0PIN\u7801 \u8fd4\u56de\u503c \u89e3\u9501\u6210\u529f\u8fd4\u56de\u6574\u578b0\uff0c\u89e3\u9501\u5931\u8d25\u8fd4\u56de\u6574\u578b-1\u3002 \u793a\u4f8b >>> sim.unblockPin(\"12345678\", \"0000\") 0 sim.changePin(oldPin, newPin) \u66f4\u6539sim\u5361PIN\u7801\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e oldPin string \u65e7\u7684PIN\u7801 newPin string \u65b0\u7684PIN\u7801 \u8fd4\u56de\u503c \u66f4\u6539\u6210\u529f\u8fd4\u56de\u6574\u578b0\uff0c\u66f4\u6539\u5931\u8d25\u8fd4\u56de\u6574\u578b-1\u3002 \u793a\u4f8b >>> sim.changePin(\"1234\", \"4321\") 0 sim.readPhonebook(storage, start, end, username) \u83b7\u53d6 SIM \u5361\u4e0a\u6307\u5b9a\u7535\u8bdd\u672c\u4e2d\u7684\u4e00\u6761\u6216\u591a\u6761\u7535\u8bdd\u53f7\u7801\u8bb0\u5f55\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e storage int \u9700\u8981\u8bfb\u53d6\u7535\u8bdd\u53f7\u7801\u8bb0\u5f55\u7684\u7535\u8bdd\u672c\u5b58\u50a8\u4f4d\u7f6e\uff0c\u53ef\u9009\u53c2\u6570\u5982\u4e0b\uff1a 0 \u2013 DC\uff0c1 \u2013 EN\uff0c2 \u2013 FD\uff0c3 \u2013 LD\uff0c4 \u2013 MC\uff0c5 \u2013 ME\uff0c6 \u2013 MT\uff0c7 \u2013 ON\uff0c 8 \u2013 RC\uff0c9 \u2013 SM\uff0c10 \u2013 AP\uff0c11 \u2013 MBDN\uff0c12 \u2013 MN\uff0c13 \u2013 SDN\uff0c14 \u2013 ICI\uff0c15 - OCI start int \u9700\u8981\u8bfb\u53d6\u7535\u8bdd\u53f7\u7801\u8bb0\u5f55\u7684\u8d77\u59cb\u7f16\u53f7\uff0cstart\u4e3a 0 \u8868\u793a\u4e0d\u4f7f\u7528\u7f16\u53f7\u83b7\u53d6\u7535\u8bdd\u53f7\u7801\u8bb0 end int \u9700\u8981\u8bfb\u53d6\u7535\u8bdd\u53f7\u7801\u8bb0\u5f55\u7684\u7ed3\u675f\u7f16\u53f7 username string \u5f53 start\u4e3a 0 \u65f6\u6709\u6548\uff0c\u7535\u8bdd\u53f7\u7801\u4e2d\u7684\u7528\u6237\u540d \u8fd4\u56de\u503c \u8bfb\u53d6\u5931\u8d25\u8fd4\u56de\u6574\u578b-1\uff0c\u6210\u529f\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4\uff0c\u5305\u542b\u8bfb\u53d6\u8bb0\u5f55\uff0c\u683c\u5f0f\u5982\u4e0b\uff1a (record_number, [(index, username, phone_number), ... , (index, username, phone_number)]) \u8fd4\u56de\u503c\u53c2\u6570\u8bf4\u660e\uff1a record_number \u2013 \u8bfb\u53d6\u7684\u8bb0\u5f55\u6570\u91cf\uff0c\u6574\u578b index \u2013 \u5728\u7535\u8bdd\u7c3f\u4e2d\u7684\u7d22\u5f15\u4f4d\u7f6e\uff0c\u6574\u578b username \u2013 \u59d3\u540d\uff0cstring\u7c7b\u578b phone_number \u2013 \u7535\u8bdd\u53f7\u7801\uff0cstring\u7c7b\u578b \u793a\u4f8b >>> sim.readPhonebook(9, 1, 3, \"\") (3,[(1,'zhangsan','15544272539'),(2,'lisi','15544272539'),(3,'wangwu','18144786859')]) sim. writePhonebook(storage, index, username, number) \u5199\u5165\u4e00\u6761\u7535\u8bdd\u53f7\u7801\u8bb0\u5f55\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e storage int \u9700\u8981\u8bfb\u53d6\u7535\u8bdd\u53f7\u7801\u8bb0\u5f55\u7684\u7535\u8bdd\u672c\u5b58\u50a8\u4f4d\u7f6e\uff0c\u53ef\u9009\u53c2\u6570\u5982\u4e0b\uff1a 0 \u2013 DC\uff0c1 \u2013 EN\uff0c2 \u2013 FD\uff0c3 \u2013 LD\uff0c4 \u2013 MC\uff0c5 \u2013 ME\uff0c6 \u2013 MT\uff0c7 \u2013 ON\uff0c 8 \u2013 RC\uff0c9 \u2013 SM\uff0c10 \u2013 AP\uff0c11 \u2013 MBDN\uff0c12 \u2013 MN\uff0c13 \u2013 SDN\uff0c14 \u2013 ICI\uff0c15 - OCI index int \u9700\u8981\u5199\u5165\u7535\u8bdd\u53f7\u7801\u8bb0\u5f55\u7684\u5728\u7535\u8bdd\u7c3f\u4e2d\u7684\u7f16\u53f7 username string \u7535\u8bdd\u53f7\u7801\u7684\u7528\u6237\u540d number string \u7535\u8bdd\u53f7\u7801 \u8fd4\u56de\u503c \u5199\u5165\u6210\u529f\u8fd4\u56de\u6574\u578b0\uff0c\u5199\u5165\u5931\u8d25\u8fd4\u56de\u6574\u578b-1\u3002 net - \u7f51\u7edc\u76f8\u5173\u529f\u80fd \u6a21\u5757\u529f\u80fd\uff1a\u8be5\u6a21\u5757\u63d0\u4f9b\u914d\u7f6e\u548c\u67e5\u8be2\u7f51\u7edc\u6a21\u5f0f\u4fe1\u606f\u7b49\u63a5\u53e3\u3002 net.csqQueryPoll() \u83b7\u53d6csq\u4fe1\u53f7\u5f3a\u5ea6\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u6574\u578b\u7684csq\u4fe1\u53f7\u5f3a\u5ea6\u503c\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\uff0c\u8fd4\u56de\u503c\u4e3a99\u8868\u793a\u5f02\u5e38\uff1b \u4fe1\u53f7\u5f3a\u5ea6\u503c\u8303\u56f40~31\uff0c\u503c\u8d8a\u5927\u8868\u793a\u4fe1\u53f7\u5f3a\u5ea6\u8d8a\u597d\u3002 \u793a\u4f8b >>> import net >>> net.csqQueryPoll() 31 net.getCellInfo() \u83b7\u53d6\u90bb\u8fd1 CELL \u7684\u4fe1\u606f\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\uff0c\u6210\u529f\u8fd4\u56de\u5305\u542b\u4e09\u79cd\u7f51\u7edc\u7cfb\u7edf\uff08GSM\u3001UMTS\u3001LTE\uff09\u7684\u4fe1\u606f\u7684list\uff0c\u5982\u679c\u5bf9\u5e94\u7f51\u7edc\u7cfb\u7edf\u4fe1\u606f\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56de\u7a7a\u7684List\u3002\u8fd4\u56de\u503c\u683c\u5f0f\u5982\u4e0b\uff1a ([(flag, cid, mcc, mnc, lac, arfcn, bsic, rssi)], [(flag, cid, licd, mcc, mnc, lac, arfcn, bsic, rssi)], [(flag, cid, mcc, mnc, pci, tac, earfcn, rssi)]) GSM\u7f51\u7edc\u7cfb\u7edf\u8fd4\u56de\u503c\u8bf4\u660e \u53c2\u6570 \u53c2\u6570\u610f\u4e49 flag \u8fd4\u56de 0 - 2\uff0c 0\uff1apresent\uff0c1\uff1ainter\uff0c2\uff1aintra cid \u8fd4\u56decid\u4fe1\u606f\uff0c0\u5219\u4e3a\u7a7a mcc \u79fb\u52a8\u8bbe\u5907\u56fd\u5bb6\u4ee3\u7801 mnc \u79fb\u52a8\u8bbe\u5907\u7f51\u7edc\u4ee3\u7801 lac \u4f4d\u7f6e\u533a\u7801 arfcn \u65e0\u7ebf\u9891\u9053\u7f16\u53f7 bsic \u57fa\u7ad9\u8bc6\u522b\u7801 rssi \u63a5\u6536\u7684\u4fe1\u53f7\u5f3a\u5ea6 UMTS\u7f51\u7edc\u7cfb\u7edf\u8fd4\u56de\u503c\u8bf4\u660e \u53c2\u6570 \u53c2\u6570\u610f\u4e49 flag \u8fd4\u56de 0 - 2\uff0c 0\uff1apresent\uff0c1\uff1ainter\uff0c2\uff1aintra cid \u8fd4\u56decid\u4fe1\u606f\uff0c0\u5219\u4e3a\u7a7a licd \u533a\u57df\u6807\u8bc6\u53f7 mcc \u79fb\u52a8\u8bbe\u5907\u56fd\u5bb6\u4ee3\u7801 mnc \u79fb\u52a8\u8bbe\u5907\u7f51\u7edc\u4ee3\u7801 lac \u4f4d\u7f6e\u533a\u7801 arfcn \u65e0\u7ebf\u9891\u9053\u7f16\u53f7 bsic \u57fa\u7ad9\u8bc6\u522b\u7801 rssi \u63a5\u6536\u7684\u4fe1\u53f7\u5f3a\u5ea6 LTE\u7f51\u7edc\u7cfb\u7edf\u8fd4\u56de\u503c\u8bf4\u660e \u53c2\u6570 \u53c2\u6570\u610f\u4e49 flag \u8fd4\u56de 0 - 2\uff0c 0\uff1apresent\uff0c1\uff1ainter\uff0c2\uff1aintra cid \u8fd4\u56decid\u4fe1\u606f\uff0c0\u5219\u4e3a\u7a7a mcc \u79fb\u52a8\u8bbe\u5907\u56fd\u5bb6\u4ee3\u7801 mnc \u79fb\u52a8\u8bbe\u5907\u7f51\u7edc\u4ee3\u7801 pci \u5c0f\u533a\u6807\u8bc6 tac Tracing area code earfcn \u65e0\u7ebf\u9891\u9053\u7f16\u53f7 \u8303\u56f4: 0 - 65535 rssi \u63a5\u6536\u7684\u4fe1\u53f7\u5f3a\u5ea6 \u793a\u4f8b >>> net.getCellInfo() ([], [], [(0, 14071232, 1120, 0, 21771, 123, 1300)]) net.getConfig() \u83b7\u53d6\u5f53\u524d\u7f51\u7edc\u6a21\u5f0f\u3001\u6f2b\u6e38\u914d\u7f6e\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\uff0c\u6210\u529f\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4\uff0c\u5305\u542b\u5f53\u524d\u9996\u9009\u7684\u7f51\u7edc\u5236\u5f0f\u4e0e\u6f2b\u6e38\u6253\u5f00\u72b6\u6001\u3002 \u7f51\u7edc\u5236\u5f0f \u503c \u7f51\u7edc\u5236\u5f0f 0 GSM 1 UMTS . not supported in EC100Y 2 GSM_UMTS, auto. not supported in EC100Y and EC200S 3 GSM_UMTS, GSM preferred. not supported in EC100Y and EC200S 4 SM_UMTS, UMTS preferred. not supported in EC100Y and EC200S 5 LTE 6 GSM_LTE, auto, single link 7 GSM_LTE, GSM preferred, single link 8 GSM_LTE, LTE preferred, single link 9 UMTS_LTE, auto, single link. not supported in EC100Y and EC200S 10 UMTS_LTE, UMTS preferred, single link. not supported in EC100Y and EC200S 11 UMTS_LTE, LTE preferred, single link . not supported in EC100Y and EC200S 12 GSM_UMTS_LTE, auto, single link. not supported in EC100Y and EC200S 13 GSM_UMTS_LTE, GSM preferred, single link. not supported in EC100Y and EC200S 14 GSM_UMTS_LTE, UMTS preferred, single link. not supported in EC100Y and EC200S 15 GSM_UMTS_LTE, LTE preferred, single link. not supported in EC100Y and EC200S 16 GSM_LTE, dual link 17 UMTS_LTE, dual link. not supported in EC100Y and EC200S 18 GSM_UMTS_LTE, dual link. not supported in EC100Y and EC200S \u793a\u4f8b >>>net.getConfig () (8, False) net.setConfig(mode, roaming) \u8bbe\u7f6e\u7f51\u7edc\u6a21\u5f0f\u3001\u6f2b\u6e38\u914d\u7f6e\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e mode int \u7f51\u7edc\u5236\u5f0f(\u8be6\u89c1\u4e0a\u56fe) roaming int \u6f2b\u6e38\u5f00\u5173(0\uff1a\u5173\u95ed\uff0c 1\uff1a\u5f00\u542f) \u8fd4\u56de\u503c \u8bbe\u7f6e\u6210\u529f\u8fd4\u56de\u6574\u578b\u503c0\uff0c\u8bbe\u7f6e\u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\u3002 net.getNetMode() \u83b7\u53d6\u7f51\u7edc\u914d\u7f6e\u6a21\u5f0f\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\uff0c\u6210\u529f\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4\uff0c\u683c\u5f0f\u4e3a\uff1a (selection_mode, mcc, mnc, act) \u8fd4\u56de\u503c\u53c2\u6570\u8bf4\u660e\uff1a selection_mode \uff1a\u65b9\u5f0f\uff0c0 - \u81ea\u52a8\uff0c1 - \u624b\u52a8 mcc \uff1a\u79fb\u52a8\u8bbe\u5907\u56fd\u5bb6\u4ee3\u7801 mnc \uff1a\u79fb\u52a8\u8bbe\u5907\u7f51\u7edc\u4ee3\u7801 act \uff1a\u9996\u9009\u7f51\u7edc\u7684ACT\u6a21\u5f0f ACT\u6a21\u5f0f \u503c ACT\u6a21\u5f0f 0 GSM 1 COMPACT 2 UTRAN 3 GSM wEGPRS 4 UTRAN wHSDPA 5 UTRAN wHSUPA 6 UTRAN wHSDPA HSUPA 7 E UTRAN 8 UTRAN HSPAP 9 E TRAN A 10 NONE \u793a\u4f8b >>> net.getNetMode() (0, '460', '46', 7) net.getSignal() \u83b7\u53d6\u8be6\u7ec6\u4fe1\u53f7\u5f3a\u5ea6\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\uff0c\u6210\u529f\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4\uff0c\u5305\u542b\u4e24\u4e2aList(GW \u3001LTE)\uff0c\u8fd4\u56de\u503c\u683c\u5f0f\u5982\u4e0b\uff1a ([rssi, bitErrorRate, rscp, ecno], [rssi, rsrp, rsrq, cqi]) \u8fd4\u56de\u503c\u53c2\u6570\u8bf4\u660e\uff1a GW list\uff1a rssi \uff1a\u63a5\u6536\u7684\u4fe1\u53f7\u5f3a\u5ea6 bitErrorRate \uff1a\u8bef\u7801\u7387 rscp \uff1a\u63a5\u6536\u4fe1\u53f7\u7801\u529f\u7387 ecno \uff1a\u5bfc\u9891\u4fe1\u9053 LTE list\uff1a rssi \uff1a\u63a5\u6536\u7684\u4fe1\u53f7\u5f3a\u5ea6 rsrp \uff1a\u4e0b\u884c\u53c2\u8003\u4fe1\u53f7\u7684\u63a5\u6536\u529f\u7387 rsrq \uff1a\u4e0b\u884c\u7279\u5b9a\u5c0f\u533a\u53c2\u8003\u4fe1\u53f7\u7684\u63a5\u6536\u8d28\u91cf cqi \uff1a\u4fe1\u9053\u8d28\u91cf \u793a\u4f8b >>>net.getSignal() ([99, 99, 255, 255], [-51, -76, -5, 255]) net.nitzTime() \u83b7\u53d6\u5f53\u524d\u57fa\u7ad9\u65f6\u95f4\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\uff0c\u6210\u529f\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4\uff0c\u5305\u542b\u57fa\u7ad9\u65f6\u95f4\u4e0e\u5bf9\u5e94\u65f6\u95f4\u6233\u4e0e\u95f0\u79d2\u6570\uff080\u8868\u793a\u4e0d\u53ef\u7528\uff09\uff0c\u683c\u5f0f\u4e3a\uff1a (date, abs_time, leap_sec) date \uff1a\u57fa\u7ad9\u65f6\u95f4\uff0cstring\u7c7b\u578b abs_time \uff1a\u57fa\u7ad9\u65f6\u95f4\u7684\u7edd\u5bf9\u79d2\u6570\u8868\u793a\uff0c\u6574\u578b leap_sec \uff1a\u95f0\u79d2\u6570\uff0c\u6574\u578b \u793a\u4f8b >>> net.nitzTime() ('20/11/26 02:13:25 +8 0', 1606356805, 0) net.operatorName() \u83b7\u53d6\u5f53\u524d\u6ce8\u7f51\u7684\u8fd0\u8425\u5546\u4fe1\u606f\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\uff0c\u6210\u529f\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4\uff0c\u5305\u542b\u6ce8\u7f51\u7684\u8fd0\u8425\u5546\u4fe1\u606f\uff0c\u683c\u5f0f\u4e3a\uff1a (long_eons, short_eons, mcc, mnc) long_eons \uff1a\u8fd0\u8425\u5546\u4fe1\u606f\u5168\u79f0\uff0cstring\u7c7b\u578b short_eons \uff1a\u8fd0\u8425\u5546\u4fe1\u606f\u7b80\u79f0\uff0cstring\u7c7b\u578b mcc \uff1a\u79fb\u52a8\u8bbe\u5907\u56fd\u5bb6\u4ee3\u7801\uff0cstring\u7c7b\u578b mnc \uff1a\u79fb\u52a8\u8bbe\u5907\u7f51\u7edc\u4ee3\u7801\uff0cstring\u7c7b\u578b \u793a\u4f8b >>> net.operatorName() ('CHN-UNICOM', 'UNICOM', '460', '01') net.getState() \u83b7\u53d6\u5f53\u524d\u7f51\u7edc\u6ce8\u518c\u4fe1\u606f\u3002 \u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\uff0c\u6210\u529f\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4\uff0c\u5305\u542b\u6ce8\u7f51\u7684\u7f51\u7edc\u6ce8\u518c\u4fe1\u606f\uff0c\u683c\u5f0f\u4e3a\uff1a ([voice_state, voice_lac, voice_cid, voice_rat, voice_reject_cause, voice_psc], [data_state, data _lac, data _cid, data _rat, data _reject_cause, data _psc]) \u8fd4\u56de\u503c\u53c2\u6570\u8bf4\u660e\uff1a state \uff1a\u7f51\u7edc\u6ce8\u518c\u72b6\u6001 lac \uff1a\u4f4d\u7f6e\u533a\u7801 cid \uff1aint\u7c7b\u578bid\u4fe1\u606f act \uff1a\u6ce8\u7f51\u5236\u5f0f reject_cause \uff1a\u6ce8\u518c\u88ab\u62d2\u7edd\u7684\u539f\u56e0 psc \uff1aPrimary Scrambling Code \u7f51\u7edc\u6ce8\u518c\u72b6\u6001 \u503c \u72b6\u6001\u8bf4\u660e 0 not registered, MT is not currently searching an operator to register to 1 registered, home network 2 not registered, but MT is currently trying to attach or searching an operator to register to 3 registration denied 4 unknown 5 registered, roaming 6 egistered for \u201cSMS only\u201d, home network (not applicable) 7 registered for \u201cSMS only\u201d, roaming (not applicable) 8 attached for emergency bearer services only 9 registered for \u201cCSFB not preferred\u201d, home network (not applicable) 10 registered for \u201cCSFB not preferred\u201d, roaming (not applicable) 11 emergency bearer services only \u793a\u4f8b >>> getState() ([11, 26909, 232301323, 7, 0, 466], [0, 26909, 232301323, 7, 0, 0]) net.getCi() \u83b7\u53d6\u9644\u8fd1\u5c0f\u533aID\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u4e00\u4e2alist\u7c7b\u578b\u7684\u6570\u7ec4\uff0c\u5305\u542b\u5c0f\u533aid\uff0c\u683c\u5f0f\u4e3a\uff1a [id, \u2026\u2026, id] \u3002\u6570\u7ec4\u6210\u5458\u6570\u91cf\u5e76\u975e\u56fa\u5b9a\u4e0d\u53d8\uff0c\u4f4d\u7f6e\u4e0d\u540c\u3001\u4fe1\u53f7\u5f3a\u5f31\u4e0d\u540c\u7b49\u90fd\u53ef\u80fd\u5bfc\u81f4\u83b7\u53d6\u7684\u7ed3\u679c\u4e0d\u4e00\u6837\u3002 \u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\u3002 \u793a\u4f8b >>> net.getCi() [14071232, 0] net.getMnc() \u83b7\u53d6\u9644\u8fd1\u5c0f\u533a\u7684mnc\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u4e00\u4e2alist\u7c7b\u578b\u7684\u6570\u7ec4\uff0c\u5305\u542b\u5c0f\u533amnc\uff0c\u683c\u5f0f\u4e3a\uff1a [mnc, \u2026\u2026, mnc] \u3002\u6570\u7ec4\u6210\u5458\u6570\u91cf\u5e76\u975e\u56fa\u5b9a\u4e0d\u53d8\uff0c\u4f4d\u7f6e\u4e0d\u540c\u3001\u4fe1\u53f7\u5f3a\u5f31\u4e0d\u540c\u7b49\u90fd\u53ef\u80fd\u5bfc\u81f4\u83b7\u53d6\u7684\u7ed3\u679c\u4e0d\u4e00\u6837\u3002 \u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\u3002 \u793a\u4f8b >>> net.getMnc() [0, 0] net.getMcc() \u83b7\u53d6\u9644\u8fd1\u5c0f\u533a\u7684mcc\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u4e00\u4e2alist\u7c7b\u578b\u7684\u6570\u7ec4\uff0c\u5305\u542b\u5c0f\u533amcc\uff0c\u683c\u5f0f\u4e3a\uff1a [mcc, \u2026\u2026, mcc] \u3002\u6570\u7ec4\u6210\u5458\u6570\u91cf\u5e76\u975e\u56fa\u5b9a\u4e0d\u53d8\uff0c\u4f4d\u7f6e\u4e0d\u540c\u3001\u4fe1\u53f7\u5f3a\u5f31\u4e0d\u540c\u7b49\u90fd\u53ef\u80fd\u5bfc\u81f4\u83b7\u53d6\u7684\u7ed3\u679c\u4e0d\u4e00\u6837\u3002 \u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\u3002 \u793a\u4f8b >>> net.getMcc() [1120, 0] net.getLac() \u83b7\u53d6\u9644\u8fd1\u5c0f\u533a\u7684Lac\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u4e00\u4e2alist\u7c7b\u578b\u7684\u6570\u7ec4\uff0c\u5305\u542b\u5c0f\u533alac\uff0c\u683c\u5f0f\u4e3a\uff1a [lac, \u2026\u2026, lac] \u3002\u6570\u7ec4\u6210\u5458\u6570\u91cf\u5e76\u975e\u56fa\u5b9a\u4e0d\u53d8\uff0c\u4f4d\u7f6e\u4e0d\u540c\u3001\u4fe1\u53f7\u5f3a\u5f31\u4e0d\u540c\u7b49\u90fd\u53ef\u80fd\u5bfc\u81f4\u83b7\u53d6\u7684\u7ed3\u679c\u4e0d\u4e00\u6837\u3002 \u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\u3002 \u793a\u4f8b >>> net.getLac() [21771, 0] net.getModemFun() \u83b7\u53d6\u5f53\u524dSIM\u6a21\u5f0f\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u5f53\u524dSIM\u6a21\u5f0f\uff1a 0 \uff1a\u5168\u529f\u80fd\u5173\u95ed 1 \uff1a\u5168\u529f\u80fd\u5f00\u542f\uff08\u9ed8\u8ba4\uff09 4 \uff1a\u98de\u884c\u6a21\u5f0f \u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\u3002 \u793a\u4f8b >>> net.getModemFun() 1 net.setModemFun(function, rst) \u8bbe\u7f6e\u5f53\u524dSIM\u6a21\u5f0f\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e function int \u8bbe\u7f6eSIM\u5361\u6a21\u5f0f\uff0c0 - \u5168\u529f\u80fd\u5173\u95ed\uff0c 1 - \u5168\u529f\u80fd\u5f00\u542f\uff0c 4 - \u98de\u884c\u6a21\u5f0f rst int \u53ef\u9009\u53c2\u6570 \uff0c0 - \u8bbe\u7f6e\u7acb\u5373\u751f\u6548\uff08\u9ed8\u8ba4\u4e3a0\uff09\uff0c1 - \u8bbe\u7f6e\u5b8c\u91cd\u542f \u8fd4\u56de\u503c \u8bbe\u7f6e\u6210\u529f\u8fd4\u56de\u6574\u578b\u503c0\uff0c\u8bbe\u7f6e\u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\u3002 \u793a\u4f8b >>> net.setModemFun(4) 0 fota - \u56fa\u4ef6\u5347\u7ea7 \u6a21\u5757\u529f\u80fd\uff1a\u56fa\u4ef6\u5347\u7ea7\u3002 \u521b\u5efafota\u5bf9\u8c61 import fota fota_obj = fota() fota_obj.write(bytesData, file_size) \u5199\u5165\u5347\u7ea7\u5305\u6570\u636e\u6d41\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e bytesData bytes \u5347\u7ea7\u5305\u6587\u4ef6\u6570\u636e file_size int \u5347\u7ea7\u5305\u6587\u4ef6\u603b\u5927\u5c0f(\u5355\u4f4d\uff1a\u5b57\u8282) \u8fd4\u56de\u503c \u5199\u5165\u6210\u529f\u8fd4\u56de\u6574\u578b\u503c0\uff0c\u5199\u5165\u5931\u8d25\u8fd4\u56de\u503c\u6574\u578b\u503c-1\u3002 fota_obj.verify() \u6570\u636e\u6821\u9a8c\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u68c0\u9a8c\u6210\u529f\u8fd4\u56de\u6574\u578b\u503c0\uff0c\u6821\u9a8c\u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\u3002 \u793a\u4f8b >>> fota_obj.verify() 0 audio - \u97f3\u9891\u64ad\u653e \u6a21\u5757\u529f\u80fd\uff1a\u97f3\u9891\u64ad\u653e\uff0c\u652f\u6301TTS\u3001mp3\u4ee5\u53caAMR\u6587\u4ef6\u64ad\u653e\u3002 TTS \u521b\u5efaTTS\u5bf9\u8c61 import audio tts = audio.TTS(device) \u53c2\u6570 device \uff1a\u8bbe\u5907\u7c7b\u578b\uff0c0 - \u8bdd\u7b52\uff0c1 - \u8033\u673a\uff0c2 - \u5587\u53ed\u3002 \u793a\u4f8b >>> import audio >>> tts = audio.TTS(1) tts.close() \u5173\u95edTTS\u529f\u80fd\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u6574\u578b0\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b-1\u3002 tts.play(priority, breakin, mode, str) \u8bed\u97f3\u64ad\u653e\uff0c\u652f\u6301\u4f18\u5148\u7ea70~4\uff0c\u6570\u5b57\u8d8a\u5927\u4f18\u5148\u7ea7\u8d8a\u9ad8\uff0c\u6bcf\u4e2a\u4f18\u5148\u7ea7\u7ec4\u53ef\u540c\u65f6\u6700\u591a\u52a0\u516510\u4e2a\u64ad\u653e\u4efb\u52a1\uff1b\u64ad\u653e\u7b56\u7565\u8bf4\u660e\u5982\u4e0b\uff1a \u5982\u679c\u5f53\u524d\u6b63\u5728\u64ad\u653e\u4efb\u52a1A\uff0c\u5e76\u4e14\u5141\u8bb8\u88ab\u6253\u65ad\uff0c\u6b64\u65f6\u6709\u9ad8\u4f18\u5148\u7ea7\u64ad\u653e\u4efb\u52a1B\uff0c\u90a3\u4e48\u4f1a\u6253\u65ad\u5f53\u524d\u4f4e\u4f18\u5148\u7ea7\u64ad\u653e\u4efb\u52a1A\uff0c\u76f4\u63a5\u64ad\u653e\u9ad8\u4f18\u5148\u7ea7\u4efb\u52a1B\uff1b \u5982\u679c\u5f53\u524d\u6b63\u5728\u64ad\u653e\u4efb\u52a1A\uff0c\u5e76\u4e14\u4e0d\u5141\u8bb8\u88ab\u6253\u65ad\uff0c\u6b64\u65f6\u6709\u9ad8\u4f18\u5148\u7ea7\u64ad\u653e\u4efb\u52a1B\uff0c\u90a3\u4e48B\u64ad\u653e\u4efb\u52a1\u5c06\u4f1a\u52a0\u5165\u5230\u64ad\u653e\u961f\u5217\u4e2d\u5408\u9002\u7684\u4f4d\u7f6e\uff0c\u7b49\u5f85A\u64ad\u653e\u5b8c\u6210\uff0c\u518d\u4f9d\u6b21\u4ece\u961f\u5217\u4e2d\u6309\u7167\u4f18\u5148\u7ea7\u4ece\u9ad8\u5230\u4f4e\u64ad\u653e\u5176\u4ed6\u4efb\u52a1\uff1b \u5982\u679c\u5f53\u524d\u6b63\u5728\u64ad\u653e\u4efb\u52a1A\uff0c\u4e14\u4e0d\u5141\u8bb8\u88ab\u6253\u65ad\uff0c\u6b64\u65f6\u6765\u4e86\u4e00\u4e2a\u540c\u4f18\u5148\u7ea7\u64ad\u653e\u4efb\u52a1B\uff0c\u90a3\u4e48B\u4f1a\u88ab\u52a0\u5165\u5230\u8be5\u4f18\u5148\u7ea7\u7ec4\u64ad\u653e\u961f\u5217\u961f\u5c3e\uff0c\u7b49\u5f85A\u64ad\u653e\u5b8c\u6210\uff0c\u518d\u4f9d\u6b21\u4ece\u961f\u5217\u4e2d\u6309\u7167\u4f18\u5148\u7ea7\u4ece\u9ad8\u5230\u4f4e\u64ad\u653e\u5176\u4ed6\u4efb\u52a1\uff1b \u5982\u679c\u5f53\u524d\u6b63\u5728\u64ad\u653e\u4efb\u52a1A\uff0c\u4e14\u5141\u8bb8\u88ab\u6253\u65ad\uff0c\u6b64\u65f6\u6765\u4e86\u4e00\u4e2a\u540c\u4f18\u5148\u7ea7\u64ad\u653e\u4efb\u52a1B\uff0c\u90a3\u4e48\u4f1a\u6253\u65ad\u5f53\u524d\u64ad\u653e\u4efb\u52a1A\uff0c\u76f4\u63a5\u64ad\u653e\u4efb\u52a1B\uff1b \u5982\u679c\u5f53\u524d\u6b63\u5728\u64ad\u653e\u4efb\u52a1A\uff0c\u4e14\u4efb\u52a1A\u7684\u4f18\u5148\u7ea7\u7ec4\u64ad\u653e\u961f\u5217\u4e2d\u5df2\u7ecf\u6709\u51e0\u4e2a\u64ad\u653e\u4efb\u52a1\u5b58\u5728\uff0c\u4e14\u8be5\u4f18\u5148\u7ea7\u7ec4\u64ad\u653e\u961f\u5217\u6700\u540e\u4e00\u4e2a\u4efb\u52a1N\u662f\u5141\u8bb8\u88ab\u6253\u65ad\u7684\uff0c\u6b64\u65f6\u5982\u679c\u6765\u4e86\u4e00\u4e2a\u540c\u6837\u4f18\u5148\u7ea7\u7684\u64ad\u653e\u4efb\u52a1B\uff0c\u90a3\u4e48\u4efb\u52a1B\u4f1a\u76f4\u63a5\u8986\u76d6\u6389\u4efb\u52a1N\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u67d0\u4e2a\u4f18\u5148\u7ea7\u7ec4\uff0c\u53ea\u6709\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u662f\u5141\u8bb8\u88ab\u6253\u65ad\u7684\uff0c\u5373breakin\u4e3a1\uff0c\u5176\u4ed6\u4efb\u52a1\u90fd\u662f\u4e0d\u5141\u8bb8\u88ab\u6253\u65ad\u7684\uff1b \u5982\u679c\u5f53\u524d\u6b63\u5728\u64ad\u653e\u4efb\u52a1A\uff0c\u4e0d\u7ba1\u4efb\u52a1A\u662f\u5426\u5141\u8bb8\u88ab\u6253\u65ad\uff0c\u6b64\u65f6\u6765\u4e86\u4e00\u4e2a\u4f18\u5148\u7ea7\u4f4e\u4e8e\u4efb\u52a1A\u7684\u8bf7\u6c42B\uff0c\u90a3\u4e48\u5c06B\u52a0\u5165\u5230B\u5bf9\u5e94\u4f18\u5148\u7ea7\u7ec4\u64ad\u653e\u961f\u5217\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e priority int \u64ad\u653e\u4f18\u5148\u7ea7\uff0c\u652f\u6301\u4f18\u5148\u7ea70~4\uff0c\u6570\u503c\u8d8a\u5927\u4f18\u5148\u7ea7\u8d8a\u9ad8 breakin int \u6253\u65ad\u6a21\u5f0f\uff0c0\u8868\u793a\u4e0d\u5141\u8bb8\u88ab\u6253\u65ad\uff0c1\u8868\u793a\u5141\u8bb8\u88ab\u6253\u65ad mode int \u7f16\u7801\u6a21\u5f0f\uff0c1 - UNICODE16(Size end conversion)\uff0c2 - UTF-8\uff0c3 - UNICODE16(Don't convert) str string \u5f85\u64ad\u653e\u5b57\u7b26\u4e32 \u8fd4\u56de\u503c \u64ad\u653e\u6210\u529f\u8fd4\u56de\u6574\u578b0\uff1b \u64ad\u653e\u5931\u8d25\u8fd4\u56de\u6574\u578b-1\uff1b \u65e0\u6cd5\u7acb\u5373\u64ad\u653e\uff0c\u52a0\u5165\u64ad\u653e\u961f\u5217\uff0c\u8fd4\u56de\u6574\u578b1\uff1b \u65e0\u6cd5\u7acb\u5373\u64ad\u653e\uff0c\u4e14\u8be5\u8bf7\u6c42\u7684\u4f18\u5148\u7ea7\u7ec4\u961f\u5217\u4efb\u52a1\u5df2\u8fbe\u4e0a\u9650\uff0c\u65e0\u6cd5\u52a0\u5165\u64ad\u653e\u961f\u5217\uff0c\u8fd4\u56de\u6574\u578b-2\u3002 \u793a\u4f8b >>> import audio >>> tts = audio.TTS(1) #\u6b63\u5728\u64ad\u653e\u4efb\u52a1A\uff0c\u4e14A\u5141\u8bb8\u88ab\u6253\u65ad\uff0c\u6b64\u65f6\u6765\u4e86\u4efb\u52a1B\uff0c\u4e14\u4f18\u5148\u7ea7\u9ad8\u4e8e\u4efb\u52a1A\uff0c\u90a3\u4e48A\u4f1a\u88ab#\u6253\u65ad\uff0c\u76f4\u63a5\u64ad\u653eB >>> tts.play(1, 1, 2, '1111111111111111') #\u4efb\u52a1A 0 >>> tts.play(2, 0, 2, '2222222222222222') #\u4efb\u52a1B 0 #\u6b63\u5728\u64ad\u653e\u4efb\u52a1A\uff0c\u4e14A\u4e0d\u5141\u8bb8\u88ab\u6253\u65ad\uff0c\u6b64\u65f6\u6765\u4e86\u4efb\u52a1B\uff0c\u4e14\u4f18\u5148\u7ea7\u9ad8\u4e8e\u4efb\u52a1A\uff0c\u90a3\u4e48B\u4f1a#\u88ab\u52a0\u5165\u64ad\u653e\u961f\u5217\uff0c\u7b49\u5f85A\u64ad\u653e\u5b8c\u6210\u64ad\u653eB\uff08\u5047\u8bbe\u64ad\u653e\u961f\u5217\u4e4b\u524d\u4e3a\u7a7a\uff09 >>> tts.play(1, 0, 2, '1111111111111111') #\u4efb\u52a1A 0 >>> tts.play(2, 0, 2, '2222222222222222') #\u4efb\u52a1B 1 #\u6b63\u5728\u64ad\u653e\u4efb\u52a1A\uff0c\u4e14A\u5141\u8bb8\u88ab\u6253\u65ad\uff0c\u6b64\u65f6\u6765\u4e86\u4efb\u52a1B\uff0c\u4e14\u4f18\u5148\u7ea7\u548cA\u4f18\u5148\u7ea7\u4e00\u6837\uff0c\u90a3\u4e48A #\u4f1a\u88ab\u6253\u65ad\uff0c\u76f4\u63a5\u64ad\u653eB >>> tts.play(2, 1, 2, '2222222222222222222') #\u4efb\u52a1A 0 >>> tts.play(2, 0, 2, '3333333333333333333') #\u4efb\u52a1B 0 #\u6b63\u5728\u64ad\u653e\u4efb\u52a1A\uff0c\u4e14A\u4e0d\u5141\u8bb8\u88ab\u6253\u65ad\uff0c\u6b64\u65f6\u6765\u4e86\u4efb\u52a1B\uff0c\u4e14\u4f18\u5148\u7ea7\u548cA\u4f18\u5148\u7ea7\u4e00\u6837\uff0c\u90a3\u4e48#B\u4f1a\u88ab\u52a0\u5165\u64ad\u653e\u961f\u5217\uff0c\u7b49\u5f85A\u64ad\u653e\u5b8c\u6210\u64ad\u653eB\uff08\u5047\u8bbe\u64ad\u653e\u961f\u5217\u4e4b\u524d\u4e3a\u7a7a\uff09 >>> tts.play(2, 0, 2, '2222222222222222222') #\u4efb\u52a1A 0 >>> tts.play(2, 0, 2, '3333333333333333333') #\u4efb\u52a1B 1 #\u6b63\u5728\u64ad\u653eA\uff0c\u4e14A\u4e0d\u5141\u8bb8\u88ab\u6253\u65ad\uff0c\u6b64\u65f6\u6765\u4e86\u4efb\u52a1B\uff0c\u4e14\u4efb\u52a1B\u5141\u8bb8\u88ab\u6253\u65ad\uff0c\u4f18\u5148\u7ea7\u4e0eA\u76f8\u540c\uff0c\u90a3\u4e48\u4efb\u52a1B\u4f1a\u88ab\u52a0\u5165\u5230\u64ad\u653e\u961f\u5217\u4e2d\uff0c\u6b64\u65f6\u53c8\u6765\u4e86\u4e00\u4e2a\u4efb\u52a1C\uff0c\u4e14\u4f18\u5148\u7ea7\u548cA\u3001B\u76f8\u540c\uff0c\u90a3\u4e48C\u4f1a\u88ab\u52a0\u5165\u64ad\u653e\u961f\u5217\u4e2d\uff0c\u4e14\u76f4\u63a5\u8986\u76d6\u7387\u4efb\u52a1B\uff0c\u6240\u4ee5A\u64ad\u653e\u5b8c\u6210\u4e0b\u4e00\u4e2a\u64ad\u653e\u7684\u662fC\uff08\u5047\u8bbe\u64ad\u653e\u961f\u5217\u4e4b\u524d\u4e3a\u7a7a\uff09 >>> tts.play(2, 0, 2, '2222222222222222222') #\u4efb\u52a1A 0 >>> tts.play(2, 1, 2, '3333333333333333333') #\u4efb\u52a1B 1 >>> tts.play(2, 0, 2, '4444444444444444444') #\u4efb\u52a1C 1 tts\u64ad\u653e\u4e2d\u6587\u793a\u4f8b\uff1a \u6ce8\u610f\uff0cpython\u6587\u4ef6\u5f00\u5934\u9700\u8981\u52a0\u4e0a\u201c# - - coding: UTF-8 - -\u201d\uff0c\u5982\u679c\u64ad\u653e\u7684\u4e2d\u6587\u4e2d\u6709\u6807\u70b9\u7b26\u53f7\uff0c\u8981\u7528\u82f1\u6587\u7684\u6807\u70b9\u7b26\u53f7\u3002 # -*- coding: UTF-8 -*- import audio tts = audio.TTS(1) str1 = '\u79fb\u8054\u4e07\u7269,\u5fd7\u9ad8\u884c\u8fdc' #\u8fd9\u91cc\u7684\u9017\u53f7\u662f\u82f1\u6587\u7684\u9017\u53f7 tts.play(4, 0, 2, str1) tts.setCallback(usrFun) \u6ce8\u518c\u7528\u6237\u7684\u56de\u8c03\u51fd\u6570\uff0c\u7528\u4e8e\u901a\u77e5\u7528\u6237TTS\u64ad\u653e\u72b6\u6001\u3002\u6ce8\u610f\uff0c\u8be5\u56de\u8c03\u51fd\u6570\u4e2d\u4e0d\u8981\u8fdb\u884c\u8017\u65f6\u4ee5\u53ca\u963b\u585e\u6027\u7684\u64cd\u4f5c\uff0c\u5efa\u8bae\u53ea\u8fdb\u884c\u7b80\u5355\u3001\u8017\u65f6\u77ed\u7684\u64cd\u4f5c\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e usrFun function \u7528\u6237\u56de\u8c03\u51fd\u6570\uff0c\u51fd\u6570\u5f62\u5f0f\u89c1\u793a\u4f8b \u8fd4\u56de\u503c \u6ce8\u518c\u6210\u529f\u8fd4\u56de\u6574\u578b0\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b-1\u3002 \u793a\u4f8b import audio def tts_cb(event): if event == 2: print('TTS-play start.') elif event == 4: print('TTS-play finish.') tts = audio.TTS(1) tts.setCallback(tts_cb) tts.play(1, 0, 2, 'QuecPython') \u5173\u4e8eTTS\u64ad\u653e\u56de\u8c03\u51fd\u6570\u53c2\u6570event\u7684\u51e0\u79cd\u72b6\u6001\u503c\u8bf4\u660e\uff1a event \u8868\u793a\u72b6\u6001 2 \u5f00\u59cb\u64ad\u653e 3 \u505c\u6b62\u64ad\u653e 4 \u64ad\u653e\u5b8c\u6210 5 \u64ad\u653e\u5931\u8d25 tts.getVolume() \u83b7\u53d6\u5f53\u524d\u64ad\u653e\u97f3\u91cf\u5927\u5c0f\uff0c\u97f3\u91cf\u503c\u4e3a0~9\uff0c0\u8868\u793a\u9759\u97f3\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u6574\u578b\u97f3\u91cf\u5927\u5c0f\u503c\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b-1\u3002 \u793a\u4f8b >>> tts.getVolume() 4 tts.setVolume(vol) \u8bbe\u7f6e\u64ad\u653e\u97f3\u91cf\u5927\u5c0f\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e vol int \u97f3\u91cf\u503c\uff0c\u97f3\u91cf\u503c\u4e3a0~9\uff0c0\u8868\u793a\u9759\u97f3 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u6574\u578b\u97f3\u91cf\u503c\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b-1\u3002 \u793a\u4f8b >>> tts.setVolume(6) 0 tts.getSpeed() \u83b7\u53d6\u5f53\u524d\u64ad\u653e\u901f\u5ea6\uff0c\u901f\u5ea6\u503c\u4e3a0~9\uff0c\u503c\u8d8a\u5927\uff0c\u901f\u5ea6\u8d8a\u5feb\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u5f53\u524d\u64ad\u653e\u901f\u5ea6\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b-1\u3002 \u793a\u4f8b >>> tts.getSpeed() 4 tts.setSpeed(speed) \u8bbe\u7f6eTTS\u64ad\u653e\u901f\u5ea6\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e speed int \u901f\u5ea6\u503c\uff0c\u901f\u5ea6\u503c\u4e3a0~9\uff0c\u503c\u8d8a\u5927\uff0c\u901f\u5ea6\u8d8a\u5feb \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u6574\u578b0\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b-1\u3002 \u793a\u4f8b >>> tts.setSpeed(6) 0 tts.getState() \u83b7\u53d6tts\u72b6\u6001\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c 0 \u2013 \u6574\u578b\u503c\uff0c\u8868\u793a\u5f53\u524d\u65e0tts\u64ad\u653e\uff1b 1 \u2013 \u6574\u578b\u503c\uff0c\u8868\u793a\u5f53\u524d\u6709tts\u6b63\u5728\u64ad\u653e\u3002 \u793a\u4f8b >>> tts1 = audio.TTS(1) >>> tts1.getState() 0 >>> tts1.play(1, 0, 2, '8787878787878787') 0 >>> tts1.getState() #\u5728\u4e0a\u9762tts\u64ad\u653e\u8fc7\u7a0b\u4e2d\u6267\u884c\u8fd9\u53e5 1 tts.stop() \u505c\u6b62TTS\u64ad\u653e\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u6574\u578b0\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b-1\u3002 Audio \u521b\u5efa\u4e00\u4e2a\u5bf9\u8c61 import audio aud = audio.Audio(device) \u53c2\u6570 device \uff1a\u8bbe\u5907\u7c7b\u578b\uff0c0 - \u8bdd\u7b52\uff0c1 - \u8033\u673a\uff0c2 - \u5587\u53ed\u3002 \u793a\u4f8b >>> import audio >>> aud = audio.Audio(1) aud.play(priority, breakin, filename) \u97f3\u9891\u6587\u4ef6\u64ad\u653e\uff0c\u652f\u6301mp3\u548camr\u6587\u4ef6\u64ad\u653e\u3002\u652f\u6301\u4f18\u5148\u7ea70~4\uff0c\u6570\u5b57\u8d8a\u5927\u4f18\u5148\u7ea7\u8d8a\u9ad8\uff0c\u6bcf\u4e2a\u4f18\u5148\u7ea7\u7ec4\u53ef\u540c\u65f6\u6700\u591a\u52a0\u516510\u4e2a\u64ad\u653e\u4efb\u52a1\uff0c\u4e0eTTS\u64ad\u653e\u5171\u7528\u540c\u4e00\u4e2a\u64ad\u653e\u961f\u5217\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e priority int \u64ad\u653e\u4f18\u5148\u7ea7\uff0c\u652f\u6301\u4f18\u5148\u7ea70~4\uff0c\u6570\u503c\u8d8a\u5927\u4f18\u5148\u7ea7\u8d8a\u9ad8 breakin int \u6253\u65ad\u6a21\u5f0f\uff0c0\u8868\u793a\u4e0d\u5141\u8bb8\u88ab\u6253\u65ad\uff0c1\u8868\u793a\u5141\u8bb8\u88ab\u6253\u65ad filename string \u5f85\u64ad\u653e\u7684\u6587\u4ef6\u540d\u79f0\uff0c\u5305\u542b\u6587\u4ef6\u5b58\u653e\u8def\u5f84 \u8fd4\u56de\u503c \u64ad\u653e\u6210\u529f\u8fd4\u56de\u6574\u578b0\uff1b \u64ad\u653e\u5931\u8d25\u8fd4\u56de\u6574\u578b-1\uff1b \u65e0\u6cd5\u7acb\u5373\u64ad\u653e\uff0c\u52a0\u5165\u64ad\u653e\u961f\u5217\uff0c\u8fd4\u56de\u6574\u578b1\uff1b \u65e0\u6cd5\u7acb\u5373\u64ad\u653e\uff0c\u4e14\u8be5\u8bf7\u6c42\u7684\u4f18\u5148\u7ea7\u7ec4\u961f\u5217\u4efb\u52a1\u5df2\u8fbe\u4e0a\u9650\uff0c\u65e0\u6cd5\u52a0\u5165\u64ad\u653e\u961f\u5217\uff0c\u8fd4\u56de\u6574\u578b-2\u3002 \u793a\u4f8b >>> import audio >>> a = audio.Audio(1) >>> a.play(2, 1, 'U:/music.mp3') #\u6587\u4ef6\u540d\u524d\u9762\u8981\u52a0\u4e0a\u8def\u5f84 0 \u5173\u4e8e\u6587\u4ef6\u64ad\u653e\u8def\u5f84\u7684\u8bf4\u660e\uff1a \u7528\u6237\u5206\u533a\u8def\u5f84\u56fa\u5b9a\u4e3a\u2019U:/\u2018\u5f00\u5934\uff0c\u8868\u793a\u7528\u6237\u5206\u533a\u7684\u6839\u76ee\u5f55\uff0c\u5982\u679c\u7528\u6237\u5728\u6839\u76ee\u5f55\u4e0b\u65b0\u5efaaudio\u76ee\u5f55\uff0c\u5e76\u5c06\u97f3\u9891\u6587\u4ef6\u5b58\u653e\u5728\u6839\u76ee\u5f55\u4e0b\u7684audio\u76ee\u5f55\uff0c\u90a3\u4e48\u64ad\u653e\u63a5\u53e3\u4e2d\uff0c\u4f20\u5165\u7684\u8def\u5f84\u53c2\u6570\u5e94\u8be5\u662f\uff1a'U:/audio/music.mp3'\u3002 \u8bf4\u660e \u7531\u4e8eTTS\u548c\u97f3\u9891\u6587\u4ef6\u64ad\u653e\u5171\u7528\u540c\u4e00\u4e2a\u64ad\u653e\u961f\u5217\uff0c\u6240\u4ee5TTS\u4e2d\u8bbe\u7f6e\u7684\u64ad\u653e\u4f18\u5148\u7ea7\u3001\u6253\u65ad\u6a21\u5f0f\u4e0d\u4ec5\u4ec5\u662f\u548c\u5176\u4ed6TTS\u64ad\u653e\u4efb\u52a1\u6bd4\u8f83\uff0c\u8fd8\u4f1a\u548c\u97f3\u9891\u6587\u4ef6\u64ad\u653e\u4efb\u52a1\u7684\u4f18\u5148\u7ea7\u548c\u6253\u65ad\u6a21\u5f0f\u6bd4\u8f83\uff0c\u53cd\u4e4b\uff0c\u97f3\u9891\u6587\u4ef6\u64ad\u653e\u4e2d\u8bbe\u7f6e\u7684\u64ad\u653e\u4f18\u5148\u7ea7\u4e0e\u6253\u65ad\u6a21\u5f0f\u5bf9TTS\u4efb\u52a1\u540c\u6837\u662f\u6709\u6548\u7684\u3002 aud.stop() \u505c\u6b62\u97f3\u9891\u6587\u4ef6\u64ad\u653e\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u6574\u578b0\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b-1\u3002 aud.setCallback(usrFun) \u6ce8\u518c\u7528\u6237\u7684\u56de\u8c03\u51fd\u6570\uff0c\u7528\u4e8e\u901a\u77e5\u7528\u6237\u97f3\u9891\u6587\u4ef6\u64ad\u653e\u72b6\u6001\u3002\u6ce8\u610f\uff0c\u8be5\u56de\u8c03\u51fd\u6570\u4e2d\u4e0d\u8981\u8fdb\u884c\u8017\u65f6\u4ee5\u53ca\u963b\u585e\u6027\u7684\u64cd\u4f5c\uff0c\u5efa\u8bae\u53ea\u8fdb\u884c\u7b80\u5355\u3001\u8017\u65f6\u77ed\u7684\u64cd\u4f5c\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e usrFun function \u7528\u6237\u56de\u8c03\u51fd\u6570\uff0c\u51fd\u6570\u5f62\u5f0f\u89c1\u793a\u4f8b \u8fd4\u56de\u503c \u6ce8\u518c\u6210\u529f\u8fd4\u56de\u6574\u578b0\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b-1\u3002 \u793a\u4f8b import audio def audio_cb(event): if event == 0: print('audio-play start.') elif event == 7: print('audio-play finish.') aud = audio.Audio(1) aud.setCallback(audio_cb) aud.play(1, 0, 'U:/test.mp3') \u5173\u4e8eaudio\u64ad\u653e\u56de\u8c03\u51fd\u6570\u53c2\u6570event\u7684\u51e0\u79cd\u72b6\u6001\u503c\u8bf4\u660e\uff1a event \u8868\u793a\u72b6\u6001 -1 \u64ad\u653e\u9519\u8bef 0 \u5f00\u59cb\u64ad\u653e 7 \u64ad\u653e\u5b8c\u6210 aud.getState() \u83b7\u53d6audio\u521d\u59cb\u5316\u72b6\u6001\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c audio\u521d\u59cb\u5316\u672a\u5b8c\u6210\u8fd4\u56de\u6574\u578b\u503c-1\uff0c\u521d\u59cb\u5316\u5b8c\u6210\u8fd4\u56de\u6574\u578b\u503c0\u3002 aud.getVolume() \u83b7\u53d6audio\u97f3\u91cf\u5927\u5c0f\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u8fd4\u56de\u6574\u578b\u97f3\u91cf\u503c\u3002 aud.setVolume(vol) \u8bbe\u7f6eaudio\u97f3\u91cf\u5927\u5c0f\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e vol int \u97f3\u91cf\u7b49\u7ea7\uff0c\u8303\u56f4\uff081~11\uff09\uff0c\u6570\u503c\u8d8a\u5927\uff0c\u97f3\u91cf\u8d8a\u5927 \u8fd4\u56de\u503c \u8bbe\u7f6e\u6210\u529f\u8fd4\u56de\u6574\u578b0\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b-1\u3002 \u793a\u4f8b >>> aud.setVolume(6) 0 >>> aud.getVolume() 6 misc - \u5176\u4ed6 \u6a21\u5757\u529f\u80fd\uff1a\u63d0\u4f9b\u5173\u673a\u3001\u8f6f\u4ef6\u91cd\u542f\u3001PWM\u4ee5\u53caADC\u76f8\u5173\u529f\u80fd\u3002 Power \u5173\u673a\u4ee5\u53ca\u8f6f\u4ef6\u91cd\u542f\u3002 \u4f7f\u7528\u524d\u5bfc\u5165\u8be5\u7c7b\uff1afrom misc import Power Power.powerDown() \u6a21\u5757\u5173\u673a\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u65e0 Power.powerRestart() \u6a21\u5757\u91cd\u542f\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u65e0 Power. powerOnReason() \u83b7\u53d6\u6a21\u5757\u542f\u52a8\u539f\u56e0\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u8fd4\u56deint\u6570\u503c\uff0c\u89e3\u91ca\u5982\u4e0b\uff1a 1\uff1a\u6b63\u5e38\u7535\u6e90\u5f00\u673a 2\uff1a\u91cd\u542f 3\uff1aVBAT 4\uff1aRTC\u5b9a\u65f6\u5f00\u673a 5\uff1aFault 6\uff1aVBUS 0\uff1a\u672a\u77e5 Power. powerDownReason() \u83b7\u53d6\u6a21\u5757\u4e0a\u6b21\u5173\u673a\u539f\u56e0\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c 1\uff1a\u6b63\u5e38\u7535\u6e90\u5173\u673a 2\uff1a\u7535\u538b\u8fc7\u9ad8 3\uff1a\u7535\u538b\u504f\u4f4e 4\uff1a\u8d85\u6e29 5\uff1aWDT 6\uff1aVRTC \u504f\u4f4e 0\uff1a\u672a\u77e5 Power. getVbatt() \u83b7\u53d6\u7535\u6c60\u7535\u538b\uff0c\u5355\u4f4dmV\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c int\u7c7b\u578b\u7535\u538b\u503c\u3002 \u793a\u4f8b >>> Power.getVbatt() 3590 PWM \u5e38\u91cf\u8bf4\u660e \u5e38\u91cf \u8bf4\u660e PWM.PWM0 PWM0 PWM.PWM1 PWM1 PWM.PWM2 PWM2 PWM.PWM3 PWM3 PWM.PWM4 PWM4 PWM.PWM5 PWM5 \u521b\u5efa\u4e00\u4e2apwm\u5bf9\u8c61 from misc import PWM pwm = PWM(PWM.PWMn, highTime, cycleTime) \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e PWMn int PWM\u53f7 \u6ce8\uff1aEC100YCN\u5e73\u53f0\uff0c\u652f\u6301PWM0-PWM5\uff0c\u5bf9\u5e94\u5f15\u811a\u5982\u4e0b\uff1a PWM0 \u2013 \u5f15\u811a\u53f719 PWM1 \u2013 \u5f15\u811a\u53f718 PWM2 \u2013 \u5f15\u811a\u53f716 PWM3 \u2013 \u5f15\u811a\u53f717 PWM4 \u2013 \u5f15\u811a\u53f723 PWM5 \u2013 \u5f15\u811a\u53f722 \u6ce8\uff1aEC600SCN\u5e73\u53f0\uff0c\u652f\u6301PWM0-PWM5\uff0c\u5bf9\u5e94\u5f15\u811a\u5982\u4e0b\uff1a PWM0 \u2013 \u5f15\u811a\u53f752 PWM1 \u2013 \u5f15\u811a\u53f753 PWM2 \u2013 \u5f15\u811a\u53f757 PWM3 \u2013 \u5f15\u811a\u53f756 PWM4 \u2013 \u5f15\u811a\u53f770 PWM5 \u2013 \u5f15\u811a\u53f769 highTime int \u9ad8\u7535\u5e73\u65f6\u95f4\uff0c\u5355\u4f4dms cycleTime int pwm\u4e00\u4e2a\u5468\u671f\u65f6\u95f4\uff0c\u5355\u4f4dms \u793a\u4f8b >>> from misc import PWM >>> pwm4 = PWM(PWM.PWM4, 100, 200) pwm.open() \u5f00\u542fPWM\u8f93\u51fa\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u6574\u578b0\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b-1\u3002 pwm.close() \u5173\u95edPWM\u8f93\u51fa\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u6574\u578b0\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b-1\u3002 ADC \u5e38\u91cf\u8bf4\u660e \u5e38\u91cf \u8bf4\u660e ADC.ADC0 ADC\u901a\u90530 ADC.ADC1 ADC\u901a\u90531 \u521b\u5efa\u4e00\u4e2aADC\u5bf9\u8c61 from misc import ADC adc = ADC() \u793a\u4f8b >>> from misc import ADC >>> adc = ADC() adc.open() ADC\u529f\u80fd\u521d\u59cb\u5316\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u6574\u578b0\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b-1\u3002 adc.read(ADCn) \u8bfb\u53d6\u6307\u5b9a\u901a\u9053\u7684\u7535\u538b\u503c\uff0c\u5355\u4f4dmV\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e ADCn int ADC\u901a\u9053 \u6ce8\uff1aEC100YCN\u5e73\u53f0\u652f\u6301ADC0\uff0cADC1\uff0c\u5bf9\u5e94\u5f15\u811a\u5982\u4e0b ADC0 \u2013 \u5f15\u811a\u53f739 ADC1 \u2013 \u5f15\u811a\u53f781 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u6307\u5b9a\u901a\u9053\u7535\u538b\u503c\uff0c\u9519\u8bef\u8fd4\u56de\u6574\u578b-1\u3002 \u793a\u4f8b >>>adc.read(ADC.ADC0) #\u8bfb\u53d6ADC\u901a\u90530\u7535\u538b\u503c 613 >>>adc.read(ADC.ADC1) #\u8bfb\u53d6ADC\u901a\u90531\u7535\u538b\u503c 605 adc.close() \u5173\u95edADC\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c 0\u5173\u95ed\u6210\u529f\uff0c-1\u5173\u95ed\u5931\u8d25\u3002 modem - \u8bbe\u5907\u76f8\u5173 \u6a21\u5757\u529f\u80fd\uff1a\u8bbe\u5907\u4fe1\u606f\u83b7\u53d6\u3002 modem.getDevImei() \u83b7\u53d6\u8bbe\u5907\u7684IMEI\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56destring\u7c7b\u578b\u8bbe\u5907\u7684IMEI\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\u3002 \u793a\u4f8b >>> import modem >>> modem.getDevImei() '866327040830317' modem.getDevModel() \u83b7\u53d6\u8bbe\u5907\u578b\u53f7\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56destring\u7c7b\u578b\u8bbe\u5907\u578b\u53f7\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\u3002 \u793a\u4f8b >>> modem.getDevModel() 'EC100Y' modem.getDevSN() \u83b7\u53d6\u8bbe\u5907\u5e8f\u5217\u53f7\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56destring\u7c7b\u578b\u8bbe\u5907\u5e8f\u5217\u53f7\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\u3002 \u793a\u4f8b >>> modem.getDevSN() 'D1Q20GM050038341P' modem.getDevFwVersion() \u83b7\u53d6\u8bbe\u5907\u56fa\u4ef6\u7248\u672c\u53f7\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56destring\u7c7b\u578b\u56fa\u4ef6\u7248\u672c\u53f7\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\u3002 \u793a\u4f8b >>> modem.getDevFwVersion() 'EC100YCNAAR01A01M16_OCPU_PY' modem.getDevProductId() \u83b7\u53d6\u8bbe\u5907\u7684\u5236\u9020\u5546ID\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u8bbe\u5907\u5236\u9020\u5546ID\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\u3002 \u793a\u4f8b >>> modem.getDevProductId() 'Quectel' machine - \u786c\u4ef6\u76f8\u5173\u529f\u80fd \u6a21\u5757\u529f\u80fd: \u5305\u542b\u4e0e\u7279\u5b9a\u7535\u8def\u677f\u4e0a\u7684\u786c\u4ef6\u76f8\u5173\u7684\u7279\u5b9a\u529f\u80fd\u3002\u8be5\u6a21\u5757\u4e2d\u7684\u5927\u591a\u6570\u529f\u80fd\u5141\u8bb8\u76f4\u63a5\u548c\u4e0d\u53d7\u9650\u5236\u5730\u8bbf\u95ee\u548c\u63a7\u5236\u7cfb\u7edf\u4e0a\u7684\u786c\u4ef6\u3002 Pin \u7c7b\u529f\u80fd\uff1aGPIO\u8bfb\u5199\u64cd\u4f5c\u3002 \u5e38\u91cf\u8bf4\u660e \u5e38\u91cf \u8bf4\u660e Pin.GPIO1\uff08EC600S / EC100Y\uff09 GPIO1 Pin.GPIO2\uff08EC600S / EC100Y\uff09 GPIO2 Pin.GPIO3\uff08EC600S / EC100Y\uff09 GPIO3 Pin.GPIO4\uff08EC600S / EC100Y\uff09 GPIO4 Pin.GPIO5\uff08EC600S / EC100Y\uff09 GPIO5 Pin.GPIO6\uff08EC600S\uff09 GPIO6 Pin.GPIO7\uff08EC600S\uff09 GPIO7 Pin.GPIO8\uff08EC600S\uff09 GPIO8 Pin.GPIO9\uff08EC600S\uff09 GPIO9 Pin.GPIO10\uff08EC600S\uff09 GPIO10 Pin.IN \u8f93\u5165\u6a21\u5f0f Pin.OUT \u8f93\u51fa\u6a21\u5f0f Pin.PULL_DISABLE \u6d6e\u7a7a\u6a21\u5f0f Pin.PULL_PU \u4e0a\u62c9\u6a21\u5f0f Pin.PULL_PD \u4e0b\u62c9\u6a21\u5f0f \u521b\u5efagpio\u5bf9\u8c61 gpio = Pin(GPIOn, direction, pullMode, level) \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e GPIOn int \u5f15\u811a\u53f7 EC100YCN\u5e73\u53f0\u5f15\u811a\u5bf9\u5e94\u5173\u7cfb\u5982\u4e0b\uff1a GPIO1 \u2013 \u5f15\u811a\u53f722 GPIO2 \u2013 \u5f15\u811a\u53f723 GPIO3 \u2013 \u5f15\u811a\u53f7178 GPIO4 \u2013 \u5f15\u811a\u53f7199 GPIO5 \u2013 \u5f15\u811a\u53f7204 EC600SCN\u5e73\u53f0\u5f15\u811a\u5bf9\u5e94\u5173\u7cfb\u5982\u4e0b\uff1a GPIO1 \u2013 \u5f15\u811a\u53f710 GPIO2 \u2013 \u5f15\u811a\u53f711 GPIO3 \u2013 \u5f15\u811a\u53f712 GPIO4 \u2013 \u5f15\u811a\u53f713 GPIO5 \u2013 \u5f15\u811a\u53f714 GPIO6 \u2013 \u5f15\u811a\u53f715 GPIO7 \u2013 \u5f15\u811a\u53f716 GPIO8 \u2013 \u5f15\u811a\u53f739 GPIO9 \u2013 \u5f15\u811a\u53f740 GPIO10 \u2013 \u5f15\u811a\u53f748 direction int IN \u2013 \u8f93\u5165\u6a21\u5f0f\uff0cOUT \u2013 \u8f93\u51fa\u6a21\u5f0f pullMode int PULL_DISABLE \u2013 \u6d6e\u7a7a\u6a21\u5f0f PULL_PU \u2013 \u4e0a\u62c9\u6a21\u5f0f PULL_PD \u2013 \u4e0b\u62c9\u6a21\u5f0f level int 0 - \u8bbe\u7f6e\u5f15\u811a\u4e3a\u4f4e\u7535\u5e73, 1- \u8bbe\u7f6e\u5f15\u811a\u4e3a\u9ad8\u7535\u5e73 \u793a\u4f8b from machine import Pin gpio1 = Pin(Pin.GPIO1, Pin.OUT, Pin.PULL_DISABLE, 0) Pin.read() \u83b7\u53d6PIN\u811a\u7535\u5e73\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c PIN\u811a\u7535\u5e73\uff0c0-\u4f4e\u7535\u5e73\uff0c1-\u9ad8\u7535\u5e73\u3002 Pin.write(value) \u8bbe\u7f6ePIN\u811a\u7535\u5e73\u3002 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e value int 0 - \u5f53PIN\u811a\u4e3a\u8f93\u51fa\u6a21\u5f0f\u65f6\uff0c\u8bbe\u7f6e\u5f53\u524dPIN\u811a\u8f93\u51fa\u4f4e; 1 - \u5f53PIN\u811a\u4e3a\u8f93\u51fa\u6a21\u5f0f\u65f6\uff0c\u8bbe\u7f6e\u5f53\u524dPIN\u811a\u8f93\u51fa\u9ad8 \u8fd4\u56de\u503c \u8bbe\u7f6e\u6210\u529f\u8fd4\u56de\u6574\u578b\u503c0\uff0c\u8bbe\u7f6e\u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\u3002 \u793a\u4f8b >>> from machine import Pin >>> gpio1 = Pin(Pin.GPIO1, Pin.OUT, Pin.PULL_DISABLE, 0) >>> gpio1.write(1) 0 >>> gpio1.read() 1 UART \u7c7b\u529f\u80fd\uff1auart\u4e32\u53e3\u6570\u636e\u4f20\u8f93\u3002 \u5e38\u91cf\u8bf4\u660e \u5e38\u91cf \u8bf4\u660e UART.UART0 UART0 UART.UART1 UART1 UART.UART2 UART2 UART.UART3 UART3 \u521b\u5efauart\u5bf9\u8c61 uart = UART(UART.UARTn, buadrate, databits, parity, stopbits, flowctl) \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e UARTn int \u7aef\u53e3\u53f7 EC100YCN\u5e73\u53f0\u4e0eEC600SCN\u5e73\u53f0,UARTn\u4f5c\u7528\u5982\u4e0b\uff1a UART0 - DEBUG PORT UART1 \u2013 BT PORT UART2 \u2013 MAIN PORT UART3 \u2013 USB CDC PORT buadrate int \u6ce2\u7279\u7387\uff0c\u5e38\u7528\u6ce2\u7279\u7387\u90fd\u652f\u6301\uff0c\u59824800\u30019600\u300119200\u300138400\u300157600\u3001115200\u3001230400\u7b49 databits int \u6570\u636e\u4f4d\uff085~8\uff09 parity int \u5947\u5076\u6821\u9a8c\uff080 \u2013 NONE\uff0c1 \u2013 EVEN\uff0c2 - ODD\uff09 stopbits int \u505c\u6b62\u4f4d\uff081~2\uff09 flowctl int \u786c\u4ef6\u63a7\u5236\u6d41\uff080 \u2013 FC_NONE\uff0c 1 \u2013 FC_HW\uff09 \u793a\u4f8b >>> from machine import UART >>> uart1 = UART(UART.UART1, 115200, 8, 0, 1, 0) uart.any() \u8fd4\u56de\u63a5\u6536\u7f13\u5b58\u5668\u4e2d\u6709\u591a\u5c11\u5b57\u8282\u7684\u6570\u636e\u672a\u8bfb\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u8fd4\u56de\u63a5\u6536\u7f13\u5b58\u5668\u4e2d\u6709\u591a\u5c11\u5b57\u8282\u7684\u6570\u636e\u672a\u8bfb\u3002 \u793a\u4f8b >>> uart.any() 20 #\u8868\u793a\u63a5\u6536\u7f13\u51b2\u533a\u4e2d\u670920\u5b57\u8282\u6570\u636e\u672a\u8bfb uart.read(nbytes) \u4ece\u4e32\u53e3\u8bfb\u53d6\u6570\u636e\u3002 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e nbytes int \u8981\u8bfb\u53d6\u7684\u5b57\u8282\u6570 \u8fd4\u56de\u503c \u8fd4\u56de\u8bfb\u53d6\u7684\u6570\u636e\u3002 uart.write(data) \u53d1\u9001\u6570\u636e\u5230\u4e32\u53e3\u3002 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e data string \u53d1\u9001\u7684\u6570\u636e \u8fd4\u56de\u503c \u8fd4\u56de\u53d1\u9001\u7684\u5b57\u8282\u6570\u3002 uart.close() \u5173\u95ed\u4e32\u53e3\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u6574\u578b0\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b-1\u3002 UART\u4f7f\u7528\u793a\u4f8b >>> from machine import UART >>> uart1 = UART(UART.UART1, 115200, 8, 0, 1, 0) #\u4e32\u53e31 >>> uart1.any() 10 >>> uart1.read(5) b\u201912345\u2019 >>> uart1.any() 5 Timer \u7c7b\u529f\u80fd\uff1a\u786c\u4ef6\u5b9a\u65f6\u5668\u3002 \u5e38\u91cf\u8bf4\u660e \u5e38\u91cf \u8bf4\u660e Timer.Timer0 \u5b9a\u65f6\u56680 Timer.Timer1 \u5b9a\u65f6\u56681 Timer.Timer2 \u5b9a\u65f6\u56682 Timer.Timer3 \u5b9a\u65f6\u56683 Timer.ONE_SHOT \u5355\u6b21\u6a21\u5f0f\uff0c\u5b9a\u65f6\u5668\u53ea\u6267\u884c\u4e00\u6b21 Timer.PERIODIC \u5468\u671f\u6a21\u5f0f\uff0c\u5b9a\u65f6\u5668\u5faa\u73af\u6267\u884c \u521b\u5efaTimer\u5bf9\u8c61 timer = Timer(Timern) \u521b\u5efaTimer\u5bf9\u8c61\u3002 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e Timern int \u5b9a\u65f6\u5668\u53f7 EC100YCN\u652f\u6301\u5b9a\u65f6\u5668Timer0~Timer3 \u793a\u4f8b >>> from machine import Timer >>> timer1 = Timer(Timer.Timer1) timer.start(period, mode, callback) \u542f\u52a8\u5b9a\u65f6\u5668\u3002 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e period int \u4e2d\u65ad\u5468\u671f\uff0c\u5355\u4f4d\u6beb\u79d2 mode int \u8fd0\u884c\u6a21\u5f0f Timer.ONE_SHOT \u5355\u6b21\u6a21\u5f0f\uff0c\u5b9a\u65f6\u5668\u53ea\u6267\u884c\u4e00\u6b21 Timer.PERIODIC \u5468\u671f\u6a21\u5f0f\uff0c\u5faa\u73af\u6267\u884c callback function \u5b9a\u65f6\u5668\u6267\u884c\u51fd\u6570 \u8fd4\u56de\u503c \u542f\u52a8\u6210\u529f\u8fd4\u56de\u6574\u578b\u503c0\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\u3002 \u793a\u4f8b >>> def fun(args): print(\u201c###timer callback function###\u201d) >>> timer.start(period=1000, mode=timer.PERIODIC, callback=fun) 0 ###timer callback function### ###timer callback function### ###timer callback function### \u2026\u2026 timer.stop() \u5173\u95ed\u5b9a\u65f6\u5668\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u6574\u578b\u503c0\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\u3002 Timer\u4f7f\u7528\u793a\u4f8b from machine import Timer timer1 = Timer(Timer.Timer1) #\u5b9a\u65f6\u56681 def run(t): print(\"run count\") timer1.start(period=1000, mode=timer1.PERIODIC, callback=run) while 1: pass ExtInt \u7c7b\u529f\u80fd\uff1a\u7528\u4e8e\u914d\u7f6eI/O\u5f15\u811a\u5728\u53d1\u751f\u5916\u90e8\u4e8b\u4ef6\u65f6\u4e2d\u65ad\u3002 \u5e38\u91cf\u8bf4\u660e \u5e38\u91cf \u8bf4\u660e ExtInt.GPIO1\uff08EC600S / EC100Y\uff09 GPIO1 ExtInt.GPIO2\uff08EC600S / EC100Y\uff09 GPIO2 ExtInt.GPIO3\uff08EC600S / EC100Y\uff09 GPIO3 ExtInt.GPIO4\uff08EC600S / EC100Y\uff09 GPIO4 ExtInt.GPIO5\uff08EC600S / EC100Y\uff09 GPIO5 ExtInt.GPIO6\uff08EC600S\uff09 GPIO6 ExtInt.GPIO7\uff08EC600S\uff09 GPIO7 ExtInt.GPIO8\uff08EC600S\uff09 GPIO8 ExtInt.GPIO9\uff08EC600S\uff09 GPIO9 ExtInt.GPIO10\uff08EC600S\uff09 GPIO10 ExtInt.IRQ_RISING \u4e0a\u5347\u6cbf\u89e6\u53d1 ExtInt.IRQ_FALLING \u4e0b\u964d\u6cbf\u89e6\u53d1 ExtInt.IRQ_RISING_FALLING \u4e0a\u5347\u548c\u4e0b\u964d\u6cbf\u89e6\u53d1 ExtInt.PULL_DISABLE \u6d6e\u7a7a\u6a21\u5f0f ExtInt.PULL_PU \u4e0a\u62c9\u6a21\u5f0f ExtInt.PULL_PD \u4e0b\u62c9\u6a21\u5f0f \u521b\u5efaExtInt\u5bf9\u8c61 extint = ExtInt(GPIOn, mode, pull, callback) \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e GPIOn int \u5f15\u811a\u53f7 EC100YCN\u5e73\u53f0\u5f15\u811a\u5bf9\u5e94\u5173\u7cfb\u5982\u4e0b\uff1a GPIO1 \u2013 \u5f15\u811a\u53f722 GPIO2 \u2013 \u5f15\u811a\u53f723 GPIO3 \u2013 \u5f15\u811a\u53f7178 GPIO4 \u2013 \u5f15\u811a\u53f7199 GPIO5 \u2013 \u5f15\u811a\u53f7204 EC600SCN\u5e73\u53f0\u5f15\u811a\u5bf9\u5e94\u5173\u7cfb\u5982\u4e0b\uff1a GPIO1 \u2013 \u5f15\u811a\u53f710 GPIO2 \u2013 \u5f15\u811a\u53f711 GPIO3 \u2013 \u5f15\u811a\u53f712 GPIO4 \u2013 \u5f15\u811a\u53f713 GPIO5 \u2013 \u5f15\u811a\u53f714 GPIO6 \u2013 \u5f15\u811a\u53f715 GPIO7 \u2013 \u5f15\u811a\u53f716 GPIO8 \u2013 \u5f15\u811a\u53f739 GPIO9 \u2013 \u5f15\u811a\u53f740 GPIO10 \u2013 \u5f15\u811a\u53f748 mode int \u8bbe\u7f6e\u89e6\u53d1\u65b9\u5f0f IRQ_RISING \u2013 \u4e0a\u5347\u6cbf\u89e6\u53d1 IRQ_FALLING \u2013 \u4e0b\u964d\u6cbf\u89e6\u53d1 IRQ_RISING_FALLING \u2013 \u4e0a\u5347\u548c\u4e0b\u964d\u6cbf\u89e6\u53d1 pull int PULL_DISABLE \u2013 \u6d6e\u7a7a\u6a21\u5f0f PULL_PU \u2013 \u4e0a\u62c9\u6a21\u5f0f PULL_PD \u2013 \u4e0b\u62c9\u6a21\u5f0f callback function \u4e2d\u65ad\u89e6\u53d1\u56de\u8c03\u51fd\u6570 \u793a\u4f8b >>> from machine import ExtInt >>> def fun(args): print(\u201c###interrupt %d ###\u201d %args) >>> extint = ExtInt(ExtInt.GPIO1, ExtInt.IRQ_FALLING, ExtInt.PULL_PU, fun) extint.enable() \u4f7f\u80fdextint\u5bf9\u8c61\u5916\u90e8\u4e2d\u65ad\uff0c\u5f53\u4e2d\u65ad\u5f15\u811a\u6536\u5230\u4e0a\u5347\u6cbf\u6216\u8005\u4e0b\u964d\u6cbf\u4fe1\u53f7\u65f6\uff0c\u4f1a\u8c03\u7528callback\u6267\u884c \u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u4f7f\u80fd\u6210\u529f\u8fd4\u56de\u6574\u578b\u503c0\uff0c\u4f7f\u80fd\u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\u3002 extint.disable() \u7981\u7528\u4e0eextint\u5bf9\u8c61\u5173\u8054\u7684\u4e2d\u65ad \u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u4f7f\u80fd\u6210\u529f\u8fd4\u56de\u6574\u578b\u503c0\uff0c\u4f7f\u80fd\u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\u3002 extint.line() \u8fd4\u56de\u5f15\u811a\u6620\u5c04\u7684\u884c\u53f7\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u5f15\u811a\u6620\u5c04\u7684\u884c\u53f7\u3002 \u793a\u4f8b >>> extint = ExtInt(ExtInt.GPIO1, ExtInt.IRQ_FALLING, ExtInt.PULL_PU, fun) >>> ext.line() 32 RTC \u7c7b\u529f\u80fd\uff1a\u63d0\u4f9b\u83b7\u53d6\u8bbe\u7f6ertc\u65f6\u95f4\u65b9\u6cd5\u3002 \u521b\u5efaRTC\u5bf9\u8c61 from machine import RTC rtc = RTC() rtc.datetime([year, month, day, week, hour, minute, second, microsecond]) \u8bbe\u7f6e\u548c\u83b7\u53d6RTC\u65f6\u95f4\uff0c\u4e0d\u5e26\u53c2\u6570\u65f6\uff0c\u5219\u7528\u4e8e\u83b7\u53d6\u65f6\u95f4\uff0c\u5e26\u53c2\u6570\u5219\u662f\u8bbe\u7f6e\u65f6\u95f4\uff1b\u8bbe\u7f6e\u65f6\u95f4\u7684\u65f6\u5019\uff0c\u53c2\u6570week\u4e0d\u53c2\u4e8e\u8bbe\u7f6e\uff0cmicrosecond\u53c2\u6570\u4fdd\u7559\uff0c\u6682\u672a\u4f7f\u7528\uff0c\u9ed8\u8ba4\u662f0\u3002 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e year int \u5e74 month int \u6708 day int \u65e5 week int \u661f\u671f\uff0c\u8bbe\u7f6e\u65f6\u95f4\u65f6\uff0c\u8be5\u53c2\u6570\u4e0d\u8d77\u4f5c\u7528\uff0c\u4fdd\u7559\uff1b\u83b7\u53d6\u65f6\u95f4\u65f6\u8be5\u53c2\u6570\u6709\u6548 hour int \u65f6 minute int \u5206 second int \u79d2 microsecond int \u5fae\u79d2\uff0c\u4fdd\u7559\u53c2\u6570\uff0c\u6682\u672a\u4f7f\u7528\uff0c\u8bbe\u7f6e\u65f6\u95f4\u65f6\u8be5\u53c2\u6570\u51990\u5373\u53ef \u8fd4\u56de\u503c \u83b7\u53d6\u65f6\u95f4\u65f6\uff0c\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4\uff0c\u5305\u542b\u65e5\u671f\u65f6\u95f4\uff0c\u683c\u5f0f\u5982\u4e0b\uff1a [year, month, day, week, hour, minute, second, microsecond] \u8bbe\u7f6e\u65f6\u95f4\u65f6\uff0c\u8bbe\u7f6e\u6210\u529f\u8fd4\u56de\u6574\u578b\u503c0\uff0c\u8bbe\u7f6e\u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1 \u3002 \u793a\u4f8b >>> from machine import RTC >>> rtc = RTC() >>> rtc.datetime() (2020, 9, 11, 5, 15, 43, 23, 0) >>> rtc.datetime([2020, 3, 12, 1, 12, 12, 12, 0]) 0 >>> rtc.datetime() (2020, 3, 12, 4, 12, 12, 14, 0) I2C \u7c7b\u529f\u80fd\uff1a\u7528\u4e8e\u8bbe\u5907\u4e4b\u95f4\u901a\u4fe1\u7684\u53cc\u7ebf\u534f\u8bae\u3002 \u5e38\u91cf\u8bf4\u660e \u5e38\u91cf I2C.I2C0 i2c \u901a\u8def\u7d22\u5f15\u53f7: 0 I2C.I2C1 i2c \u901a\u8def\u7d22\u5f15\u53f7: 1 I2C.STANDARD_MODE \u6807\u51c6\u6a21\u5f0f I2C.FAST_MODE \u5feb\u901f\u6a21\u5f0f \u521b\u5efaI2C\u5bf9\u8c61 from machine import I2C i2c_obj = I2C(I2Cn, MODE) \u53c2\u6570\u8bf4\u660e \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e I2Cn int i2c \u901a\u8def\u7d22\u5f15\u53f7: I2C.I2C0 : 0 \uff08EC100Y\uff09 I2C.I2C0 : 1 \uff08EC600S\uff09 MODE int i2c \u7684\u5de5\u4f5c\u6a21\u5f0f: I2C.STANDARD_MODE : 0 \u6807\u51c6\u6a21\u5f0f I2C.FAST_MODE \uff1a 1 \u5feb\u901f\u6a21\u5f0f \u793a\u4f8b from machine import I2C i2c_obj = I2C(I2C.I2C0, I2C.STANDARD_MODE) # \u8fd4\u56dei2c\u5bf9\u8c61 I2C.read(slaveaddress, addr,addr_len, r_data, datalen, delay) \u4ece I2C \u603b\u7ebf\u4e2d\u8bfb\u53d6\u6570\u636e\u3002 \u53c2\u6570\u8bf4\u660e \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e slaveaddress 16\u8fdb\u5236 i2c \u8bbe\u5907\u5730\u5740 addr 16\u8fdb\u5236 i2c \u5bc4\u5b58\u5668\u5730\u5740 addr_len int \u5bc4\u5b58\u5668\u5730\u5740\u957f\u5ea6 r_data bytearray \u63a5\u6536\u6570\u636e\u7684\u5b57\u8282\u6570\u7ec4 datalen int \u5b57\u8282\u6570\u7ec4\u7684\u957f\u5ea6 delay int \u5ef6\u65f6\uff0c\u6570\u636e\u8f6c\u6362\u7f13\u51b2\u65f6\u95f4\uff08\u5355\u4f4dms\uff09 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u6574\u578b\u503c0\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\u3002 I2C.write(slaveaddress, addr, addr_len, data, datalen) \u4ece I2C \u603b\u7ebf\u4e2d\u5199\u5165\u6570\u636e\u3002 \u53c2\u6570\u8bf4\u660e \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e slaveaddress 16\u8fdb\u5236 i2c \u8bbe\u5907\u5730\u5740 addr 16\u8fdb\u5236 i2c \u5bc4\u5b58\u5668\u5730\u5740 addr_len int \u5bc4\u5b58\u5668\u5730\u5740\u957f\u5ea6 data bytearray \u5199\u5165\u7684\u6570\u636e datalen int \u5199\u5165\u6570\u636e\u7684\u957f\u5ea6 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u6574\u578b\u503c0\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\u3002 \u4f7f\u7528\u793a\u4f8b \u9700\u8981\u8fde\u63a5\u8bbe\u5907\u4f7f\u7528\uff01 from machine import I2C I2C_SLAVE_ADDR = 0x1B # i2c \u8bbe\u5907\u5730\u5740 WHO_AM_I= bytearray({0x02, 0}) # i2c \u5bc4\u5b58\u5668\u5730\u5740\uff0c\u4ee5buff\u7684\u65b9\u5f0f\u4f20\u5165\uff0c\u53d6\u7b2c\u4e00\u4e2a\u503c\uff0c\u8ba1\u7b97\u4e00\u4e2a\u503c\u7684\u957f\u5ea6 data = bytearray({0x12, 0}) # \u8f93\u5165\u5bf9\u5e94\u6307\u4ee4 i2c_obj = I2C(I2C.I2C0, I2C.STANDARD_MODE) # \u8fd4\u56dei2c\u5bf9\u8c61 i2c_obj.write(I2C_SLAVE_ADDR, WHO_AM_I, 1, data, 2) # \u5199\u5165data r_data = bytearray(2) # \u521b\u5efa\u957f\u5ea6\u4e3a2\u7684\u5b57\u8282\u6570\u7ec4\u63a5\u6536 i2c_obj.read(I2C_SLAVE_ADDR, WHO_AM_I, 1, r_data, 2, 0) # read i2c_log.info(r_data[0]) i2c_log.info(r_data[1]) WDT \u6a21\u5757\u529f\u80fd\uff1aAPP\u5e94\u7528\u7a0b\u5e8f\u53d1\u751f\u5f02\u5e38\u4e0d\u6267\u884c\u65f6\u8fdb\u884c\u7cfb\u7edf\u91cd\u542f\u64cd\u4f5c \u200b wdt = WDT(period) \u521b\u5efa\u8f6f\u72d7\u5bf9\u8c61\u3002 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e period int \u8bbe\u7f6e\u8f6f\u72d7\u68c0\u6d4b\u65f6\u95f4\uff0c\u5355\u4f4d(s\uff09 \u8fd4\u56de\u503c \u8fd4\u56de\u8f6f\u72d7\u5bf9\u8c61 \u200b wdt.feed() \u5582\u72d7 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u65e0 \u200b wdt.stop() \u5173\u95ed\u8f6f\u72d7\u529f\u80fd \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u65e0 \u4f7f\u7528\u793a\u4f8b from machine import WDT from machine import Timer timer1 = Timer(Timer.Timer1) def feed(t): wdt.feed() if __name__ == '__main__': wdt = WDT(20) # \u542f\u52a8\u770b\u95e8\u72d7\uff0c\u95f4\u9694\u65f6\u957f timer1.start(period=15000, mode=timer1.PERIODIC, callback=feed) # \u4f7f\u7528\u5b9a\u65f6\u5668\u5582\u72d7 # wdt.stop() pm - \u4f4e\u529f\u8017 \u6a21\u5757\u529f\u80fd\uff1a\u5728\u65e0\u4e1a\u52a1\u5904\u7406\u65f6\u4f7f\u7cfb\u7edf\u8fdb\u5165\u4f11\u7720\u72b6\u6001\uff0c\u8fdb\u5165\u4f4e\u529f\u8017\u6a21\u5f0f\u3002 \u200b lpm_fd = pm.create_wakelock(lock_name, name_size) \u521b\u5efawake_lock\u9501 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e lock_name string \u81ea\u5b9a\u4e49lock\u540d name_size int lock_name\u7684\u957f\u5ea6 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56dewakelock\u7684\u6807\u8bc6\u53f7\uff0c\u5426\u5219\u8fd4\u56de-1\u3002 \u200b pm.delete_wakelock(lpm_fd) \u5220\u9664wake_lock\u9501 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e lpm_fd int \u9700\u8981\u5220\u9664\u7684\u9501\u5bf9\u5e94\u6807\u8bc6id \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de0\u3002 \u200b pm.wakelock_lock(lpm_fd) \u52a0\u9501 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e lpm_fd int \u9700\u8981\u6267\u884c\u52a0\u9501\u64cd\u4f5c\u7684wakelock\u6807\u8bc6id \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de0\uff0c\u5426\u5219\u8fd4\u56de-1\u3002 \u200b pm.wakelock_unlock(lpm_fd) \u91ca\u653e\u9501 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e lpm_fd int \u9700\u8981\u6267\u884c\u91ca\u653e\u9501\u64cd\u4f5c\u7684wakelock\u6807\u8bc6id \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de0\uff0c\u5426\u5219\u8fd4\u56de-1\u3002 \u200b pm.autosleep(sleep_flag) \u81ea\u52a8\u4f11\u7720\u6a21\u5f0f\u63a7\u5236 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e sleep_flag int 0\uff0c\u5173\u95ed\u81ea\u52a8\u4f11\u7720\uff1b1\u5f00\u542f\u81ea\u52a8\u4f11\u7720 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de0\u3002 \u200b pm.get_wakelock_num() \u83b7\u53d6\u5df2\u521b\u5efa\u7684\u9501\u6570\u91cf \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u8fd4\u56de\u5df2\u521b\u5efawakelock\u9501\u7684\u6570\u91cf\u3002 \u4f7f\u7528\u793a\u4f8b \u6a21\u62df\u6d4b\u8bd5\uff0c\u5b9e\u9645\u5f00\u53d1\u8bf7\u6839\u636e\u4e1a\u52a1\u573a\u666f\u9009\u62e9\u4f7f\u7528\uff01 import pm import utime # \u521b\u5efawakelock\u9501 lpm_fd = pm.create_wakelock(\"test_lock\", len(\"test_lock\")) # \u8bbe\u7f6e\u81ea\u52a8\u4f11\u7720\u6a21\u5f0f pm.autosleep(1) # \u6a21\u62df\u6d4b\u8bd5\uff0c\u5b9e\u9645\u5f00\u53d1\u8bf7\u6839\u636e\u4e1a\u52a1\u573a\u666f\u9009\u62e9\u4f7f\u7528 while 1: utime.sleep(20) # \u4f11\u7720 res = pm.wakelock_lock(lpm_fd) print(\"ql_lpm_idlelock_lock, g_c1_axi_fd = %d\" %lpm_fd) print(\"unlock sleep\") utime.sleep(20) res = pm.wakelock_unlock(lpm_fd) print(res) print(\"ql_lpm_idlelock_unlock, g_c1_axi_fd = %d\" % lpm_fd) num = pm.get_wakelock_num() # \u83b7\u53d6\u5df2\u521b\u5efa\u9501\u7684\u6570\u91cf print(num) ure - \u6b63\u5219 \u6a21\u5757\u529f\u80fd\uff1a\u63d0\u4f9b\u901a\u8fc7\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u6570\u636e\uff08ps\uff1a\u6b64re\u6a21\u5757\u76ee\u524d\u652f\u6301\u7684\u64cd\u4f5c\u7b26\u8f83\u5c11\uff0c\u90e8\u5206\u64cd\u4f5c\u7b26\u6682\u4e0d\u652f\u6301\uff09 \u652f\u6301\u64cd\u4f5c\u7b26\uff1a \u5b57\u7b26 \u8bf4\u660e \u2018.\u2019 \u5339\u914d\u4efb\u610f\u5b57\u7b26 \u2018[]\u2019 \u5339\u914d\u5b57\u7b26\u96c6\u5408\uff0c\u652f\u6301\u5355\u4e2a\u5b57\u7b26\u548c\u4e00\u4e2a\u8303\u56f4\uff0c\u5305\u62ec\u8d1f\u96c6 \u2018^\u2019 \u5339\u914d\u5b57\u7b26\u4e32\u7684\u5f00\u5934\u3002 \u2018$\u2019 \u5339\u914d\u5b57\u7b26\u4e32\u7684\u7ed3\u5c3e\u3002 \u2018?\u2019 \u5339\u914d\u96f6\u4e2a\u6216\u524d\u9762\u7684\u5b50\u6a21\u5f0f\u4e4b\u4e00\u3002 \u2018*\u2019 \u5339\u914d\u96f6\u4e2a\u6216\u591a\u4e2a\u5148\u524d\u7684\u5b50\u6a21\u5f0f\u3002 \u2018+\u2019 \u5339\u914d\u4e00\u4e2a\u6216\u591a\u4e2a\u5148\u524d\u7684\u5b50\u6a21\u5f0f\u3002 \u2018??\u2019 \u975e\u8d2a\u5a6a\u7248\u672c\u7684 ? \uff0c\u5339\u914d0\u62161 \u2018*?\u2019 \u975e\u8d2a\u5a6a\u7248\u672c\u7684*\uff0c\u5339\u914d\u96f6\u4e2a\u6216\u591a\u4e2a \u2018+?\u2019 \u975e\u8d2a\u5a6a\u7248\u672c\u7684+\uff0c\u5339\u914d\u4e00\u4e2a\u6216\u591a\u4e2a \u2018|\u2019 \u5339\u914d\u8be5\u64cd\u4f5c\u7b26\u7684\u5de6\u4fa7\u5b50\u6a21\u5f0f\u6216\u53f3\u4fa7\u5b50\u6a21\u5f0f\u3002 \u2018\\d\u2019 \u6570\u5b57\u5339\u914d \u2018\\D\u2019 \u975e\u6570\u5b57\u5339\u914d '\\s' \u5339\u914d\u7a7a\u683c '\\S' \u5339\u914d\u975e\u7a7a\u683c \u2018\\w\u2019 \u5339\u914d\u201d\u5355\u8bcd\u5b57\u7b26\u201d (\u4ec5\u9650ASCII) \u2018\\W\u2019 \u5339\u914d\u975e\u201c\u5355\u8bcd\u5b57\u7b26\u201d\uff08\u4ec5\u9650ASCII\uff09 \u4e0d\u652f\u6301\uff1a \u91cd\u590d\u6b21\u6570 ( {m,n} ) \u547d\u540d\u7ec4 ( (?P<name>...) ) \u975e\u6355\u83b7\u7ec4( (?:...) ) \u66f4\u9ad8\u7ea7\u7684\u65ad\u8a00( \\b , \\B ) \u7279\u6b8a\u5b57\u7b26\u8f6c\u4e49\uff0c\u5982 \\r , \\n - \u6539\u7528Python\u81ea\u5df1\u7684\u8f6c\u4e49\u3002 \u200b ure.compile(regex) compile \u51fd\u6570\u7528\u4e8e\u7f16\u8bd1\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u751f\u6210\u4e00\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\uff08 Pattern \uff09\u5bf9\u8c61\uff0c\u4f9b match() \u548c search() \u8fd9\u4e24\u4e2a\u51fd\u6570\u4f7f\u7528\u3002 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e regex string \u6b63\u5219\u8868\u8fbe\u5f0f \u8fd4\u56de\u503c \u8fd4\u56de regex \u5bf9\u8c61 \u200b ure.match(regex, string) \u5c06\u6b63\u5219\u8868\u8fbe\u5f0f\u5bf9\u8c61 \u4e0e string \u5339\u914d\uff0c\u5339\u914d\u901a\u5e38\u4ece\u5b57\u7b26\u4e32\u7684\u8d77\u59cb\u4f4d\u7f6e\u8fdb\u884c \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e regex string \u6b63\u5219\u8868\u8fbe\u5f0f string string \u9700\u8981\u5339\u914d\u7684\u5b57\u7b26\u4e32\u6570\u636e \u8fd4\u56de\u503c \u5339\u914d\u6210\u529f\u8fd4\u56de\u4e00\u4e2a\u5339\u914d\u7684\u5bf9\u8c61\uff0c\u5426\u5219\u8fd4\u56deNone\u3002 \u200b ure.search(regex, string) re.search \u626b\u63cf\u6574\u4e2a\u5b57\u7b26\u4e32\u5e76\u8fd4\u56de\u7b2c\u4e00\u4e2a\u6210\u529f\u7684\u5339\u914d\u3002 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e regex string \u6b63\u5219\u8868\u8fbe\u5f0f string string \u9700\u8981\u5339\u914d\u7684\u5b57\u7b26\u4e32\u6570\u636e \u8fd4\u56de\u503c \u5339\u914d\u6210\u529f\u8fd4\u56de\u4e00\u4e2a\u5339\u914d\u7684\u5bf9\u8c61\uff0c\u5426\u5219\u8fd4\u56deNone\u3002 Match \u5bf9\u8c61 \u5339\u914d\u7531 match() \u548c serach \u65b9\u6cd5\u8fd4\u56de\u7684\u5bf9\u8c61 \u200b match.group(index) \u5339\u914d\u7684\u6574\u4e2a\u8868\u8fbe\u5f0f\u7684\u5b57\u7b26\u4e32 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e index int \u6b63\u5219\u8868\u8fbe\u5f0f\u4e2d\uff0cgroup()\u7528\u6765\u63d0\u51fa\u5206\u7ec4\u622a\u83b7\u7684\u5b57\u7b26\u4e32, index=0\u8fd4\u56de\u6574\u4f53\uff0c\u6839\u636e\u7f16\u5199\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u8fdb\u884c\u83b7\u53d6\uff0c\u5f53\u5206\u7ec4\u4e0d\u5b58\u5728\u65f6\u4f1a\u629b\u51fa\u5f02\u5e38 \u8fd4\u56de\u503c \u8fd4\u56de\u5339\u914d\u7684\u6574\u4e2a\u8868\u8fbe\u5f0f\u7684\u5b57\u7b26\u4e32 \u200b match.groups() \u5339\u914d\u7684\u6574\u4e2a\u8868\u8fbe\u5f0f\u7684\u5b57\u7b26\u4e32 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u8be5\u5339\u914d\u7ec4\u7684\u6240\u6709\u5b50\u5b57\u7b26\u4e32\u7684\u5143\u7ec4\u3002 \u200b match.start(index) \u8fd4\u56de\u5339\u914d\u7684\u5b50\u5b57\u7b26\u4e32\u7ec4\u7684\u8d77\u59cb\u539f\u59cb\u5b57\u7b26\u4e32\u4e2d\u7684\u7d22\u5f15\u3002 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e index int index \u9ed8\u8ba4\u4e3a\u6574\u4e2a\u7ec4\uff0c\u5426\u5219\u5c06\u9009\u62e9\u4e00\u4e2a\u7ec4 \u8fd4\u56de\u503c \u8fd4\u56de\u5339\u914d\u7684\u5b50\u5b57\u7b26\u4e32\u7ec4\u7684\u8d77\u59cb\u539f\u59cb\u5b57\u7b26\u4e32\u4e2d\u7684\u7d22\u5f15\u3002 \u200b match.end(index) \u8fd4\u56de\u5339\u914d\u7684\u5b50\u5b57\u7b26\u4e32\u7ec4\u7684\u7ed3\u675f\u539f\u59cb\u5b57\u7b26\u4e32\u4e2d\u7684\u7d22\u5f15\u3002 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e index int index \u9ed8\u8ba4\u4e3a\u6574\u4e2a\u7ec4\uff0c\u5426\u5219\u5c06\u9009\u62e9\u4e00\u4e2a\u7ec4 \u8fd4\u56de\u503c \u8fd4\u56de\u5339\u914d\u7684\u5b50\u5b57\u7b26\u4e32\u7ec4\u7684\u7ed3\u675f\u539f\u59cb\u5b57\u7b26\u4e32\u4e2d\u7684\u7d22\u5f15\u3002 \u4f7f\u7528\u793a\u4f8b import ure res = ''' $GNRMC,133648.00,A,3149.2969,N,11706.9027,E,0.055,,311020,,,A,V*18 $GNGGA,133648.00,3149.2969,N,11706.9027,E,1,24,1.03,88.9,M,,M,,*6C $GNGLL,3149.2969,N,11706.9027,E,133648.00,A,A*7A $GNGSA,A,3,31,26,11,194,27,195,08,09,03,193,04,16,1.41,1.03,0.97,1*31 ''' r = ure.search(\"GNGGA(.+?)M\", res) print(r.group(0)) \u7b2c\u4e09\u65b9\u5e93 aLiYun - \u963f\u91cc\u4e91\u670d\u52a1 \u6a21\u5757\u529f\u80fd\uff1a\u963f\u91cc\u4e91\u7269\u8054\u7f51\u5957\u4ef6\u5ba2\u6237\u7aef\u529f\u80fd,\u76ee\u524d\u7684\u4ea7\u54c1\u8282\u70b9\u7c7b\u578b\u4ec5\u652f\u6301\u201c\u8bbe\u5907\u201d\uff0c\u8bbe\u5907\u8ba4\u8bc1\u65b9\u5f0f\u652f\u6301\u201c\u4e00\u673a\u4e00\u5bc6\u548c\u201c\u4e00\u578b\u4e00\u5bc6\u201d\u3002 aLiYun(productKey, productSecret, DeviceName, DeviceSecret) \u914d\u7f6e\u963f\u91cc\u4e91\u7269\u8054\u7f51\u5957\u4ef6\u7684\u4ea7\u54c1\u4fe1\u606f\u548c\u8bbe\u5907\u4fe1\u606f\u3002 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e productKey string \u4ea7\u54c1\u6807\u8bc6 productSecret string \u53ef\u9009\u53c2\u6570\uff0c\u9ed8\u8ba4\u4e3aNone\uff0cproductSecret\uff0c\u4ea7\u54c1\u5bc6\u94a5 \u4e00\u673a\u4e00\u5bc6\u8ba4\u8bc1\u65b9\u6848\u65f6\uff0c\u6b64\u53c2\u6570\u4f20\u5165None \u4e00\u578b\u4e00\u5bc6\u8ba4\u8bc1\u65b9\u6848\u65f6\uff0c\u6b64\u53c2\u6570\u4f20\u5165\u771f\u5b9e\u7684\u4ea7\u54c1\u5bc6\u94a5 DeviceName string \u8bbe\u5907\u540d\u79f0 DeviceSecret string \u53ef\u9009\u53c2\u6570,\u9ed8\u8ba4\u4e3aNon\uff0c\u8bbe\u5907\u5bc6\u94a5\uff08\u4e00\u578b\u4e00\u5bc6\u8ba4\u8bc1\u65b9\u6848\u65f6\u6b64\u53c2\u6570\u4f20\u5165None\uff09 \u8fd4\u56de\u503c \u8fd4\u56deaLiYun\u8fde\u63a5\u5bf9\u8c61\u3002 aLiYun.setMqtt(clientID, clean_session, keepAlive) \u8bbe\u7f6eMQTT\u6570\u636e\u901a\u9053\u7684\u53c2\u6570 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e clientID string \u81ea\u5b9a\u4e49\u963f\u91cc\u4e91\u8fde\u63a5id clean_session bool \u53ef\u9009\u53c2\u6570\uff0c\u4e00\u4e2a\u51b3\u5b9a\u5ba2\u6237\u7aef\u7c7b\u578b\u7684\u5e03\u5c14\u503c\u3002 \u5982\u679c\u4e3aTrue\uff0c\u90a3\u4e48\u4ee3\u7406\u5c06\u5728\u5176\u65ad\u5f00\u8fde\u63a5\u65f6\u5220\u9664\u6709\u5173\u6b64\u5ba2\u6237\u7aef\u7684\u6240\u6709\u4fe1\u606f\u3002 \u5982\u679c\u4e3aFalse\uff0c\u5219\u5ba2\u6237\u7aef\u662f\u6301\u4e45\u5ba2\u6237\u7aef\uff0c\u5f53\u5ba2\u6237\u7aef\u65ad\u5f00\u8fde\u63a5\u65f6\uff0c\u8ba2\u9605\u4fe1\u606f\u548c\u6392\u961f\u6d88\u606f\u5c06\u88ab\u4fdd\u7559\u3002\u9ed8\u8ba4\u4e3aFalse keepAlive int \u901a\u4fe1\u4e4b\u95f4\u5141\u8bb8\u7684\u6700\u957f\u65f6\u95f4\u6bb5\uff08\u4ee5\u79d2\u4e3a\u5355\u4f4d\uff09,\u9ed8\u8ba4\u4e3a300\uff0c\u8303\u56f4\uff0860-1200\uff09 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u6574\u578b\u503c0\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\u3002 aLiYun.setCallback(sub_cb) \u6ce8\u518c\u56de\u8c03\u51fd\u6570\u3002 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e sub_cb function \u56de\u8c03\u51fd\u6570 \u8fd4\u56de\u503c \u65e0 aLiYun.subscribe(topic,qos) \u8ba2\u9605mqtt\u4e3b\u9898\u3002 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e topic string topic qos int MQTT\u6d88\u606f\u670d\u52a1\u8d28\u91cf\uff08\u9ed8\u8ba40\uff0c\u53ef\u9009\u62e90\u62161\uff090\uff1a\u53d1\u9001\u8005\u53ea\u53d1\u9001\u4e00\u6b21\u6d88\u606f\uff0c\u4e0d\u8fdb\u884c\u91cd\u8bd5 1\uff1a\u53d1\u9001\u8005\u6700\u5c11\u53d1\u9001\u4e00\u6b21\u6d88\u606f\uff0c\u786e\u4fdd\u6d88\u606f\u5230\u8fbeBroker \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u6574\u578b\u503c0\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\u3002 aLiYun.publish(topic,msg, qos=0) \u53d1\u5e03\u6d88\u606f\u3002 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e topic string topic msg string \u9700\u8981\u53d1\u9001\u7684\u6570\u636e qos int MQTT\u6d88\u606f\u670d\u52a1\u8d28\u91cf\uff08\u9ed8\u8ba40\uff0c\u53ef\u9009\u62e90\u62161\uff090\uff1a\u53d1\u9001\u8005\u53ea\u53d1\u9001\u4e00\u6b21\u6d88\u606f\uff0c\u4e0d\u8fdb\u884c\u91cd\u8bd5 1\uff1a\u53d1\u9001\u8005\u6700\u5c11\u53d1\u9001\u4e00\u6b21\u6d88\u606f\uff0c\u786e\u4fdd\u6d88\u606f\u5230\u8fbeBroker \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u6574\u578b\u503c0\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\u3002 aLiYun.start() \u8fd0\u884c\u8fde\u63a5\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u65e0 \u4f7f\u7528\u793a\u4f8b from aLiYun import aLiYun productKey = \"\" # \u4ea7\u54c1\u6807\u8bc6 productSecret = None # \u4ea7\u54c1\u5bc6\u94a5\uff08\u4e00\u673a\u4e00\u5bc6\u8ba4\u8bc1\u6b64\u53c2\u6570\u4f20\u5165None\uff09 DeviceName = \"\" # \u8bbe\u5907\u540d\u79f0 DeviceSecret = None # \u8bbe\u5907\u5bc6\u94a5\uff08\u4e00\u578b\u4e00\u5bc6\u8ba4\u8bc1\u6b64\u53c2\u6570\u4f20\u5165None\uff09 # \u521b\u5efaaliyun\u8fde\u63a5\u5bf9\u8c61 ali = aLiYun(productKey, productSecret, DeviceName, DeviceSecret) # \u8bbe\u7f6emqtt\u8fde\u63a5\u5c5e\u6027 clientID = \"mqttText\" # \u81ea\u5b9a\u4e49\u5b57\u7b26\uff08\u4e0d\u8d85\u8fc764\uff09 ali.setMqtt(clientID, clean_session=False, keepAlive=300) # \u56de\u8c03\u51fd\u6570 def sub_cb(topic, msg): print(\"subscribe recv:\") print(topic, msg) # \u8bbe\u7f6e\u56de\u8c03\u51fd\u6570 ali.setCallback(sub_cb) topic = \"\" # \u4e3b\u9898 # \u8ba2\u9605\u4e3b\u9898 ali.subscribe(topic) # \u53d1\u5e03\u6d88\u606f ali.publish(topic, \"hello world\") # \u8fd0\u884c ali.start() TenCentYun- \u817e\u8baf\u4e91\u670d\u52a1 \u6a21\u5757\u529f\u80fd\uff1a\u817e\u8baf\u4e91\u7269\u8054\u7f51\u5957\u4ef6\u5ba2\u6237\u7aef\u529f\u80fd,\u76ee\u524d\u7684\u4ea7\u54c1\u8282\u70b9\u7c7b\u578b\u4ec5\u652f\u6301\u201c\u8bbe\u5907\u201d\uff0c\u8bbe\u5907\u8ba4\u8bc1\u65b9\u5f0f\u652f\u6301\u201c\u4e00\u673a\u4e00\u5bc6\u548c\u201c\u52a8\u6001\u6ce8\u518c\u8ba4\u8bc1\u201d\u3002 TXyun(productID, devicename, devicePsk, ProductSecret) \u914d\u7f6e\u963f\u91cc\u4e91\u7269\u8054\u7f51\u5957\u4ef6\u7684\u4ea7\u54c1\u4fe1\u606f\u548c\u8bbe\u5907\u4fe1\u606f\u3002 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e productID string \u4ea7\u54c1\u6807\u8bc6\uff08\u552f\u4e00ID\uff09 ProductSecret string \u53ef\u9009\u53c2\u6570\uff0c\u9ed8\u8ba4\u4e3aNone\uff0cproductSecret\uff0c\u4ea7\u54c1\u5bc6\u94a5 \u4e00\u673a\u4e00\u5bc6\u8ba4\u8bc1\u65b9\u6848\u65f6\uff0c\u6b64\u53c2\u6570\u4f20\u5165None \u4e00\u578b\u4e00\u5bc6\u8ba4\u8bc1\u65b9\u6848\u65f6\uff0c\u6b64\u53c2\u6570\u4f20\u5165\u771f\u5b9e\u7684\u4ea7\u54c1\u5bc6\u94a5 devicename string \u8bbe\u5907\u540d\u79f0 devicePsk string \u53ef\u9009\u53c2\u6570,\u9ed8\u8ba4\u4e3aNon\uff0c\u8bbe\u5907\u5bc6\u94a5\uff08\u4e00\u578b\u4e00\u5bc6\u8ba4\u8bc1\u65b9\u6848\u65f6\u6b64\u53c2\u6570\u4f20\u5165None\uff09 \u8fd4\u56de\u503c \u8fd4\u56deTXyun\u8fde\u63a5\u5bf9\u8c61\u3002 TXyun.setMqtt(clean_session, keepAlive) \u8bbe\u7f6eMQTT\u6570\u636e\u901a\u9053\u7684\u53c2\u6570 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e clean_session bool \u53ef\u9009\u53c2\u6570\uff0c\u4e00\u4e2a\u51b3\u5b9a\u5ba2\u6237\u7aef\u7c7b\u578b\u7684\u5e03\u5c14\u503c\u3002 \u5982\u679c\u4e3aTrue\uff0c\u90a3\u4e48\u4ee3\u7406\u5c06\u5728\u5176\u65ad\u5f00\u8fde\u63a5\u65f6\u5220\u9664\u6709\u5173\u6b64\u5ba2\u6237\u7aef\u7684\u6240\u6709\u4fe1\u606f\u3002 \u5982\u679c\u4e3aFalse\uff0c\u5219\u5ba2\u6237\u7aef\u662f\u6301\u4e45\u5ba2\u6237\u7aef\uff0c\u5f53\u5ba2\u6237\u7aef\u65ad\u5f00\u8fde\u63a5\u65f6\uff0c\u8ba2\u9605\u4fe1\u606f\u548c\u6392\u961f\u6d88\u606f\u5c06\u88ab\u4fdd\u7559\u3002\u9ed8\u8ba4\u4e3aFalse keepAlive int \u901a\u4fe1\u4e4b\u95f4\u5141\u8bb8\u7684\u6700\u957f\u65f6\u95f4\u6bb5\uff08\u4ee5\u79d2\u4e3a\u5355\u4f4d\uff09,\u9ed8\u8ba4\u4e3a300\uff0c\u8303\u56f4\uff0860-1000\uff09\uff0c\u5efa\u8bae300\u4ee5\u4e0a \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u6574\u578b\u503c0\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\u3002 TXyun.setCallback(sub_cb) \u6ce8\u518c\u56de\u8c03\u51fd\u6570\u3002 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e sub_cb function \u8bbe\u7f6e\u6d88\u606f\u56de\u8c03\u51fd\u6570\uff0c\u5f53\u670d\u52a1\u7aef\u54cd\u5e94\u65f6\u89e6\u53d1\u8be5\u65b9\u6cd5 \u8fd4\u56de\u503c \u65e0 TXyun.subscribe(topic,qos) \u8ba2\u9605mqtt\u4e3b\u9898\u3002 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e topic string topic qos int MQTT\u6d88\u606f\u670d\u52a1\u8d28\u91cf\uff08\u9ed8\u8ba40\uff0c\u53ef\u9009\u62e90\u62161\uff09MQTT\u6d88\u606f\u670d\u52a1\u8d28\u91cf\uff08\u9ed8\u8ba40\uff0c\u53ef\u9009\u62e90\u62161\uff090\uff1a\u53d1\u9001\u8005\u53ea\u53d1\u9001\u4e00\u6b21\u6d88\u606f\uff0c\u4e0d\u8fdb\u884c\u91cd\u8bd5 1\uff1a\u53d1\u9001\u8005\u6700\u5c11\u53d1\u9001\u4e00\u6b21\u6d88\u606f\uff0c\u786e\u4fdd\u6d88\u606f\u5230\u8fbeBroker \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u6574\u578b\u503c0\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\u3002 TXyun.publish(topic,msg, qos=0) \u53d1\u5e03\u6d88\u606f\u3002 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e topic string topic msg string \u9700\u8981\u53d1\u9001\u7684\u6570\u636e qos int MQTT\u6d88\u606f\u670d\u52a1\u8d28\u91cf\uff08\u9ed8\u8ba40\uff0c\u53ef\u9009\u62e90\u62161\uff09MQTT\u6d88\u606f\u670d\u52a1\u8d28\u91cf\uff08\u9ed8\u8ba40\uff0c\u53ef\u9009\u62e90\u62161\uff090\uff1a\u53d1\u9001\u8005\u53ea\u53d1\u9001\u4e00\u6b21\u6d88\u606f\uff0c\u4e0d\u8fdb\u884c\u91cd\u8bd5 1\uff1a\u53d1\u9001\u8005\u6700\u5c11\u53d1\u9001\u4e00\u6b21\u6d88\u606f\uff0c\u786e\u4fdd\u6d88\u606f\u5230\u8fbeBroker \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u6574\u578b\u503c0\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\u3002 TXyun.start() \u8fd0\u884c\u8fde\u63a5\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u65e0 \u4f7f\u7528\u793a\u4f8b from TenCentYun import TXyun productID = \"\" # \u4ea7\u54c1\u6807\u8bc6 devicename = \"\" # \u8bbe\u5907\u540d\u79f0 devicePsk = \"\" # \u8bbe\u5907\u5bc6\u94a5\uff08\u4e00\u578b\u4e00\u5bc6\u8ba4\u8bc1\u6b64\u53c2\u6570\u4f20\u5165None\uff09 ProductSecret = None # \u4ea7\u54c1\u5bc6\u94a5\uff08\u4e00\u673a\u4e00\u5bc6\u8ba4\u8bc1\u6b64\u53c2\u6570\u4f20\u5165None\uff09 tenxun = TXyun(productID, devicename, devicePsk, ProductSecret) # \u521b\u5efa\u8fde\u63a5\u5bf9\u8c61 def sub_cb(topic, msg): # \u4e91\u7aef\u6d88\u606f\u54cd\u5e94\u56de\u8c03\u51fd\u6570 print(\"subscribe recv:\") print(topic, msg) tenxun.setMqtt() tenxun.setCallback(sub_cb) topic = \"\" # \u8f93\u5165\u81ea\u5b9a\u4e49\u7684Topic tenxun.subscribe(topic) tenxun.publish(topic, \"hello world\") tenxun.start() request - HTTP \u6a21\u5757\u529f\u80fd\uff1aHTTP\u5ba2\u6237\u7aef\u7684\u76f8\u5173\u529f\u80fd\u51fd\u6570\u3002 request.get(url, data, headers) \u53d1\u9001GET\u8bf7\u6c42\u3002 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e url string \u7f51\u5740 data json \uff08\u53ef\u9009\u53c2\u6570\uff09\u9644\u52a0\u5230\u8bf7\u6c42\u7684\u6b63\u6587\uff0cjson\u7c7b\u578b\uff0c\u9ed8\u8ba4\u4e3aNone headers dict \uff08\u53ef\u9009\u53c2\u6570\uff09\u8bf7\u6c42\u5934\uff0c\u9ed8\u8ba4\u4e3aNone \u793a\u4f8b import request url = \"http://httpbin.org/get\" response = request.get(url) request.post(url, data, headers) \u53d1\u9001POST\u8bf7\u6c42\u3002 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e url string \u7f51\u5740 data json \uff08\u53ef\u9009\u53c2\u6570\uff09\u9644\u52a0\u5230\u8bf7\u6c42\u7684\u6b63\u6587\uff0cjson\u7c7b\u578b\uff0c\u9ed8\u8ba4\u4e3aNone headers dict \uff08\u53ef\u9009\u53c2\u6570\uff09\u8bf7\u6c42\u5934\uff0c\u9ed8\u8ba4\u4e3aNone \u793a\u4f8b import request url = \"http://httpbin.org/post\" response = request.post(url) request.put(url, data, headers) \u53d1\u9001PUT\u8bf7\u6c42\u3002 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e url string \u7f51\u5740 data json \uff08\u53ef\u9009\u53c2\u6570\uff09\u9644\u52a0\u5230\u8bf7\u6c42\u7684\u6b63\u6587\uff0cjson\u7c7b\u578b\uff0c\u9ed8\u8ba4\u4e3aNone headers dict \uff08\u53ef\u9009\u53c2\u6570\uff09\u8bf7\u6c42\u5934\uff0c\u9ed8\u8ba4\u4e3aNone \u793a\u4f8b import request url = \"http://httpbin.org/put\" response = request.put(url) request.head(url, data, headers) \u53d1\u9001HEAD\u8bf7\u6c42\u3002 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e url string \u7f51\u5740 data json \uff08\u53ef\u9009\u53c2\u6570\uff09\u9644\u52a0\u5230\u8bf7\u6c42\u7684\u6b63\u6587\uff0cjson\u7c7b\u578b\uff0c\u9ed8\u8ba4\u4e3aNone headers dict \uff08\u53ef\u9009\u53c2\u6570\uff09\u8bf7\u6c42\u5934\uff0c\u9ed8\u8ba4\u4e3aNone \u793a\u4f8b import request url = \"http://httpbin.org/head\" response = request.head(url) request.patch(url, data, headers) \u53d1\u9001PATCH\u8bf7\u6c42\u3002 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e url string \u7f51\u5740 data json \uff08\u53ef\u9009\u53c2\u6570\uff09\u9644\u52a0\u5230\u8bf7\u6c42\u7684\u6b63\u6587\uff0cjson\u7c7b\u578b\uff0c\u9ed8\u8ba4\u4e3aNone headers dict \uff08\u53ef\u9009\u53c2\u6570\uff09\u8bf7\u6c42\u5934\uff0c\u9ed8\u8ba4\u4e3aNone \u793a\u4f8b import request url = \"http://httpbin.org/patch\" response = request.patch(url) request.delete(url, data, headers) \u53d1\u9001DELETE\u8bf7\u6c42\u3002 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e url string \u7f51\u5740 data json \uff08\u53ef\u9009\u53c2\u6570\uff09\u9644\u52a0\u5230\u8bf7\u6c42\u7684\u6b63\u6587\uff0cjson\u7c7b\u578b\uff0c\u9ed8\u8ba4\u4e3aNone headers dict \uff08\u53ef\u9009\u53c2\u6570\uff09\u8bf7\u6c42\u5934\uff0c\u9ed8\u8ba4\u4e3aNone \u793a\u4f8b import request url = \"http://httpbin.org/delete\" response = request.delete(url) Response\u7c7b\u65b9\u6cd5\u8bf4\u660e response =request.get(url) \u65b9\u6cd5 \u8bf4\u660e response.content \u8fd4\u56de\u54cd\u5e94\u7684\u5185\u5bb9\uff0c\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d response.text \u4ee5\u6587\u672c\u65b9\u5f0f\u8fd4\u56de\u54cd\u5e94\u7684\u5185\u5bb9\uff0c\u7f16\u7801\u4e3aunicode response.json() \u8fd4\u56de\u54cd\u5e94\u7684json\u7f16\u7801\u5185\u5bb9\u5e76\u8f6c\u4e3adict\u7c7b\u578b response.close() \u5173\u95edsocket request\u4f7f\u7528\u793a\u4f8b import request import ujson url = \"http://httpbin.org/post\" data = {\"key1\": \"value1\", \"key2\": \"value2\", \"key3\": \"value3\"} # POST\u8bf7\u6c42 response = request.post(url, data=ujson.dumps(data)) print(response.text) log - \u65e5\u5fd7 \u6a21\u5757\u529f\u80fd\uff1a\u7cfb\u7edf\u65e5\u5fd7\u8bb0\u5f55,\u5206\u7ea7\u522b\u65e5\u5fd7\u5de5\u5177\u3002 log.basicConfig(level) \u8bbe\u7f6e\u65e5\u8bb0\u8f93\u51fa\u7ea7\u522b, \u8bbe\u7f6e\u65e5\u5fd7\u8f93\u51fa\u7ea7\u522b, \u9ed8\u8ba4\u4e3alog.INFO\uff0c\u7cfb\u7edf\u53ea\u4f1a\u8f93\u51fa level \u6570\u503c\u5927\u4e8e\u6216\u7b49\u4e8e\u8be5 level \u7684\u7684\u65e5\u5fd7\u7ed3\u679c\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u8bf4\u660e CRITICAL \u5e38\u91cf \u65e5\u5fd7\u8bb0\u5f55\u7ea7\u522b\u7684\u6570\u503c 50 ERROR \u5e38\u91cf \u65e5\u5fd7\u8bb0\u5f55\u7ea7\u522b\u7684\u6570\u503c 40 WARNING \u5e38\u91cf \u65e5\u5fd7\u8bb0\u5f55\u7ea7\u522b\u7684\u6570\u503c 30 INFO \u5e38\u91cf \u65e5\u5fd7\u8bb0\u5f55\u7ea7\u522b\u7684\u6570\u503c 20 DEBUG \u5e38\u91cf \u65e5\u5fd7\u8bb0\u5f55\u7ea7\u522b\u7684\u6570\u503c 10 NOTSET \u5e38\u91cf \u65e5\u5fd7\u8bb0\u5f55\u7ea7\u522b\u7684\u6570\u503c 0 \u793a\u4f8b import log log.basicConfig(level=log.INFO) log.getLogger(name) \u83b7\u53d6logger\u5bf9\u8c61\uff0c\u5982\u679c\u4e0d\u6307\u5b9aname\u5219\u8fd4\u56deroot\u5bf9\u8c61\uff0c\u591a\u6b21\u4f7f\u7528\u76f8\u540c\u7684name\u8c03\u7528getLogger\u65b9\u6cd5\u8fd4\u56de\u540c\u4e00\u4e2alogger\u5bf9\u8c61\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u8bf4\u660e name string \u65e5\u5fd7\u4e3b\u9898 \u8fd4\u56de\u503c log\u5bf9\u8c61\u3002 \u793a\u4f8b import log Testlog = log.getLogger (\u201cTestLog\u201d) log.debug(tag, msg) \u8f93\u51fadebug\u7ea7\u522b\u7684\u65e5\u5fd7\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u8bf4\u660e tag string \u6a21\u5757\u6216\u529f\u80fd\u540d\u79f0\uff0c\u4f5c\u4e3a\u65e5\u5fd7\u524d\u7f00 msg string \u53ef\u53d8\u53c2\u6570\uff0c\u65e5\u5fd7\u5185\u5bb9 \u8fd4\u56de\u503c \u65e0 \u793a\u4f8b import log Testlog = log.getLogger (\u201cTestLog\u201d) Testlog.debug(\"Test message: %d(%s)\", 100, \"foobar\") log.info(tag,msg) \u8f93\u51fainfo\u7ea7\u522b\u7684\u65e5\u5fd7\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u8bf4\u660e tag string \u6a21\u5757\u6216\u529f\u80fd\u540d\u79f0\uff0c\u4f5c\u4e3a\u65e5\u5fd7\u524d\u7f00 msg string \u53ef\u53d8\u53c2\u6570\uff0c\u65e5\u5fd7\u5185\u5bb9 \u8fd4\u56de\u503c \u65e0 \u793a\u4f8b import log Testlog = log.getLogger (\u201cTestLog\u201d) Testlog.info(\"Test message: %d(%s)\", 100, \"foobar\") log.warning(tag,msg) \u8f93\u51fawarning\u7ea7\u522b\u7684\u65e5\u5fd7\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u8bf4\u660e tag string \u6a21\u5757\u6216\u529f\u80fd\u540d\u79f0\uff0c\u4f5c\u4e3a\u65e5\u5fd7\u524d\u7f00 msg string \u53ef\u53d8\u53c2\u6570\uff0c\u65e5\u5fd7\u5185\u5bb9 \u8fd4\u56de\u503c \u65e0 \u793a\u4f8b import log Testlog = log.getLogger (\u201cTestLog\u201d) Testlog.warning(\"Test message: %d(%s)\", 100, \"foobar\") log.error(tag,msg) \u8f93\u51faerror\u7ea7\u522b\u7684\u65e5\u5fd7\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u8bf4\u660e tag string \u6a21\u5757\u6216\u529f\u80fd\u540d\u79f0\uff0c\u4f5c\u4e3a\u65e5\u5fd7\u524d\u7f00 msg string \u53ef\u53d8\u53c2\u6570\uff0c\u65e5\u5fd7\u5185\u5bb9 \u8fd4\u56de\u503c \u65e0 \u793a\u4f8b import log Testlog = log.getLogger (\u201cTestLog\u201d) Testlog.error(\"Test message: %d(%s)\", 100, \"foobar\") log.critical(tag,msg) \u8f93\u51facritical\u7ea7\u522b\u7684\u65e5\u5fd7\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u8bf4\u660e tag string \u6a21\u5757\u6216\u529f\u80fd\u540d\u79f0\uff0c\u4f5c\u4e3a\u65e5\u5fd7\u524d\u7f00 msg string \u53ef\u53d8\u53c2\u6570\uff0c\u65e5\u5fd7\u5185\u5bb9 \u8fd4\u56de\u503c \u65e0 \u793a\u4f8b import log Testlog = log.getLogger (\u201cTestLog\u201d) Testlog.critical(\"Test message: %d(%s)\", 100, \"foobar\") log\u4f7f\u7528\u793a\u4f8b import log log.basicConfig(level=log.INFO) # \u8bbe\u7f6e\u65e5\u5fd7\u8f93\u51fa\u7ea7\u522b # \u83b7\u53d6logger\u5bf9\u8c61\uff0c\u5982\u679c\u4e0d\u6307\u5b9aname\u5219\u8fd4\u56deroot\u5bf9\u8c61\uff0c\u591a\u6b21\u4f7f\u7528\u76f8\u540c\u7684name\u8c03\u7528getLogger\u65b9\u6cd5\u8fd4\u56de\u540c\u4e00\u4e2alogger\u5bf9\u8c61 log_obj = log.getLogger(\"test\") log_obj.debug(\"Test message: %d(%s)\", 100, \"foobar\") log_obj.info(\"Test message2: %d(%s)\", 100, \"foobar\") log_obj.warning(\"Test message3: %d(%s)\") log_obj.error(\"Test message4\") log_obj.critical(\"Test message5\") umqtt - MQTT \u6a21\u5757\u529f\u80fd:\u63d0\u4f9b\u521b\u5efaMQTT\u5ba2\u6237\u7aef\u53d1\u5e03\u8ba2\u9605\u529f\u80fd\u3002 QoS\u7ea7\u522b\u8bf4\u660e \u5728MQTT\u534f\u8bae\u4e2d\uff0c\u5b9a\u4e49\u4e86\u4e09\u4e2a\u7ea7\u522b\u7684QoS\uff0c\u5206\u522b\u662f\uff1a QoS0 \u2013 \u6700\u591a\u4e00\u6b21\uff0c\u662f\u6700\u4f4e\u7ea7\u522b\uff1b\u53d1\u9001\u8005\u53d1\u9001\u5b8c\u6d88\u606f\u4e4b\u540e\uff0c\u5e76\u4e0d\u5173\u5fc3\u6d88\u606f\u662f\u5426\u5df2\u7ecf\u5230\u8fbe\u63a5\u6536\u65b9\uff1b QoS1 \u2013 \u81f3\u5c11\u4e00\u6b21\uff0c\u662f\u4e2d\u95f4\u7ea7\u522b\uff1b\u53d1\u9001\u8005\u4fdd\u8bc1\u6d88\u606f\u81f3\u5c11\u9001\u8fbe\u5230\u63a5\u6536\u65b9\u4e00\u6b21\uff1b QoS2 \u2013 \u6709\u4e14\u4ec5\u6709\u4e00\u6b21\uff0c\u662f\u6700\u9ad8\u7ea7\u522b\uff1b\u4fdd\u8bc1\u6d88\u606f\u9001\u8fbe\u4e14\u4ec5\u9001\u8fbe\u4e00\u6b21\u3002 MQTTClient(client_id, server, port=0, user=None, password=None, keepalive=0, ssl=False, ssl_params={}) \u6784\u5efamqtt\u8fde\u63a5\u5bf9\u8c61\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u8bf4\u660e client_id string \u5ba2\u6237\u7aef ID\uff0c\u5177\u6709\u552f\u4e00\u6027 server string \u670d\u52a1\u7aef\u5730\u5740\uff0c\u53ef\u4ee5\u662f IP \u6216\u8005\u57df\u540d port int \u670d\u52a1\u5668\u7aef\u53e3\uff08\u53ef\u9009\uff09\u3002 \u9ed8\u8ba4\u4e3a1883\uff0c\u8bf7\u6ce8\u610f\uff0cMQTT over SSL/TLS\u7684\u9ed8\u8ba4\u7aef\u53e3\u662f8883 user string \uff08\u53ef\u9009) \u5728\u670d\u52a1\u5668\u4e0a\u6ce8\u518c\u7684\u7528\u6237\u540d password string \uff08\u53ef\u9009) \u5728\u670d\u52a1\u5668\u4e0a\u6ce8\u518c\u7684\u5bc6\u7801 keepalive int \uff08\u53ef\u9009\uff09\u5ba2\u6237\u7aef\u7684keepalive\u8d85\u65f6\u503c\u3002 \u9ed8\u8ba4\u4e3a60\u79d2\uff0c\u8303\u56f4\uff0860~1200\uff09s ssl bool \uff08\u53ef\u9009\uff09\u662f\u5426\u4f7f\u80fd SSL/TLS \u652f\u6301 ssl_params string \uff08\u53ef\u9009\uff09SSL/TLS \u53c2\u6570 \u8fd4\u56de\u503c mqtt\u5bf9\u8c61\u3002 MQTTClient.set_callback(callback) \u8bbe\u7f6e\u56de\u8c03\u51fd\u6570\uff0c\u6536\u5230\u6d88\u606f\u65f6\u4f1a\u88ab\u8c03\u7528\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u8bf4\u660e callback function \u6d88\u606f\u56de\u8c03\u51fd\u6570 \u8fd4\u56de\u503c \u65e0 MQTTClient.set_last_will(topic,msg,retain=False,qos=0) \u8bbe\u7f6e\u8981\u53d1\u9001\u7ed9\u670d\u52a1\u5668\u7684\u9057\u5631\uff0c\u5ba2\u6237\u7aef\u6ca1\u6709\u8c03\u7528disconnect()\u5f02\u5e38\u65ad\u5f00\uff0c\u5219\u53d1\u9001\u901a\u77e5\u5230\u5ba2\u6237\u7aef\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u8bf4\u660e topic string \u9057\u5631\u4e3b\u9898 msg string \u9057\u5631\u7684\u5185\u5bb9 retain bool retain = True boker\u4f1a\u4e00\u76f4\u4fdd\u7559\u6d88\u606f\uff0c\u9ed8\u8ba4False qos int \u6d88\u606f\u670d\u52a1\u8d28\u91cf(0~2) \u8fd4\u56de\u503c \u65e0 MQTTClient.connect(clean_session=True) \u4e0e\u670d\u52a1\u5668\u5efa\u7acb\u8fde\u63a5\uff0c\u8fde\u63a5\u5931\u8d25\u4f1a\u5bfc\u81f4MQTTException\u5f02\u5e38\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u8bf4\u660e clean_session bool \u53ef\u9009\u53c2\u6570\uff0c\u4e00\u4e2a\u51b3\u5b9a\u5ba2\u6237\u7aef\u7c7b\u578b\u7684\u5e03\u5c14\u503c\u3002 \u5982\u679c\u4e3aTrue\uff0c\u90a3\u4e48\u4ee3\u7406\u5c06\u5728\u5176\u65ad\u5f00\u8fde\u63a5\u65f6\u5220\u9664\u6709\u5173\u6b64\u5ba2\u6237\u7aef\u7684\u6240\u6709\u4fe1\u606f\u3002 \u5982\u679c\u4e3aFalse\uff0c\u5219\u5ba2\u6237\u7aef\u662f\u6301\u4e45\u5ba2\u6237\u7aef\uff0c\u5f53\u5ba2\u6237\u7aef\u65ad\u5f00\u8fde\u63a5\u65f6\uff0c\u8ba2\u9605\u4fe1\u606f\u548c\u6392\u961f\u6d88\u606f\u5c06\u88ab\u4fdd\u7559\u3002\u9ed8\u8ba4\u4e3aFalse \u8fd4\u56de\u503c \u65e0 MQTTClient.disconnect() \u4e0e\u670d\u52a1\u5668\u65ad\u5f00\u8fde\u63a5\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u65e0 MQTTClient.ping() \u5f53keepalive\u4e0d\u4e3a0\u4e14\u5728\u65f6\u9650\u5185\u6ca1\u6709\u901a\u8baf\u6d3b\u52a8\uff0c\u4f1a\u4e3b\u52a8\u5411\u670d\u52a1\u5668\u53d1\u9001ping\u5305,\u68c0\u6d4b\u4fdd\u6301\u8fde\u901a\u6027\uff0ckeepalive\u4e3a0\u5219\u4e0d\u5f00\u542f\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u65e0 MQTTClient.publish(topic,msg,qos) \u53d1\u5e03\u6d88\u606f\u3002 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e topic string \u6d88\u606f\u4e3b\u9898 msg string \u9700\u8981\u53d1\u9001\u7684\u6570\u636e qos int MQTT\u6d88\u606f\u670d\u52a1\u8d28\u91cf\uff08\u9ed8\u8ba40\uff0c\u53ef\u9009\u62e90\u62161\uff090\uff1a\u53d1\u9001\u8005\u53ea\u53d1\u9001\u4e00\u6b21\u6d88\u606f\uff0c\u4e0d\u8fdb\u884c\u91cd\u8bd5 1\uff1a\u53d1\u9001\u8005\u6700\u5c11\u53d1\u9001\u4e00\u6b21\u6d88\u606f\uff0c\u786e\u4fdd\u6d88\u606f\u5230\u8fbeBroker \u8fd4\u56de\u503c \u65e0 MQTTClient.subscribe(topic,qos) \u8ba2\u9605mqtt\u4e3b\u9898\u3002 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e topic string topic qos int MQTT\u6d88\u606f\u670d\u52a1\u8d28\u91cf\uff08\u9ed8\u8ba40\uff0c\u53ef\u9009\u62e90\u62161\uff090\uff1a\u53d1\u9001\u8005\u53ea\u53d1\u9001\u4e00\u6b21\u6d88\u606f\uff0c\u4e0d\u8fdb\u884c\u91cd\u8bd5 1\uff1a\u53d1\u9001\u8005\u6700\u5c11\u53d1\u9001\u4e00\u6b21\u6d88\u606f\uff0c\u786e\u4fdd\u6d88\u606f\u5230\u8fbeBroker \u8fd4\u56de\u503c \u65e0 MQTTClient.check_msg() \u68c0\u67e5\u670d\u52a1\u5668\u662f\u5426\u6709\u5f85\u5904\u7406\u6d88\u606f\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u65e0 MQTTClient.wait_msg() \u963b\u585e\u7b49\u5f85\u670d\u52a1\u5668\u6d88\u606f\u54cd\u5e94\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u65e0 \u793a\u4f8b\u4ee3\u7801 import utime from umqtt import MQTTClient state = 0 def sub_cb(topic, msg): ''' \u6d88\u606f\u56de\u8c03\u51fd\u6570 ''' global state mqtt_log.info(\"Subscribe Recv: Topic={},Msg={}\".format(topic.decode(), msg.decode())) state = 1 c = MQTTClient(\"umqtt_client\", \"mq.tongxinmao.com\", 18830) c.set_callback(sub_cb) c.connect() c.subscribe(b\"/public/TEST/quecpython\") c.publish(b\"/public/TEST/quecpython\", b\"my name is Quecpython!\") while True: c.wait_msg() # \u963b\u585e\u51fd\u6570\uff0c\u76d1\u542c\u6d88\u606f if state == 1: break # \u5173\u95ed\u8fde\u63a5 c.disconnect() ntptime - NTP\u5bf9\u65f6 \u6a21\u5757\u529f\u80fd\uff1a\u8be5\u6a21\u5757\u7528\u4e8e\u65f6\u95f4\u540c\u6b65\u3002 ntptime.host \u8fd4\u56de\u5f53\u524d\u7684ntp\u670d\u52a1\u5668\uff0c\u9ed8\u8ba4\u4e3a\"ntp.aliyun.com\"\u3002 ntptime.sethost(host) \u8bbe\u7f6entp\u670d\u52a1\u5668\u3002 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e host string ntp\u670d\u52a1\u5668\u5730\u5740 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u6574\u578b\u503c0\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\u3002 ntptime.settime() \u540c\u6b65ntp\u65f6\u95f4\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u6574\u578b\u503c0\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\u3002 ntptime\u4f7f\u7528\u793a\u4f8b import ntptime ntptime.sethost('pool.ntp.org') # set the ntp service ntptime.settime() # sync the local time \u200b QuecPython QPYcom GUI\u5de5\u5177\u4f7f\u7528 \u53c2\u89c1\u300aQuectel QuecPython_QPYcom\u5de5\u5177\u4f7f\u7528\u8bf4\u660e_V1.0\u300b QuecPython APP\u5f00\u53d1\u6d41\u7a0b\u4ecb\u7ecd","title":"QuecPython\u5f00\u53d1\u51c6\u5907"},{"location":"QuecPython%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/#quecpython","text":"For full documentation visit http://python.quectel.com/.","title":"QuecPython\u5f00\u53d1\u51c6\u5907"},{"location":"QuecPython%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/#quecpythonsdk","text":"\u5b98\u7f51\u8d44\u6e90\u4ecb\u7ecd\uff08\u624b\u628a\u624b\u6559\u5b66\u6587\u6863\u3001\u6559\u5b66\u89c6\u9891\u3001wiki\u3001\u4e0b\u8f7d\u8d44\u6e90\u7b49\uff09 QuecPython\u5f00\u53d1\u4ea4\u6d41QQ\u7fa4\u3001\u5fae\u4fe1\u516c\u4f17\u53f7","title":"QuecPython\u5b98\u7f51\u4ecb\u7ecd\u53caSDK\u5305\u83b7\u53d6"},{"location":"QuecPython%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/#quecpython_1","text":"QuecPython \u652f\u6301\u7684\u5e73\u53f0\uff08CAT1/CATM/NB\uff09 \u5f00\u53d1\u677f\u4ecb\u7ecd\uff08EC100Y/EC600S/EC200U\uff09 \u5916\u8bbe\u8d44\u6e90\u5e93\uff08LCD/Sensor/SD\uff09","title":"\u521d\u59cbQuecPython\u5f00\u53d1\u677f"},{"location":"QuecPython%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/#quecpython_2","text":"\u4e32\u53e3\u9a71\u52a8\u5b89\u88c5\uff08UART/USB CDC\uff09 \u4e32\u53e3\u5de5\u5177\u4ecb\u7ecd\u673a\u57fa\u7840\u4fe1\u606f\u67e5\u8be2 Python\u4ee3\u7801\u7f16\u8f91\u5de5\u5177\u4ecb\u7ecd \u5f00\u53d1\u6a21\u578b\u7b80\u4ecb\uff08\u56fe\u6587\u4ecb\u7ecdQuecPython\u8fd0\u884c\u6a21\u578b,PC/\u4e32\u53e3/\u6a21\u5757\u8fd0\u884c\u73af\u5883\u7684\u5173\u7cfb\uff09","title":"QuecPython\u5f00\u53d1\u73af\u5883\u642d\u5efa"},{"location":"QuecPython%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/#quecpython-api","text":"","title":"QuecPython API\u7c7b\u5e93\u4ecb\u7ecd"},{"location":"QuecPython%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/#micropython","text":"","title":"MicroPython\u6807\u51c6\u5e93\u548c\u5fae\u5e93"},{"location":"QuecPython%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/#python","text":"","title":"Python\u57fa\u7840\u5c5e\u6027"},{"location":"QuecPython%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/#_1","text":"Python \u89e3\u91ca\u5668\u5185\u7f6e\u4e86\u5f88\u591a\u51fd\u6570\u548c\u7c7b\u578b\uff0c\u60a8\u53ef\u4ee5\u5728\u4efb\u4f55\u65f6\u5019\u4f7f\u7528\u5b83\u4eec\uff0c\u4ee5\u4e0b\u6309\u5b57\u6bcd\u8868\u987a\u5e8f\u5217\u51fa\u5b83\u4eec\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605CPython\u6587\u6863\uff1a Built-in Functions \u5185\u7f6e\u51fd\u6570 abs() all() any() bin() callable() chr() classmethod() compile() delattr() dir() divmod() enumerate() eval() exec() filter() getattr() globals() hasattr() hash() hex() id() input() isinstance() issubclass() iter() len() locals() map() max() min() next() oct() open() ord() pow() print() property() range() repr() reversed() round() setattr() sorted() staticmothed() sum() super() type() zip()","title":"\u5185\u7f6e\u51fd\u6570"},{"location":"QuecPython%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/#_2","text":"\u6709\u5c11\u6570\u7684\u5e38\u91cf\u5b58\u5728\u4e0e\u5185\u7f6e\u547d\u540d\u7a7a\u95f4\u4e2d\uff0c\u5982\u4e0b\u8868\u6240\u793a\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605\u9605CPython\u6587\u6863\uff1a Built-in Constants \u5185\u7f6e\u5e38\u91cf False bool \u7c7b\u578b\u7684\u5047\u503c True bool \u7c7b\u578b\u7684\u771f\u503c None Nonetype\u7c7b\u578b\u7684\u552f\u4e00\u503c __debug__ Python\u6ca1\u6709\u4ee5 -O \u9009\u9879\u542f\u52a8\uff0c\u5219\u6b64\u5e38\u91cf\u4e3a\u771f\u503c Ellipsis \u4e0e\u7528\u6237\u5b9a\u4e49\u7684\u5bb9\u5668\u6570\u636e\u7c7b\u578b\u7684\u6269\u5c55\u5207\u7247\u8bed\u6cd5\u7ed3\u5408\u4f7f\u7528 NotImplemented \u4e8c\u8fdb\u5236\u7279\u6b8a\u65b9\u6cd5\u5e94\u8fd4\u56de\u7684\u7279\u6b8a\u503c\uff08\u4f8b\u5982\uff0c eq() \u3001__lt()__\u7b49\uff09\u8868\u793a\u64cd\u4f5c\u6ca1\u6709\u9488\u5bf9\u5176\u4ed6\u7c7b\u578b\u5b9e\u73b0","title":"\u5185\u7f6e\u5e38\u91cf"},{"location":"QuecPython%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/#_3","text":"\u4e0b\u8868\u5217\u51fa\u5185\u7f6e\u7684\u6570\u636e\u7c7b\u578b\uff0c\u66f4\u591a\u8be6\u60c5\u8bf7\u53c2\u9605\u9605CPython\u6587\u6863\uff1a Built-in Types \u5185\u7f6e\u7c7b\u578b int \u6574\u6570\uff0c\u6570\u503c\u7c7b\u578b float \u6d6e\u70b9\u6570\uff0c\u6570\u503c\u7c7b\u578b complex \u590d\u6570\uff0c\u6570\u503c\u7c7b\u578b bool bool\uff0c\u6570\u503c\u7c7b\u578b list \u5217\u8868\uff0c\u5e8f\u5217\u7c7b\u578b tuple \u5143\u7ec4\uff0c\u5e8f\u5217\u7c7b\u578b range range\u5bf9\u8c61\uff0c\u5e8f\u5217\u7c7b\u578b str \u5b57\u7b26\u4e32\uff0c\u5e8f\u5217\u7c7b\u578b bytes \u5355\u4e2a\u5b57\u8282\u6784\u6210\u7684\u4e0d\u53ef\u53d8\u5e8f\u5217\uff0c\u5e8f\u5217\u7c7b\u578b bytearray bytes\u5bf9\u8c61\u7684\u53ef\u53d8\u5bf9\u5e94\u7269\uff0c\u5e8f\u5217\u7c7b\u578b memoryview \u4e8c\u8fdb\u5236\u5e8f\u5217 dict \u5b57\u5178\uff0c\u6620\u5c04\u7c7b\u578b set \u96c6\u5408 frozenset \u96c6\u5408\uff0c\u4e0d\u53ef\u4fee\u6539\uff0c\u5177\u6709\u54c8\u5e0c\u503c object \u5bf9\u8c61\uff0cpython3.x\u540eclass\u9ed8\u8ba4\u7684\u57fa\u7c7b slice \u51fd\u6570\uff0c\u5207\u7247","title":"\u5185\u7f6e\u7c7b\u578b"},{"location":"QuecPython%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/#_4","text":"","title":"\u6807\u51c6\u5e93"},{"location":"QuecPython%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/#uos-","text":"uos\u6a21\u5757\u5305\u542b\u6587\u4ef6\u7cfb\u7edf\u8bbf\u95ee\u548c\u6302\u8f7d\u6784\u5efa\uff0c\u8be5\u6a21\u5757\u5b9e\u73b0\u4e86CPython\u6a21\u5757\u76f8\u5e94\u6a21\u5757\u7684\u5b50\u96c6\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605\u9605CPython\u6587\u6863\uff1a os uos.remove(path) \u5220\u9664\u6587\u4ef6\u3002path\u8868\u793a\u6587\u4ef6\u540d\u3002 uos.chdir(path) \u6539\u53d8\u5f53\u524d\u76ee\u5f55\u3002path\u8868\u793a\u76ee\u5f55\u540d\u3002 uos.getcwd() \u83b7\u53d6\u5f53\u524d\u8def\u5f84\u3002 uos.listdir( [dir] ) \u6ca1\u6709\u53c2\u6570\u5217\u51fa\u5f53\u524d\u76ee\u5f55\u6587\u4ef6\uff0c\u5426\u5219\u5217\u51fa\u7ed9\u5b9a\u76ee\u5f55\u7684\u6587\u4ef6\u3002dir\u4e3a\u53ef\u9009\u53c2\u6570\uff0c\u8868\u793a\u76ee\u5f55\u540d\uff0c\u9ed8\u8ba4\u4e3a \u2018/\u2019 \u76ee\u5f55\u3002 \u793a\u4f8b\uff1a >>> uos.listdir() [\u2018file1\u2019, \u2018read.txt\u2019, \u2018demo.py\u2019] uos.mkdir(path) \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u76ee\u5f55\u3002path\u8868\u793a\u51c6\u5907\u521b\u5efa\u7684\u76ee\u5f55\u540d\u3002 \u793a\u4f8b\uff1a >>> uos.mkdir('testdir') >>> uos.listdir() [\u2018file1\u2019, \u2018read.txt\u2019, \u2018demo.py\u2019, 'testdir'] uos.rename(old_path, new_path) \u91cd\u547d\u540d\u6587\u4ef6\u3002old_path\u8868\u793a\u65e7\u6587\u4ef6\u6216\u76ee\u5f55\u540d\uff0cnew_path\u8868\u793a\u65b0\u6587\u4ef6\u6216\u76ee\u5f55\u540d\u3002 \u793a\u4f8b\uff1a >>> uos.rename('testdir', 'testdir1') uos.rmdir(path) \u5220\u9664\u6307\u5b9a\u76ee\u5f55\u3002path\u8868\u793a\u76ee\u5f55\u540d\u3002 \u793a\u4f8b\uff1a >>> uos.rmdir('testdir') >>> uos.listdir() [\u2018file1\u2019, \u2018read.txt\u2019, \u2018demo.py\u2019] uos.ilistdir( [dir] ) \u8be5\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u8be5\u8fed\u4ee3\u5668\u4f1a\u751f\u6210\u6240\u5217\u51fa\u6761\u76ee\u5bf9\u5e94\u76843\u5143\u7ec4\u3002dir\u4e3a\u53ef\u9009\u53c2\u6570\uff0c\u8868\u793a\u76ee\u5f55\u540d\uff0c\u6ca1\u6709\u53c2\u6570\u65f6\uff0c\u9ed8\u8ba4\u5217\u51fa\u5f53\u524d\u76ee\u5f55\uff0c\u6709\u53c2\u6570\u65f6\uff0c\u5219\u5217\u51fadir\u53c2\u6570\u6307\u5b9a\u7684\u76ee\u5f55\u3002\u5143\u7ec4\u7684\u5f62\u5f0f\u4e3a (name, type, inode[, size]) : name \u662f\u6761\u76ee\u7684\u540d\u79f0\uff0c\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u5982\u679cdir\u662f\u5b57\u8282\u5bf9\u8c61\uff0c\u5219\u540d\u79f0\u4e3a\u5b57\u8282; type \u662f\u6761\u76ee\u7684\u7c7b\u578b\uff0c\u6574\u578b\u6570\uff0c0x4000\u8868\u793a\u76ee\u5f55\uff0c0x8000\u8868\u793a\u5e38\u89c4\u6587\u4ef6\uff1b \u662f\u4e00\u4e2a\u4e0e\u6587\u4ef6\u7684\u7d22\u5f15\u8282\u70b9\u76f8\u5bf9\u5e94\u7684\u6574\u6570\uff0c\u5bf9\u4e8e\u6ca1\u6709\u8fd9\u79cd\u6982\u5ff5\u7684\u6587\u4ef6\u7cfb\u7edf\u6765\u8bf4\uff0c\u53ef\u80fd\u4e3a0\uff1b \u4e00\u4e9b\u5e73\u53f0\u53ef\u80fd\u4f1a\u8fd4\u56de\u4e00\u4e2a4\u5143\u7ec4\uff0c\u5176\u4e2d\u5305\u542b\u6761\u76ee\u7684size\u3002\u5bf9\u4e8e\u6587\u4ef6\u6761\u76ee\uff0csize\u8868\u793a\u6587\u4ef6\u5927\u5c0f\u7684\u6574\u6570\uff0c\u5982\u679c\u672a\u77e5\uff0c\u5219\u4e3a-1\u3002\u5bf9\u4e8e\u76ee\u5f55\u9879\uff0c\u5176\u542b\u4e49\u76ee\u524d\u5c1a\u672a\u5b9a\u4e49\u3002 uos.stat(path) \u83b7\u53d6\u6587\u4ef6\u6216\u76ee\u5f55\u7684\u72b6\u6001\u3002path\u8868\u793a\u6587\u4ef6\u6216\u76ee\u5f55\u540d\u3002\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u5143\u7ec4\uff0c\u8fd4\u56de\u503c\u5f62\u5f0f\u4e3a\uff1a (mode, ino, dev, nlink, uid, gid, size, atime, mtime, ctime) mode \u2013 inode\u4fdd\u62a4\u6a21\u5f0f ino \u2013 inode\u8282\u70b9\u53f7 dev \u2013 inode\u9a7b\u7559\u7684\u8bbe\u5907 nlink \u2013 inode\u7684\u94fe\u63a5\u6570 uid \u2013 \u6240\u6709\u8005\u7684\u7528\u6237ID gid \u2013 \u6240\u6709\u8005\u7684\u7ec4ID size \u2013 \u6587\u4ef6\u5927\u5c0f\uff0c\u5355\u4f4d\u5b57\u8282 atime \u2013 \u4e0a\u6b21\u8bbf\u95ee\u7684\u65f6\u95f4 mtime \u2013 \u6700\u540e\u4e00\u6b21\u4fee\u6539\u7684\u65f6\u95f4 ctime \u2013 \u64cd\u4f5c\u7cfb\u7edf\u62a5\u544a\u7684\u201cctime\u201d\uff0c\u5728\u67d0\u4e9b\u7cfb\u7edf\u4e0a\u662f\u6700\u65b0\u7684\u5143\u6570\u636e\u66f4\u6539\u7684\u65f6\u95f4\uff0c\u5728\u5176\u5b83\u7cfb\u7edf\u4e0a\u662f\u521b\u5efa\u65f6\u95f4\uff0c\u8be6\u7ec6\u4fe1\u606f\u53c2\u89c1\u5e73\u53f0\u6587\u6863 uos.statvfs(path) \u83b7\u53d6\u6587\u4ef6\u7cfb\u7edf\u72b6\u6001\u4fe1\u606f\u3002path\u8868\u793a\u6587\u4ef6\u6216\u76ee\u5f55\u540d\u3002\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u6587\u4ef6\u7cfb\u7edf\u4fe1\u606f\u7684\u5143\u7ec4\uff1a (f_bsize, f_frsize, f_blocks, f_bfree, f_bavail, f_files, f_ffree, f_favail, f_flag, f_namemax) f_bsize \u2013 \u6587\u4ef6\u7cfb\u7edf\u5757\u5927\u5c0f\uff0c\u5355\u4f4d\u5b57\u8282 f_frsize \u2013 \u5206\u6808\u5927\u5c0f\uff0c\u5355\u4f4d\u5b57\u8282 f_blocks \u2013 \u6587\u4ef6\u7cfb\u7edf\u6570\u636e\u5757\u603b\u6570 f_bfree \u2013 \u53ef\u7528\u5757\u6570 f_bavai \u2013 \u975e\u8d85\u7ea7\u7528\u6237\u53ef\u83b7\u53d6\u7684\u5757\u6570 f_files \u2013 \u6587\u4ef6\u7ed3\u70b9\u603b\u6570 f_ffree \u2013 \u53ef\u7528\u6587\u4ef6\u7ed3\u70b9\u6570 f_favail \u2013 \u8d85\u7ea7\u7528\u6237\u7684\u53ef\u7528\u6587\u4ef6\u7ed3\u70b9\u6570 f_flag \u2013 \u6302\u8f7d\u6807\u8bb0 f_namemax \u2013 \u6700\u5927\u6587\u4ef6\u957f\u5ea6\uff0c\u5355\u4f4d\u5b57\u8282 \u793a\u4f8b\uff1a >>> import uos >>> res = uos.statvfs(\"main.py\") >>> print(res) (4096, 4096, 256, 249, 249, 0, 0, 0, 0, 255) uos.uname() \u83b7\u53d6\u5173\u4e8e\u5e95\u5c42\u4fe1\u606f\u6216\u5176\u64cd\u4f5c\u7cfb\u7edf\u7684\u4fe1\u606f\u3002\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4\uff0c\u5f62\u5f0f\u4e3a\uff1a (sysname, nodename, release, version, machine) sysname \u2013 \u5e95\u5c42\u7cfb\u7edf\u7684\u540d\u79f0\uff0cstring\u7c7b\u578b nodename \u2013 \u7f51\u7edc\u540d\u79f0(\u53ef\u4ee5\u4e0e sysname \u76f8\u540c) \uff0cstring\u7c7b\u578b release \u2013 \u5e95\u5c42\u7cfb\u7edf\u7684\u7248\u672c\uff0cstring\u7c7b\u578b version \u2013 MicroPython\u7248\u672c\u548c\u6784\u5efa\u65e5\u671f\uff0cstring\u7c7b\u578b machine \u2013 \u5e95\u5c42\u786c\u4ef6(\u5982\u4e3b\u677f\u3001CPU)\u7684\u6807\u8bc6\u7b26\uff0cstring\u7c7b\u578b \u793a\u4f8b\uff1a >>> import uos >>> uos.uname() (sysname='EC100Y', nodename='EC100Y', release='1.12.0', version='v1.12 on 2020-06-23', machine='EC100Y with QUECTEL') uos.urandom(n) \u8fd4\u56de\u5177\u6709 n\u4e2a \u968f\u673a\u5b57\u8282\u7684bytes\u5bf9\u8c61\uff0c\u53ea\u8981\u6709\u53ef\u80fd\uff0c\u5b83\u5c31\u4f1a\u7531\u786c\u4ef6\u968f\u673a\u6570\u751f\u6210\u5668\u751f\u6210\u3002 \u793a\u4f8b\uff1a >>> import uos >>> uos.urandom(5) b'\\xb3\\xc9Y\\x1b\\xe9'","title":"uos - \u57fa\u672c\u7cfb\u7edf\u670d\u52a1"},{"location":"QuecPython%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/#gc-","text":"gc \u6a21\u5757\u5b9e\u73b0\u5185\u5b58\u5783\u573e\u56de\u6536\u673a\u5236\uff0c\u8be5\u6a21\u5757\u5b9e\u73b0\u4e86CPython\u6a21\u5757\u76f8\u5e94\u6a21\u5757\u7684\u5b50\u96c6\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605\u9605CPython\u6587\u6863\uff1a gc gc.enable() \u542f\u7528\u81ea\u52a8\u56de\u6536\u5185\u5b58\u788e\u7247\u673a\u5236\u3002 gc.disable() \u7981\u7528\u81ea\u52a8\u56de\u6536\u673a\u5236\u3002 gc.collect() \u56de\u6536\u5185\u5b58\u788e\u7247\u3002 gc.mem_alloc() \u8fd4\u56de\u5206\u914d\u7684\u5806RAM\u7684\u5b57\u8282\u6570\u3002\u6b64\u529f\u80fd\u662fMicroPython\u6269\u5c55\u3002 gc.mem_free() \u8fd4\u56de\u53ef\u7528\u5806RAM\u7684\u5b57\u8282\u6570\uff0c\u5982\u679c\u6b64\u6570\u91cf\u672a\u77e5\uff0c\u5219\u8fd4\u56de-1\u3002\u6b64\u529f\u80fd\u662fMicroPython\u6269\u5c55\u3002","title":"gc - \u5185\u5b58\u788e\u7247\u56de\u6536"},{"location":"QuecPython%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/#ubinascii-ascii","text":"ubinascii \u6a21\u5757\u5b9e\u73b0\u4e86\u4e8c\u8fdb\u5236\u6570\u636e\u4e0e\u5404\u79cdASCII\u7f16\u7801\u4e4b\u95f4\u7684\u8f6c\u6362(\u53cc\u5411)\uff0c\u8be5\u6a21\u5757\u5b9e\u73b0\u4e86CPython\u6a21\u5757\u76f8\u5e94\u6a21\u5757\u7684\u5b50\u96c6\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605\u9605CPython\u6587\u6863\uff1a binascii ubinascii.a2b_base64(data) \u89e3\u7801base64\u7f16\u7801\u7684\u6570\u636e\uff0c\u4f1a\u81ea\u52a8\u5ffd\u7565\u8f93\u5165\u4e2d\u7684\u65e0\u6548\u5b57\u7b26\uff0c\u8fd4\u56de bytes \u5bf9\u8c61\u3002 ubinascii.b2a_base64(data) \u4ee5base64\u683c\u5f0f\u7f16\u7801\u4e8c\u8fdb\u5236\u6570\u636e\uff0c\u8fd4\u56de\u7f16\u7801\u6570\u636e\u3002\u540e\u9762\u8ddf\u6362\u884c\u7b26\uff0c\u4f5c\u4e3a bytes \u5bf9\u8c61\u3002 ubinascii.hexlify(data, [sep]) \u5c06\u4e8c\u8fdb\u5236\u6570\u636e\u8f6c\u6362\u4e3a\u5341\u516d\u8fdb\u5236\u5b57\u7b26\u4e32\u8868\u793a\u3002 \u793a\u4f8b\uff1a >>> import ubinascii # \u6ca1\u6709sep\u53c2\u6570 >>> ubinascii.hexlify('\\x11\\x22123') b'1122313233' >>> ubinascii.hexlify('abcdfg') b'616263646667' # \u6307\u5b9a\u4e86\u7b2c\u4e8c\u4e2a\u53c2\u6570sep\uff0c\u5b83\u5c06\u7528\u4e8e\u5206\u9694\u4e24\u4e2a\u5341\u516d\u8fdb\u5236\u6570 >>> ubinascii.hexlify('\\x11\\x22123', ' ') b'11 22 31 32 33' >>> ubinascii.hexlify('\\x11\\x22123', ',') b'11,22,31,32,33' ubinascii.unhexlify(data) \u5c06\u5341\u516d\u8fdb\u5236\u5f62\u5f0f\u7684\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u4e8c\u8fdb\u5236\u5f62\u5f0f\u7684\u5b57\u7b26\u4e32\u8868\u793a\u3002 \u793a\u4f8b\uff1a >>> import ubinascii >>> ubinascii.unhexlify('313222') b'12\"'","title":"ubinascii - \u4e8c\u8fdb\u5236\u4e0eASCII\u8f6c\u6362"},{"location":"QuecPython%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/#ucollections-","text":"ucollections \u6a21\u5757\u7528\u4e8e\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5bb9\u5668\u7c7b\u578b\uff0c\u7528\u4e8e\u4fdd\u5b58\u5404\u79cd\u5bf9\u8c61\u3002\u8be5\u6a21\u5757\u5b9e\u73b0\u4e86CPython\u6a21\u5757\u76f8\u5e94\u6a21\u5757\u7684\u5b50\u96c6\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605\u9605CPython\u6587\u6863\uff1a collections mytuple = ucollections.namedtuple(name, fields) \u521b\u5efa\u4e00\u4e2a\u5177\u6709\u7279\u5b9a\u540d\u79f0\u548c\u4e00\u7ec4\u5b57\u6bb5\u7684\u65b0namedtuple\u5bb9\u5668\u7c7b\u578b\uff0cnamedtuple\u662f\u5143\u7ec4\u7684\u5b50\u7c7b\uff0c\u5141\u8bb8\u901a\u8fc7\u7d22\u5f15\u6765\u8bbf\u95ee\u5b83\u7684\u5b57\u6bb5\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e name str \u65b0\u521b\u5efa\u5bb9\u5668\u7684\u7c7b\u578b\u540d\u79f0 fields tuple \u65b0\u521b\u5efa\u5bb9\u5668\u7c7b\u578b\u5305\u542b\u5b50\u7c7b\u578b\u7684\u5b57\u6bb5 \u793a\u4f8b\uff1a >>> import ucollections >>> mytuple = ucollections.namedtuple(\"mytuple\", (\"id\", \"name\")) >>> t1 = mytuple(1, \"foo\") >>> t2 = mytuple(2, \"bar\") >>> print(t1.name) foo dq = ucollections.deque(iterable, maxlen, flag) \u521b\u5efadeque\u53cc\u5411\u961f\u5217 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e iterable tuple iterable\u5fc5\u987b\u662f\u7a7a\u5143\u7ec4 maxlen int \u6307\u5b9amaxlen\u5e76\u5c06\u53cc\u7aef\u961f\u5217\u9650\u5236\u4e3a\u6b64\u6700\u5927\u957f\u5ea6 flag int \u53ef\u9009\u53c2\u6570\uff1b0(\u9ed8\u8ba4)\uff1a\u4e0d\u68c0\u67e5\u961f\u5217\u662f\u5426\u6ea2\u51fa\uff0c\u8fbe\u5230\u6700\u5927\u957f\u5ea6\u65f6\u7ee7\u7eedappend\u4f1a\u4e22\u5f03\u4e4b\u524d\u7684\u503c \uff0c1\uff1a\u5f53\u961f\u5217\u8fbe\u5230\u6700\u5927\u8bbe\u5b9a\u957f\u5ea6\u4f1a\u629b\u51faIndexError: full \u8fd4\u56de\u503c deque\u5bf9\u8c61 deque\u5bf9\u8c61\u65b9\u6cd5 \u200b dq.append(data) \u5f80\u961f\u5217\u4e2d\u63d2\u5165\u503c\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e data \u57fa\u672c\u6570\u636e\u7c7b\u578b \u9700\u8981\u6dfb\u52a0\u5230\u961f\u5217\u7684\u6570\u503c \u8fd4\u56de\u503c \u65e0 \u200b dq.popleft() \u4ecedeque\u7684\u5de6\u4fa7\u79fb\u9664\u5e76\u8fd4\u56de\u79fb\u9664\u7684\u6570\u636e\u3002\u5982\u679c\u6ca1\u6709deque\u4e3a\u7a7a\uff0c\u4f1a\u5f15\u8d77\u7d22\u5f15\u9519\u8bef \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u8fd4\u56depop\u51fa\u7684\u503c \u4f7f\u7528\u793a\u4f8b from ucollections import deque dq = deque((),5) dq.append(1) dq.append([\"a\"]) dq.append(\"a\") dq.popleft() # 1 dq.popleft() # [\"a\"] dq.popleft() # a","title":"ucollections - \u96c6\u5408\u548c\u5bb9\u5668\u7c7b\u578b"},{"location":"QuecPython%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/#urandom-","text":"urandom \u6a21\u5757\u63d0\u4f9b\u4e86\u751f\u6210\u968f\u673a\u6570\u7684\u5de5\u5177\u3002 urandom.choice(obj) \u968f\u673a\u751f\u6210\u5bf9\u8c61 obj \u4e2d\u7684\u5143\u7d20\uff0cobj \u7c7b\u578b string\u3002 \u793a\u4f8b\uff1a >>> import urandom >>> urandom.choice(\"QuecPython\") 't' urandom.getrandbits(k) \u968f\u673a\u4ea7\u751f\u4e00\u4e2ak\u6bd4\u7279\u957f\u7684\u968f\u673a\u6574\u6570\u3002 \u793a\u4f8b\uff1a >>> import urandom >>> urandom.getrandbits(1) #1\u4f4d\u4e8c\u8fdb\u5236\u4f4d\uff0c\u8303\u56f4\u4e3a0~1\uff08\u5341\u8fdb\u5236\uff1a0~1\uff09 1 >>> urandom.getrandbits(1) 0 >>> urandom.getrandbits(8) #8\u4f4d\u4e8c\u8fdb\u5236\u4f4d\uff0c\u8303\u56f4\u4e3a0000 0000~1111 11111\uff08\u5341\u8fdb\u5236\uff1a0~255\uff09 224 urandom.randint(start, end) \u968f\u673a\u751f\u6210\u4e00\u4e2a start \u5230 end \u4e4b\u95f4\u7684\u6574\u6570\u3002 \u793a\u4f8b\uff1a >>> import urandom >>> urandom.randint(1, 4) 4 >>> urandom.randint(1, 4) 2 urandom.random() \u968f\u673a\u751f\u6210\u4e00\u4e2a 0 \u5230 1 \u4e4b\u95f4\u7684\u6d6e\u70b9\u6570\u3002 \u793a\u4f8b\uff1a >>> import urandom >>> urandom.random() 0.8465231 urandom.randrange(start, end, step) \u968f\u673a\u751f\u6210 start \u5230 end \u95f4\u5e76\u4e14\u9012\u589e\u4e3a step \u7684\u6b63\u6574\u6570\u3002 \u793a\u4f8b\uff1a >>> import urandom >>> urandom.randrange(0, 8, 2) 0 >>> urandom.randrange(0, 8, 2) 6 urandom.seed(sed) \u6307\u5b9a\u968f\u673a\u6570\u79cd\u5b50\uff0c\u901a\u5e38\u548c\u5176\u5b83\u968f\u673a\u6570\u751f\u6210\u51fd\u6570\u642d\u914d\u4f7f\u7528\u3002 \u793a\u4f8b\uff1a >>> import urandom >>> urandom.seed(20) #\u6307\u5b9a\u968f\u673a\u6570\u79cd\u5b50 >>> for i in range(0, 15): #\u751f\u62100~15\u8303\u56f4\u5185\u7684\u968f\u673a\u5e8f\u5217 ... print(urandom.randint(1, 10)) ... 8 10 9 10 2 1 9 3 2 2 6 1 10 9 6 urandom.uniform(start, end) \u968f\u673a\u751f\u6210 start \u5230 end \u8303\u56f4\u5185\u7684\u6d6e\u70b9\u6570\u3002 \u793a\u4f8b\uff1a >>> import urandom >>> urandom.uniform(3, 5) 3.219261 >>> urandom.uniform(3, 5) 4.00403","title":"urandom - \u751f\u6210\u968f\u673a\u6570"},{"location":"QuecPython%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/#math-","text":"math \u6a21\u5757\u63d0\u4f9b\u6570\u5b66\u8fd0\u7b97\u51fd\u6570\u3002\u8be5\u6a21\u5757\u5b9e\u73b0\u76f8\u5e94CPython\u6a21\u5757\u7684\u5b50\u96c6\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605\u9605CPython\u6587\u6863\uff1a math math.pow(x, y) \u8fd4\u56dex\u7684y\u6b21\u65b9\uff0c\u8fd4\u56de\u503c\u662f\u6d6e\u70b9\u6570\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.pow(2, 3) 8.0 math.acos(x) \u8fd4\u56dex\u7684\u53cd\u4f59\u5f26\u5f27\u5ea6\u503c\uff0c\u8fd4\u56de\u503c\u4e3a\u6d6e\u70b9\u6570\u3002x\u662f-1~1\u4e4b\u95f4\u7684\u6570\uff0c\u5305\u62ec-1\u548c1\uff0c\u5982\u679c\u5c0f\u4e8e-1\u6216\u8005\u5927\u4e8e1\uff0c\u4f1a\u4ea7\u751f\u9519\u8bef\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.acos(0.6) 0.9272952 math.asin(x) \u8fd4\u56dex\u7684\u53cd\u6b63\u5f26\u5f27\u5ea6\u503c\uff0c\u8fd4\u56de\u503c\u4e3a\u6d6e\u70b9\u6570\u3002x\u662f-1~1\u4e4b\u95f4\u7684\u6570\uff0c\u5305\u62ec-1\u548c1\uff0c\u5982\u679c\u5c0f\u4e8e-1\u6216\u8005\u5927\u4e8e1\uff0c\u4f1a\u4ea7\u751f\u9519\u8bef\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.asin(-1) -1.570796 math.atan(x) \u8fd4\u56dex\u7684\u53cd\u6b63\u5207\u5f27\u5ea6\u503c\uff0c\u8fd4\u56de\u503c\u4e3a\u6d6e\u70b9\u6570\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.atan(-8) -1.446441 >>> math.atan(6.4) 1.4158 math.atan2(x, y) \u8fd4\u56de\u7ed9\u5b9a\u7684 X \u53ca Y \u5750\u6807\u503c\u7684\u53cd\u6b63\u5207\u503c\uff0c\u8fd4\u56de\u503c\u4e3a\u6d6e\u70b9\u6570\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.atan2(-0.50,0.48) -0.8058035 >>> math.atan2(7, 9) 0.6610432 math.ceil(x) \u8fd4\u56de\u6570\u5b57\u7684\u4e0a\u5165\u6574\u6570\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.ceil(4.1) 5 math.copysign(x, y) \u628ay\u7684\u6b63\u8d1f\u53f7\u52a0\u5230x\u524d\u9762\uff0c\u53ef\u4ee5\u4f7f\u75280\uff0c\u8fd4\u56de\u503c\u4e3a\u6d6e\u70b9\u6570\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.copysign(5, 0) 5.0 >>> math.copysign(5, -4) -5.0 >>> math.copysign(5, 9) 5.0 math.cos(x) \u8fd4\u56dex\u7684\u5f27\u5ea6\u7684\u4f59\u5f26\u503c\uff0c\u8303\u56f4\u518d-1~1\u4e4b\u95f4\uff0c\u8fd4\u56de\u503c\u4e3a\u6d6e\u70b9\u6570\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.cos(3) -0.9899925 math.degrees(x) \u5c06\u5f27\u5ea6\u8f6c\u6362\u4e3a\u89d2\u5ea6\uff0c\u8fd4\u56de\u503c\u4e3a\u6d6e\u70b9\u6570\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.degrees(5) 286.4789 >>> math.degrees(math.pi/2) 90.0 math.e \u6570\u5b66\u5e38\u91cf e \uff0c e \u5373\u81ea\u7136\u5e38\u6570\u3002 math.exp(x) \u8fd4\u56dee\u7684x\u6b21\u5e42\uff0c\u8fd4\u56de\u503c\u4e3a\u6d6e\u70b9\u6570\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.exp(1) 2.718282 >>> print(math.e) 2.718282 math.fabs(x) \u8fd4\u56de\u6570\u5b57\u7684\u7edd\u5bf9\u503c\uff0c\u8fd4\u56de\u503c\u4e3a\u6d6e\u70b9\u6570\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.fabs(-3.88) 3.88 math.floor(x) \u8fd4\u56de\u6570\u5b57\u7684\u4e0b\u820d\u6574\u6570\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.floor(8.7) 8 >>> math.floor(9) 9 >>> math.floor(-7.6) -8 math.fmod(x, y) \u8fd4\u56dex/y\u7684\u4f59\u6570\uff0c\u8fd4\u56de\u503c\u4e3a\u6d6e\u70b9\u6570\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.fmod(15, 4) 3.0 >>> math.fmod(15, 3) 0.0 math.modf(x) \u8fd4\u56de\u7531x\u7684\u5c0f\u6570\u90e8\u5206\u548c\u6574\u6570\u90e8\u5206\u7ec4\u6210\u7684\u5143\u7ec4\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.modf(17.592) (0.5919991, 17.0) math.frexp(x) \u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4(m,e),\u5176\u8ba1\u7b97\u65b9\u5f0f\u4e3a\uff1ax\u5206\u522b\u96640.5\u548c1,\u5f97\u5230\u4e00\u4e2a\u503c\u7684\u8303\u56f4\uff0c2e\u7684\u503c\u5728\u8fd9\u4e2a\u8303\u56f4\u5185\uff0ce\u53d6\u7b26\u5408\u8981\u6c42\u7684\u6700\u5927\u6574\u6570\u503c,\u7136\u540ex/(2e)\uff0c\u5f97\u5230m\u7684\u503c\u3002\u5982\u679cx\u7b49\u4e8e0\uff0c\u5219m\u548ce\u7684\u503c\u90fd\u4e3a0\uff0cm\u7684\u7edd\u5bf9\u503c\u7684\u8303\u56f4\u4e3a(0.5,1)\u4e4b\u95f4\uff0c\u4e0d\u5305\u62ec0.5\u548c1\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.frexp(52) (0.8125, 6) math.isfinite(x) \u5224\u65ad x \u662f\u5426\u4e3a\u6709\u9650\u6570\uff0c\u662f\u5219\u8fd4\u56deTrue\uff0c\u5426\u5219\u8fd4\u56deFalse\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.isfinite(8) True math.isinf(x) \u5982\u679cx\u662f\u6b63\u65e0\u7a77\u5927\u6216\u8d1f\u65e0\u7a77\u5927\uff0c\u5219\u8fd4\u56deTrue,\u5426\u5219\u8fd4\u56deFalse\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.isinf(123) False math.isnan(x) \u5982\u679cx\u4e0d\u662f\u6570\u5b57True,\u5426\u5219\u8fd4\u56deFalse\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.isnan(23) False math.ldexp(x, exp) \u8fd4\u56dex (2 *i)\u7684\u503c\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.ldexp(2, 1) 4.0 math.log(x) \u8fd4\u56dex\u7684\u81ea\u7136\u5bf9\u6570\uff0cx > 0\uff0c\u5c0f\u4e8e0\u4f1a\u62a5\u9519\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.log(2) 0.6931472 math.pi \u6570\u5b66\u5e38\u91cf pi\uff08\u5706\u5468\u7387\uff0c\u4e00\u822c\u4ee5\u03c0\u6765\u8868\u793a\uff09\u3002 math.radians(x) \u5c06\u89d2\u5ea6\u8f6c\u6362\u4e3a\u5f27\u5ea6\uff0c\u8fd4\u56de\u503c\u4e3a\u6d6e\u70b9\u6570\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.radians(90) 1.570796 math.sin(x) \u8fd4\u56dex\u5f27\u5ea6\u7684\u6b63\u5f26\u503c\uff0c\u6570\u503c\u5728 -1 \u5230 1 \u4e4b\u95f4\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.sin(-18) 0.7509873 >>> math.sin(50) -0.2623749 math.sqrt(x) \u8fd4\u56de\u6570\u5b57x\u7684\u5e73\u65b9\u6839\uff0c\u8fd4\u56de\u503c\u4e3a\u6d6e\u70b9\u6570\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.sqrt(4) 2.0 >>> math.sqrt(7) 2.645751 math.tan(x) \u8fd4\u56de x \u5f27\u5ea6\u7684\u6b63\u5207\u503c\uff0c\u6570\u503c\u5728 -1 \u5230 1 \u4e4b\u95f4\uff0c\u4e3a\u6d6e\u70b9\u6570\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.tan(9) -0.4523157 math.trunc(x) \u8fd4\u56dex\u7684\u6574\u6570\u90e8\u5206\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.trunc(7.123) 7","title":"math - \u6570\u5b66\u8fd0\u7b97"},{"location":"QuecPython%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/#usocket-socket","text":"usocket \u6a21\u5757\u63d0\u4f9b\u5bf9BSD\u5957\u63a5\u5b57\u63a5\u53e3\u7684\u8bbf\u95ee\u3002\u8be5\u6a21\u5757\u5b9e\u73b0\u76f8\u5e94CPython\u6a21\u5757\u7684\u5b50\u96c6\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605\u9605CPython\u6587\u6863\uff1a socket usocket.socket(af=AF_INET, type=SOCK_STREAM, proto=IPPROTO_TCP) \u6839\u636e\u7ed9\u5b9a\u7684\u5730\u5740\u65cf\u3001\u5957\u63a5\u5b57\u7c7b\u578b\u4ee5\u53ca\u534f\u8bae\u7c7b\u578b\u53c2\u6570\uff0c\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5957\u63a5\u5b57\u3002\u6ce8\u610f\uff0c\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u4e0d\u9700\u8981\u6307\u5b9a proto \uff0c\u4e5f\u4e0d\u5efa\u8bae\u8fd9\u6837\u505a\uff0c\u56e0\u4e3a\u67d0\u4e9bMicroPython\u7aef\u53e3\u53ef\u80fd\u4f1a\u7701\u7565 IPPROTO_* \u5e38\u91cf\u3002 \u5e38\u91cf\u8bf4\u660e af - \u5730\u5740\u65cf usocket.AF_INET \uff1aIPV4 usocket.AF_INET6 \uff1aIPV6 type - socket\u7c7b\u578b usocket.SOCK_STREAM \uff1a\u5bf9\u5e94TCP\u7684\u6d41\u5f0f\u5957\u63a5\u5b57 usocket.SOCK_DGRAM \uff1a\u5bf9\u5e94UDP\u7684\u6570\u636e\u5305\u5957\u63a5\u5b57 usocket.SOCK_RAW \uff1a\u539f\u59cb\u5957\u63a5\u5b57 proto - \u534f\u8bae\u53f7 usocket.IPPROTO_TCP usocket.IPPROTO_UDP \u5176\u4ed6 usocket.SOL_SOCKET - \u5957\u63a5\u5b57\u9009\u9879\u7ea7\u522b\uff0c usocket.SO_REUSEADDR - \u5141\u8bb8\u7ed1\u5b9a\u5730\u5740\u5feb\u901f\u91cd\u7528 \u793a\u4f8b\uff1a import usocket # \u521b\u5efa\u57fa\u4e8eTCP\u7684\u6d41\u5f0f\u5957\u63a5\u5b57 socket = usocket.socket(usocket.AF_INET, usocket.SOCK_STREAM) # \u521b\u5efa\u57fa\u4e8eUDP\u7684\u6570\u636e\u62a5\u5957\u63a5\u5b57 socket = usocket.socket(usocket.AF_INET, usocket.SOCK_DGRAM) usocket.getaddrinfo(host, port) \u5c06\u4e3b\u673a\u57df\u540d\uff08host\uff09\u548c\u7aef\u53e3\uff08port\uff09\u8f6c\u6362\u4e3a\u7528\u4e8e\u521b\u5efa\u5957\u63a5\u5b57\u76845\u5143\u7ec4\u5e8f\u5217\uff0c\u5143\u7ec4\u7ed3\u6784\u5982\u4e0b\uff1a (family, type, proto, canonname, sockaddr) socket\u7c7b\u7684\u65b9\u6cd5 socket.bind(address) \u7ed1\u5b9a\u5730\u5740address\u3002\u5728\u6b64\u4e4b\u524d\uff0csocket\u5fc5\u987b\u6ca1\u6709\u7ed1\u5b9a\u8fc7\u3002 address \uff1a\u7531\u5730\u5740\u7aef\u53e3\u53f7\u7ec4\u6210\u7684\u5217\u8868\u6216\u8005\u5143\u7ec4 \u793a\u4f8b\uff1a addr = ('127.0.0.1', 6000) socket.bind(addr) socket.listen(backlog) \u5141\u8bb8\u670d\u52a1\u7aef\u63a5\u53d7\u8fde\u63a5\uff0c\u53ef\u6307\u5b9a\u6700\u5927\u8fde\u63a5\u6570\u3002 backlog \uff1a\u63a5\u53d7\u5957\u63a5\u5b57\u7684\u6700\u5927\u4e2a\u6570\uff0c\u81f3\u5c11\u4e3a0\u3002 socket.accept() \u63a5\u53d7\u8fde\u63a5\u8bf7\u6c42\uff0c\u8fd4\u56de\u5143\u7ec4\uff0c\u5305\u542b\u65b0\u7684\u5957\u63a5\u5b57\u548c\u5ba2\u6237\u7aef\u5730\u5740\uff0c\u5f62\u5f0f\u4e3a\uff1a (conn, address) conn \uff1a\u65b0\u7684\u5957\u63a5\u5b57\u5bf9\u8c61\uff0c\u53ef\u4ee5\u7528\u6765\u53d1\u9001\u548c\u63a5\u6536\u6570\u636e address \uff1a\u8fde\u63a5\u5230\u670d\u52a1\u5668\u7684\u5ba2\u6237\u7aef\u5730\u5740 socket.connect(address) \u8fde\u63a5\u5230\u6307\u5b9a\u5730\u5740address\u7684\u670d\u52a1\u5668\u3002 address \uff1a\u5305\u542b\u5730\u5740\u548c\u7aef\u53e3\u53f7\u7684\u5143\u7ec4\u6216\u5217\u8868 socket.read( [ size ] ) \u4ece\u5957\u63a5\u5b57\u4e2d\u8bfb\u53d6size\u5b57\u8282\u6570\u636e\uff0c\u8fd4\u56de\u4e00\u4e2a\u5b57\u8282\u5bf9\u8c61\u3002\u5982\u679c\u6ca1\u6709\u6307\u5b9asize\uff0c\u5219\u4f1a\u4ece\u5957\u63a5\u5b57\u8bfb\u53d6\u6240\u6709\u53ef\u8bfb\u6570\u636e\uff0c\u76f4\u5230\u8bfb\u53d6\u5230\u6570\u636e\u7ed3\u675f\uff0c\u6b64\u65f6\u4f5c\u7528\u548c socket.readall() \u76f8\u540c\u3002 socket.readinto(buf, [ , nbytes ]) \u5c06\u5b57\u8282\u8bfb\u53d6\u5230\u7f13\u51b2\u533abuf\u4e2d\u3002\u5982\u679c\u6307\u5b9a\u4e86nbytes\uff0c\u5219\u6700\u591a\u8bfb\u53d6nbytes\u6570\u91cf\u7684\u5b57\u8282\uff1b\u5982\u679c\u6ca1\u6709\u6307\u5b9anbytes\uff0c\u5219\u6700\u591a\u8bfb\u53d6len(buf)\u5b57\u8282\u3002\u8fd4\u56de\u503c\u662f\u5b9e\u9645\u8bfb\u53d6\u7684\u5b57\u8282\u6570\u3002 socket.readline() \u6309\u884c\u8bfb\u53d6\u6570\u636e\uff0c\u9047\u5230\u6362\u884c\u7b26\u7ed3\u675f\uff0c\u8fd4\u56de\u8bfb\u53d6\u7684\u6570\u636e\u884c\u3002 socket.write(buf) \u5199\u5165\u7f13\u51b2\u533a\u7684\u6570\u636e\uff0cbuf\u4e3a\u5f85\u5199\u5165\u7684\u6570\u636e\uff0c\u8fd4\u56de\u5b9e\u9645\u5199\u5165\u7684\u5b57\u8282\u6570\u3002 socket.send(bytes) \u53d1\u9001\u6570\u636e\uff0c\u8fd4\u56de\u5b9e\u9645\u53d1\u9001\u7684\u5b57\u8282\u6570\u3002 bytes \uff1abytes\u578b\u6570\u636e socket.sendall(bytes) \u5c06\u6240\u6709\u6570\u636e\u90fd\u53d1\u9001\u5230\u5957\u63a5\u5b57\u3002\u4e0e send() \u65b9\u6cd5\u4e0d\u540c\u7684\u662f\uff0c\u6b64\u65b9\u6cd5\u5c06\u5c1d\u8bd5\u901a\u8fc7\u4f9d\u6b21\u9010\u5757\u53d1\u9001\u6570\u636e\u6765\u53d1\u9001\u6240\u6709\u6570\u636e\u3002 \u6ce8\u610f\uff1a\u8be5\u65b9\u6cd5\u518d\u975e\u963b\u585e\u5957\u63a5\u5b57\u4e0a\u7684\u884c\u4e3a\u662f\u4e0d\u786e\u5b9a\u7684\uff0c\u5efa\u8bae\u518dMicroPython\u4e2d\uff0c\u4f7f\u7528 write() \u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u5177\u6709\u76f8\u540c\u7684\u201c\u7981\u6b62\u77ed\u5199\u201d\u7b56\u7565\u6765\u963b\u585e\u5957\u63a5\u5b57\uff0c\u5e76\u4e14\u5c06\u8fd4\u56de\u5728\u975e\u963b\u585e\u5957\u63a5\u5b57\u4e0a\u53d1\u9001\u7684\u5b57\u8282\u6570\u3002 bytes \uff1abytes\u578b\u6570\u636e socket.sendto(bytes, address) \u5c06\u6570\u636e\u53d1\u9001\u5230\u5957\u63a5\u5b57\u3002\u8be5\u5957\u63a5\u5b57\u4e0d\u5e94\u8fde\u63a5\u5230\u8fdc\u7a0b\u5957\u63a5\u5b57\uff0c\u56e0\u4e3a\u76ee\u6807\u5957\u63a5\u5b57\u662f\u7531 address \u6307\u5b9a\u7684\u3002 bytes \uff1abytes\u578b\u6570\u636e address \uff1a\u5305\u542b\u5730\u5740\u548c\u7aef\u53e3\u53f7\u7684\u5143\u7ec4\u6216\u5217\u8868 socket.recv(bufsize) \u4ece\u5957\u63a5\u5b57\u63a5\u6536\u6570\u636e\u3002\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u5b57\u8282\u5bf9\u8c61\uff0c\u8868\u793a\u63a5\u6536\u5230\u7684\u6570\u636e\u3002\u4e00\u6b21\u63a5\u6536\u7684\u6700\u5927\u6570\u636e\u91cf\u7531bufsize\u6307\u5b9a\u3002 bufsize \uff1a\u4e00\u6b21\u63a5\u6536\u7684\u6700\u5927\u6570\u636e\u91cf socket.close() \u5c06\u5957\u63a5\u5b57\u6807\u8bb0\u4e3a\u5173\u95ed\u5e76\u91ca\u653e\u6240\u6709\u8d44\u6e90\u3002 socket.recvfrom(bufsize) \u4ece\u5957\u63a5\u5b57\u63a5\u6536\u6570\u636e\u3002\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4\uff0c\u5305\u542b\u5b57\u8282\u5bf9\u8c61\u548c\u5730\u5740\u3002 \u8fd4\u56de\u503c\u5f62\u5f0f\u4e3a\uff1a (bytes, address) bytes \uff1a\u63a5\u6536\u6570\u636e\u7684\u5b57\u8282\u5bf9\u8c61 address \uff1a\u53d1\u9001\u6570\u636e\u7684\u5957\u63a5\u5b57\u7684\u5730\u5740 socket.setsockopt(level, optname, value) \u8bbe\u7f6e\u5957\u63a5\u5b57\u9009\u9879\u7684\u503c\u3002 level \uff1a\u5957\u63a5\u5b57\u9009\u9879\u7ea7\u522b optname \uff1asocket\u9009\u9879 value \uff1a\u65e2\u53ef\u4ee5\u662f\u4e00\u4e2a\u6574\u6570\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u8868\u793a\u7f13\u51b2\u533a\u7684bytes\u7c7b\u5bf9\u8c61 \u793a\u4f8b\uff1a socket.setsockopt(usocket.SOL_SOCKET, usocket.SO_REUSEADDR, 1) socket.setblocking(flag) \u8bbe\u7f6e\u5957\u63a5\u5b57\u4e3a\u963b\u585e\u6a21\u5f0f\u6216\u8005\u975e\u963b\u585e\u6a21\u5f0f\u3002\u5982\u679c\u6807\u5fd7\u4e3afalse\uff0c\u5219\u5c06\u5957\u63a5\u5b57\u8bbe\u7f6e\u4e3a\u975e\u963b\u585e\uff0c\u5426\u5219\u8bbe\u7f6e\u4e3a\u963b\u585e\u6a21\u5f0f\u3002 \u8be5\u65b9\u6cd5\u662f\u67d0\u4e9b settimeout() \u8c03\u7528\u7684\u7b80\u5199\uff1a socket.setblocking(True) \u76f8\u5f53\u4e8e socket.settimeout(None) socket.setblocking(False) \u76f8\u5f53\u4e8e socket.settimeout(0) socket.settimeout(value) \u8bbe\u7f6e\u5957\u63a5\u5b57\u7684\u8d85\u65f6\u65f6\u95f4\uff0c\u5355\u4f4d\u79d2\u3002 value \uff1a\u53ef\u4ee5\u662f\u8868\u793a\u79d2\u7684\u975e\u8d1f\u6d6e\u70b9\u6570\uff0c\u4e5f\u53ef\u4ee5\u662fNone\u3002\u5982\u679c\u7ed9\u51fa\u4e00\u4e2a\u975e\u96f6\u503c\uff0c\u5219 OSError \u5728\u8be5\u64cd\u4f5c\u5b8c\u6210\u4e4b\u524d\u5df2\u8d85\u8fc7\u8d85\u65f6\u65f6\u95f4\u503c\uff0c\u5219\u968f\u540e\u7684\u5957\u63a5\u5b57\u64cd\u4f5c\u5c06\u5f15\u53d1\u5f02\u5e38\u3002\u5982\u679c\u7ed9\u5b9a\u96f6\uff0c\u5219\u5c06\u5957\u63a5\u5b57\u7f6e\u4e8e\u975e\u963b\u585e\u6a21\u5f0f\u3002\u5982\u679c\u672a\u6307\u5b9a\uff0c\u5219\u5957\u63a5\u5b57\u5c06\u5904\u4e8e\u963b\u585e\u6a21\u5f0f\u3002 socket.makefile(mode='rb') \u8fd4\u56de\u4e0e\u5957\u63a5\u5b57\u5173\u8054\u7684\u6587\u4ef6\u5bf9\u8c61\uff0c\u8fd4\u56de\u503c\u7c7b\u578b\u4e0e\u6307\u5b9a\u7684\u53c2\u6570\u6709\u5173\u3002\u4ec5\u652f\u6301\u4e8c\u8fdb\u5236\u6a21\u5f0f (rb\u548cwb)\u3002 socket\u901a\u4fe1\u793a\u4f8b \uff1a # \u5ba2\u6237\u7aef\u793a\u4f8b import usocket client = usocket.socket(usocket.AF_INET, usocket.SOCK_STREAM) sockaddr = usocket.getaddrinfo('www.tongxinmao.com',80)[0][-1] client.connect(sockaddr) while True: re_data = input() client.send(re_data.encode(\"utf8\")) data = client.recv(1024) print(data.decode(\"utf8\"))","title":"usocket - socket\u6a21\u5757"},{"location":"QuecPython%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/#uio-","text":"uio \u6a21\u5757\u5305\u542b\u5176\u4ed6\u7c7b\u578b\u7684stream\uff08\u7c7b\u6587\u4ef6\uff09\u5bf9\u8c61\u548c\u8f85\u52a9\u51fd\u6570\u3002\u8be5\u6a21\u5757\u5b9e\u73b0\u76f8\u5e94CPython\u6a21\u5757\u7684\u5b50\u96c6\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605\u9605CPython\u6587\u6863\uff1a io fd = uio.open(name, mode=\u2019r\u2019, **kwarg) \u6253\u5f00\u6587\u4ef6\uff0c\u5185\u7f6e open() \u51fd\u6570\u662f\u8be5\u51fd\u6570\u7684\u522b\u540d\u3002 name \uff1a\u6587\u4ef6\u540d mode \uff1a\u6253\u5f00\u6a21\u5f0f r \u53ea\u8bfb\u6a21\u5f0f\u6253\u5f00\u6587\u4ef6 w \u5199\u5165\u6a21\u5f0f\u6253\u5f00\u6587\u4ef6\uff0c\u6bcf\u6b21\u5199\u5165\u4f1a\u8986\u76d6\u4e0a\u6b21\u5199\u5165\u6570\u636e a \u53ea\u5199\u8ffd\u52a0\u6a21\u5f0f\u6253\u5f00\u6587\u4ef6\uff0c\u53ef\u8fde\u7eed\u5199\u5165\u6587\u4ef6\u6570\u636e\u800c\u4e0d\u662f\u8986\u76d6\u6570\u636e **kwarg \uff1a\u53ef\u53d8\u957f\u53c2\u6570\u5217\u8868 fd.close() \u5173\u95ed\u6253\u5f00\u7684\u6587\u4ef6\u3002","title":"uio - \u8f93\u5165\u8f93\u51fa\u6d41"},{"location":"QuecPython%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/#ustruct-","text":"\u8be5\u6a21\u5757\u5b9e\u73b0\u76f8\u5e94CPython\u6a21\u5757\u7684\u5b50\u96c6\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605\u9605CPython\u6587\u6863\uff1a struct \u5b57\u8282\u987a\u5e8f\uff0c\u5927\u5c0f\u548c\u5bf9\u9f50\u65b9\u5f0f \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cC\u7c7b\u578b\u4ee5\u673a\u5668\u7684\u672c\u673a\u683c\u5f0f\u548c\u5b57\u8282\u987a\u5e8f\u8868\u793a\uff0c\u5e76\u5728\u5fc5\u8981\u65f6\u901a\u8fc7\u8df3\u8fc7\u586b\u5145\u5b57\u8282\u6765\u6b63\u786e\u5bf9\u9f50\uff08\u6839\u636eC\u7f16\u8bd1\u5668\u4f7f\u7528\u7684\u89c4\u5219\uff09\u3002\u6839\u636e\u4e0b\u8868\uff0c\u683c\u5f0f\u5b57\u7b26\u4e32\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u53ef\u7528\u4e8e\u6307\u793a\u6253\u5305\u6570\u636e\u7684\u5b57\u8282\u987a\u5e8f\uff0c\u5927\u5c0f\u548c\u5bf9\u9f50\u65b9\u5f0f\uff1a Character Byte order Size Alignment @ native native native = native standard none < little-endian standard none > big-endian standard none ! network (= big-endian) standard none \u683c\u5f0f\u5316\u5b57\u7b26\u8868 Format C Type Python type Standard size x pad byte no value c char bytes of length 1 1 b signed char integer 1 B unsigned char integer 1 ? _Bool bool 1 h short integer 2 H unsigned short integer 2 i int integer 4 I unsigned int integer 4 l long integer 4 L unsigned long integer 4 q long long integer 8 Q unsigned long long integer 8 n ssize_t integer N size_t integer f float float 4 d double float 8 s char[] bytes p char[] bytes P void * integer \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cC\u7c7b\u578b\u4ee5\u673a\u5668\u7684\u672c\u673a\u683c\u5f0f\u548c\u5b57\u8282\u987a\u5e8f\u8868\u793a\uff0c\u5e76\u5728\u5fc5\u8981\u65f6\u901a\u8fc7\u8df3\u8fc7\u586b\u5145\u5b57\u8282\u6765\u6b63\u786e\u5bf9\u9f50\uff08\u6839\u636eC\u7f16\u8bd1\u5668\u4f7f\u7528\u7684\u89c4\u5219\uff09 ustruct.calcsize(fmt) \u8fd4\u56de\u5b58\u653e fmt \u9700\u8981\u7684\u5b57\u8282\u6570\u3002 fmt \uff1a\u683c\u5f0f\u5b57\u7b26\u7684\u7c7b\u578b\uff0c\u8be6\u60c5\u89c1\u4e0a\u6587\u683c\u5316\u5f0f\u5b57\u7b26\u8868 \u793a\u4f8b\uff1a >>> import ustruct >>> ustruct.calcsize('i') 4 >>> ustruct.calcsize('f') 4 >>> ustruct.calcsize('d') 8 ustruct.pack(fmt, v1, v2, ...) \u6309\u7167\u683c\u5f0f\u5b57\u7b26\u4e32 fmt \u538b\u7f29\u53c2\u6570v1\u3001 v2\u3001\u2026\u8fd4\u56de\u503c\u662f\u53c2\u6570\u7f16\u7801\u540e\u7684\u5b57\u8282\u5bf9\u8c61\u3002 fmt \uff1a\u683c\u5f0f\u5b57\u7b26\u7684\u7c7b\u578b\uff0c\u8be6\u60c5\u89c1\u4e0a\u6587\u683c\u5316\u5f0f\u5b57\u7b26\u8868 unstrcut.unpack(fmt, data) \u6839\u636e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32 fmt \u5bf9\u6570\u636e\u8fdb\u884c\u89e3\u538b\uff0c\u8fd4\u56de\u503c\u4e3a\u4e00\u4e2a\u5143\u7ec4\u3002 \u793a\u4f8b\uff1a >>> import ustruct >>> ustruct.pack('ii', 7, 9) #\u6253\u53052\u4e24\u4e2a\u6574\u6570 b'\\x07\\x00\\x00\\x00\\t\\x00\\x00\\x00' >>> ustruct.unpack('ii', b'\\x07\\x00\\x00\\x00\\t\\x00\\x00\\x00') #\u89e3\u538b\u4e24\u4e2a\u6574\u6570 (7, 9) ustruct.pack_info(fmt, buffer, offset, v1, v2, ...) \u6839\u636e\u683c\u5f0f\u5b57\u7b26\u4e32fmt\u5c06\u503cv1\u3001v2\u3001 \u2026\u6253\u5305\u5230\u4ece offset \u5f00\u59cb\u7684\u7f13\u51b2\u533a\u4e2d\u3002\u4ece\u7f13\u51b2\u533a\u7684\u672b\u5c3e\u7b97\u8d77\uff0c offset \u53ef\u80fd\u4e3a\u8d1f\u3002 fmt \uff1a\u683c\u5f0f\u5b57\u7b26\u7684\u7c7b\u578b\uff0c\u8be6\u60c5\u89c1\u4e0a\u6587\u683c\u5316\u5f0f\u5b57\u7b26\u8868 unstruct.unpack_from(fmt, data, offset=0) \u6839\u636e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32 fmt \u89e3\u6790\u4ece offest \u5f00\u59cb\u7684\u6570\u636e\u89e3\u538b\uff0c\u4ece\u7f13\u51b2\u533a\u672b\u5c3e\u5f00\u59cb\u8ba1\u6570\u7684\u504f\u79fb\u91cf\u53ef\u80fd\u4e3a\u8d1f\u503c\u3002\u8fd4\u56de\u503c\u662f\u89e3\u538b\u503c\u7684\u5143\u7ec4\u3002","title":"ustruct - \u6253\u5305\u548c\u89e3\u538b\u539f\u59cb\u6570\u636e\u7c7b\u578b"},{"location":"QuecPython%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/#ujson-json","text":"ujson \u6a21\u5757\u5b9e\u73b0\u5728Python\u6570\u636e\u5bf9\u8c61\u548cJSON\u6570\u636e\u683c\u5f0f\u4e4b\u95f4\u8fdb\u884c\u8f6c\u6362\u7684\u529f\u80fd\u3002\u8be5\u6a21\u5757\u5b9e\u73b0\u76f8\u5e94CPython\u6a21\u5757\u7684\u5b50\u96c6\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605\u9605CPython\u6587\u6863\uff1a json ujson.dump(obj, stream) \u5c06 obj \u6570\u636e\u5bf9\u8c61\u8f6c\u5316\u6210 JSON\u5b57\u7b26\u4e32\uff0c\u5c06\u5176\u5199\u5165\u5230\u7ed9\u5b9a\u7684 stream \u4e2d\u3002 ujson.dumps(dict) \u5c06 dict \u7c7b\u578b\u7684\u6570\u636e\u8f6c\u6362\u6210str\u3002 ujson.load(stream) \u89e3\u6790\u7ed9\u5b9a\u7684\u6570\u636e stream \uff0c\u5c06\u5176\u89e3\u91ca\u4e3aJSON\u5b57\u7b26\u4e32\u5e76\u53cd\u5e8f\u5217\u5316\u6210Python\u5bf9\u8c61\u3002 ujson.loads(str) \u89e3\u6790JSON\u5b57\u7b26\u4e32\u5e76\u8fd4\u56de obj \u5bf9\u8c61 \u793a\u4f8b\uff1a >>> import ujson >>> msg = ['foo',{'bar':('baz',None,1,2)}] >>> print(msg) ['foo', {'bar': ('baz', None, 1, 2)}] >>> s = ujson.dumps(msg) >>> print(s) [\"foo\", {\"bar\": [\"baz\", null, 1, 2]}] >>> s1 = ujson.loads(s) >>> print(s1) ['foo', {'bar': ['baz', None, 1, 2]}]","title":"ujson - JSON\u7f16\u7801\u548c\u89e3\u7801"},{"location":"QuecPython%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/#utime-","text":"utime \u6a21\u5757\u7528\u4e8e\u83b7\u53d6\u5f53\u524d\u65f6\u95f4\u548c\u65e5\u671f\u3001\u6d4b\u91cf\u65f6\u95f4\u95f4\u9694\u548c\u5ef6\u8fdf\u3002\u8be5\u6a21\u5757\u5b9e\u73b0\u76f8\u5e94CPython\u6a21\u5757\u7684\u5b50\u96c6\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605\u9605CPython\u6587\u6863\uff1a time utime.localtime([secs]) \u8be5\u51fd\u6570\u7528\u6765\u5c06\u4e00\u4e2a\u4ee5\u79d2\u8868\u793a\u7684\u65f6\u95f4\u8f6c\u6362\u4e3a\u4e00\u4e2a\u5143\u7ec4\uff0c\u5143\u7ec4\u5305\u542b\u4e86\u4e86\u5e74\u3001\u6708\u3001\u65e5\u3001\u65f6\u3001\u5206\u3001\u79d2\u3001\u661f\u671f\u3001\u4e00\u5e74\u4e2d\u7b2c\u51e0\u5929\uff1b\u5982\u679c\u6ca1\u6709\u7ed9\u5b9a\u53c2\u6570sec\uff0c\u5219\u4f7f\u7528RTC\u65f6\u95f4\u3002\u8fd4\u56de\u503c\u5f62\u5f0f\u5982\u4e0b\uff1a (year, month, mday, hour, minute, second, weekday, yearday) year \uff1a\u5e74\u4efd\uff0cint\u578b month \uff1a\u6708\u4efd\uff0c1~12\uff0cint\u578b mday \uff1a\u65e5\uff0c\u5f53\u6708\u591a\u5c11\u53f7\uff0c1~31\uff0cint\u578b hour \uff1a\u5c0f\u65f6\uff0c0~23\uff0cint\u578b minute \uff1a\u5206\u949f\uff0c0~59\uff0cint\u578b second \uff1a\u79d2\uff0c0~59\uff0cint\u578b weekday \uff1a\u661f\u671f\uff0c\u5468\u4e00\u5230\u5468\u65e5\u662f0~6\uff0cint\u578b yearday \uff1a\u4e00\u5e74\u4e2d\u7684\u7b2c\u591a\u5c11\u5929\uff0cint\u578b \u793a\u4f8b\uff1a >>> import utime >>> utime.localtime() (2020, 9, 29, 8, 54, 42, 1, 273) >>> utime.localtime(646898736) (2020, 7, 1, 6, 5, 36, 2, 183) utime.mktime(date) \u8be5\u51fd\u6570\u4f5c\u7528\u4e0elocatime()\u76f8\u53cd\uff0c\u5b83\u5c06\u4e00\u4e2a\u5b58\u653e\u5728\u5143\u7ec4\u4e2d\u7684\u65f6\u95f4\u8f6c\u6362\u4e3a\u4ee5\u79d2\u8ba1\u7684\u65f6\u95f4\u6233\u3002 \u793a\u4f8b\uff1a >>> import utime >>> date = (2020, 9, 29, 8, 54, 42, 1, 273) >>> utime.mktime(date) 1601340882 utime.sleep(seconds) \u4f11\u7720\u7ed9\u5b9a\u79d2\u6570\u7684\u65f6\u95f4\u3002 \u6ce8\u610f\uff1asleep()\u51fd\u6570\u7684\u8c03\u7528\u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u4f11\u7720\u963b\u585e\u3002 utime.sleep_ms(ms) \u4f11\u7720\u7ed9\u5b9a\u6beb\u79d2\u6570\u7684\u65f6\u95f4\u3002 \u6ce8\u610f\uff1asleep_ms()\u51fd\u6570\u7684\u8c03\u7528\u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u4f11\u7720\u963b\u585e\u3002 utime.sleep_us(us) \u4f11\u7720\u7ed9\u5b9a\u5fae\u79d2\u7684\u65f6\u95f4\u3002 \u6ce8\u610f\uff1asleep_us()\u51fd\u6570\u7684\u8c03\u7528\u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u4f11\u7720\u963b\u585e\u3002 utime.ticks_ms() \u8fd4\u56de\u4e0d\u65ad\u9012\u589e\u7684\u6beb\u79d2\u8ba1\u6570\u5668\uff0c\u5728\u67d0\u4e9b\u503c\u540e\u4f1a\u91cd\u65b0\u8ba1\u6570(\u672a\u6307\u5b9a)\u3002\u8ba1\u6570\u503c\u672c\u8eab\u65e0\u7279\u5b9a\u610f\u4e49\uff0c\u53ea\u9002\u5408\u7528\u5728 ticks_diff() \u51fd\u6570\u4e2d\u3002 \u6ce8\u610f\uff1asleep_us()\u51fd\u6570\u7684\u8c03\u7528\u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u4f11\u7720\u963b\u585e\u3002 utime.ticks_us() \u548c ticks_ms() \u7c7b\u4f3c\uff0c\u53ea\u662f\u8fd4\u56de\u5fae\u79d2\u8ba1\u6570\u5668\u3002 utime.ticks_cpu() \u548c ticks_ms/ticks_us \u7c7b\u4f3c\uff0c\u5177\u6709\u66f4\u9ad8\u7cbe\u5ea6 (\u4f7f\u7528 CPU \u65f6\u949f)\u3002 utime.ticks_diff(old, new) \u8ba1\u7b97\u4e24\u6b21\u8c03\u7528 ticks_ms() \uff0c ticks_us() \uff0c\u6216 ticks_cpu() \u4e4b\u95f4\u7684\u65f6\u95f4\u3002\u56e0\u4e3a\u8fd9\u4e9b\u51fd\u6570\u7684\u8ba1\u6570\u503c\u53ef\u80fd\u4f1a\u56de\u7ed5\uff0c\u6240\u4ee5\u4e0d\u80fd\u76f4\u63a5\u76f8\u51cf\uff0c\u9700\u8981\u4f7f\u7528 ticks_diff() \u51fd\u6570\u3002\u201c\u65e7\u201d \u65f6\u95f4\u9700\u8981\u5728 \u201c\u65b0\u201d \u65f6\u95f4\u4e4b\u524d\uff0c\u5426\u5219\u7ed3\u679c\u65e0\u6cd5\u786e\u5b9a\u3002\u8fd9\u4e2a\u51fd\u6570\u4e0d\u8981\u7528\u5728\u8ba1\u7b97\u5f88\u957f\u7684\u65f6\u95f4 (\u56e0\u4e3a ticks_*() \u51fd\u6570\u4f1a\u56de\u7ed5\uff0c\u901a\u5e38\u5468\u671f\u4e0d\u662f\u5f88\u957f)\u3002\u901a\u5e38\u7528\u6cd5\u662f\u5728\u5e26\u8d85\u65f6\u7684\u8f6e\u8be2\u4e8b\u4ef6\u4e2d\u8c03\u7528\u3002 \u793a\u4f8b\uff1a import utime start = utime.ticks_us() while pin.value() == 0: if utime.ticks_diff(time.ticks_us(), start) > 500: raise TimeoutError utime.time() \u8fd4\u56de\u81ea\u7eaa\u5143\u4ee5\u6765\u7684\u79d2\u6570\uff08\u4ee5\u6574\u6570\u5f62\u5f0f\uff09\u3002\u5982\u679c\u672a\u8bbe\u7f6eRTC\uff0c\u5219\u6b64\u51fd\u6570\u8fd4\u56de\u81ea\u7279\u5b9a\u4e8e\u7aef\u53e3\u7684\u53c2\u8003\u65f6\u95f4\u70b9\u4ee5\u6765\u7684\u79d2\u6570\uff08\u5bf9\u4e8e\u4e0d\u5177\u6709\u7535\u6c60\u540e\u5907RTC\u7684\u5d4c\u5165\u5f0f\u677f\uff0c\u901a\u5e38\u662f\u7531\u4e8e\u52a0\u7535\u6216\u590d\u4f4d\uff09\u3002\u5982\u679c\u8981\u5f00\u53d1\u53ef\u79fb\u690d\u7684MicroPython\u5e94\u7528\u7a0b\u5e8f\uff0c\u5219\u4e0d\u5e94\u4f9d\u8d56\u6b64\u529f\u80fd\u63d0\u4f9b\u9ad8\u4e8e\u79d2\u7684\u7cbe\u5ea6\u3002\u5982\u679c\u9700\u8981\u66f4\u9ad8\u7684\u7cbe\u5ea6\uff0c\u8bf7\u4f7f\u7528 ticks_ms() \u548c ticks_us() \u51fd\u6570\uff0c\u5982\u679c\u9700\u8981\u65e5\u5386\u65f6\u95f4\uff0c\u5219 localtime() \u4e0d\u5e26\u53c2\u6570\u4f1a\u66f4\u597d\u3002","title":"utime - \u4e0e\u65f6\u95f4\u76f8\u5173\u529f\u80fd"},{"location":"QuecPython%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/#sys-","text":"sys \u6a21\u5757\u4e2d\u63d0\u4f9b\u4e86\u4e0eQuecPython\u8fd0\u884c\u73af\u5883\u6709\u5173\u7684\u51fd\u6570\u548c\u53d8\u91cf\u3002\u8be5\u6a21\u5757\u5b9e\u73b0\u76f8\u5e94CPython\u6a21\u5757\u7684\u5b50\u96c6\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605\u9605CPython\u6587\u6863\uff1a sys \u5e38\u6570\u8bf4\u660e sys.argv \u5f53\u524d\u7a0b\u5e8f\u542f\u52a8\u7684\u53ef\u53d8\u53c2\u6570\u5217\u8868\u3002 sys.byteorder \u5b57\u8282\u987a\u5e8f (\u2018little\u2019 - \u5c0f\u7aef\uff0c \u2018big\u2019 - \u5927\u7aef)\u3002 sys.implementation \u8fd4\u56de\u5f53\u524dmicroPython\u7248\u672c\u4fe1\u606f\u3002\u5bf9\u4e8eMicroPython\uff0c\u5b83\u5177\u6709\u4ee5\u4e0b\u5c5e\u6027\uff1a name - \u5b57\u7b26\u4e32\u201c micropython\u201d version - \u5143\u7ec4\uff08\u4e3b\u8981\uff0c\u6b21\u8981\uff0c\u5fae\u578b\uff09\uff0c\u4f8b\u5982\uff081\u30017\u30010\uff09 \u5efa\u8bae\u4f7f\u7528\u6b64\u5bf9\u8c61\u6765\u5c06MicroPython\u4e0e\u5176\u4ed6Python\u5b9e\u73b0\u533a\u5206\u5f00\u3002 sys.maxsize \u672c\u673a\u6574\u6570\u7c7b\u578b\u53ef\u4ee5\u5728\u5f53\u524d\u5e73\u53f0\u4e0a\u4fdd\u7559\u7684\u6700\u5927\u503c\uff0c\u5982\u679c\u5b83\u5c0f\u4e8e\u5e73\u53f0\u6700\u5927\u503c\uff0c\u5219\u4e3aMicroPython\u6574\u6570\u7c7b\u578b\u8868\u793a\u7684\u6700\u5927\u503c\uff08\u5bf9\u4e8e\u4e0d\u652f\u6301\u957f\u6574\u578b\u7684MicroPython\u7aef\u53e3\u5c31\u662f\u8fd9\u79cd\u60c5\u51b5\uff09\u3002 sys.modules \u5df2\u8f7d\u5165\u6a21\u5757\u7684\u5b57\u5178\u3002 sys.platform MicroPython\u8fd0\u884c\u7684\u5e73\u53f0\u3002 sys.stdin \u6807\u51c6\u8f93\u5165\uff08\u9ed8\u8ba4\u662fUSB\u865a\u62df\u4e32\u53e3\uff0c\u53ef\u9009\u5176\u4ed6\u4e32\u53e3\uff09\u3002 sys.stdout \u6807\u51c6\u8f93\u51fa\uff08\u9ed8\u8ba4\u662fUSB\u865a\u62df\u4e32\u53e3\uff0c\u53ef\u9009\u5176\u4ed6\u4e32\u53e3\uff09\u3002 sys.version MicroPython \u8bed\u8a00\u7248\u672c\uff0c\u5b57\u7b26\u4e32\u683c\u5f0f\u3002 sys.version_info MicroPython \u8bed\u8a00\u7248\u672c\uff0c\u6574\u6570\u5143\u7ec4\u683c\u5f0f\u3002 \u65b9\u6cd5 sys.exit(retval=0) \u4f7f\u7528\u7ed9\u5b9a\u7684\u53c2\u6570\u9000\u51fa\u5f53\u524d\u7a0b\u5e8f\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u8be5\u51fd\u6570\u4f1a\u5f15\u53d1 SystemExit \u9000\u51fa\u3002\u5982\u679c\u7ed9\u5b9a\u4e86\u53c2\u6570\uff0c\u5219\u5c06\u5176\u503c\u4f5c\u4e3a\u53c2\u6570\u8d4b\u503c\u7ed9 SystemExit \u3002 sys.print_exception(exc, file=sys.stdout) \u6253\u5370\u5f02\u5e38\u5230\u6587\u4ef6\u5bf9\u8c61\uff0c\u9ed8\u8ba4\u662f sys.stdout\uff0c\u5373\u8f93\u51fa\u5f02\u5e38\u4fe1\u606f\u7684\u6807\u51c6\u8f93\u51fa\u3002","title":"sys - \u7cfb\u7edf\u76f8\u5173\u529f\u80fd"},{"location":"QuecPython%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/#uzlib-zlib","text":"uzlib \u6a21\u5757\u89e3\u538b\u7f29\u7528 DEFLATE\u7b97\u6cd5 \u538b\u7f29\u7684\u4e8c\u8fdb\u5236\u6570\u636e \uff08\u901a\u5e38\u5728zlib\u5e93\u548cgzip\u5b58\u6863\u5668\u4e2d\u4f7f\u7528\uff09\uff0c\u538b\u7f29\u5c1a\u672a\u5b9e\u73b0\u3002\u8be5\u6a21\u5757\u5b9e\u73b0\u76f8\u5e94CPython\u6a21\u5757\u7684\u5b50\u96c6\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605\u9605CPython\u6587\u6863\uff1a zlib \u6ce8\u610f\uff1a\u89e3\u538b\u7f29\u524d\uff0c\u5e94\u68c0\u67e5\u6a21\u5757\u5185\u53ef\u4f7f\u7528\u7684\u7a7a\u95f4\uff0c\u786e\u4fdd\u6709\u8db3\u591f\u7a7a\u95f4\u89e3\u538b\u6587\u4ef6\u3002 uzlib.decompress(data, wbits=0, bufsize=0) \u8fd4\u56de\u89e3\u538b\u540e\u7684 bytes \u5bf9\u8c61\u3002 wbits \u662f\u89e3\u538b\u65f6\u4f7f\u7528\u7684DEFLATE\u5b57\u5178\u7a97\u53e3\u5927\u5c0f\uff088-15\uff0c\u5b57\u5178\u5927\u5c0f\u662f wbits \u503c\u76842\u7684\u5e42\uff09\u3002\u5982\u679c\u8be5\u503c\u4e3a\u6b63\uff0c\u5219\u5047\u5b9a data \u4e3azlib\u6d41\uff08\u5e26\u6709zlib\u6807\u5934\uff09\uff0c\u5982\u679c\u4e3a\u8d1f\uff0c\u5219\u5047\u5b9a\u4e3a\u539f\u59cb\u7684DEFLATE\u6d41\u3002 bufsize \u53c2\u6570\u662f\u4e3a\u4e86\u4e0eCPython\u517c\u5bb9\uff0c\u5c06\u88ab\u5ffd\u7565\u3002 class uzlib.DecompIO(stream, wbits=0) \u521b\u5efa\u4e00\u4e2a stream \u88c5\u9970\u5668\uff0c\u8be5\u88c5\u9970\u5668\u5141\u8bb8\u5728\u53e6\u4e00\u4e2a\u6d41\u4e2d\u900f\u660e\u5730\u538b\u7f29\u6570\u636e\u3002\u8fd9\u5141\u8bb8\u5904\u7406\u6570\u636e\u5927\u4e8e\u53ef\u7528\u5806\u5927\u5c0f\u7684\u538b\u7f29\u6d41\u3002wbits\u7684\u503c\u9664\u4e86\u4e0a\u9762\u6240\u8ff0\u7684\u503c\u4ee5\u5916\uff0c\u8fd8\u53ef\u4ee5\u53d6\u503c24..31\uff0816 + 8..15\uff09\uff0c\u8fd9\u8868\u793a\u8f93\u5165\u6d41\u5177\u6709gzip\u6807\u5934\u3002","title":"uzlib - zlib\u89e3\u538b\u7f29"},{"location":"QuecPython%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/#_thread-","text":"_thread \u6a21\u5757\u63d0\u4f9b\u521b\u5efa\u65b0\u7ebf\u7a0b\u7684\u65b9\u6cd5\uff0c\u5e76\u63d0\u4f9b\u4e92\u65a5\u9501\u3002 _thread.get_ident() \u83b7\u53d6\u5f53\u524d\u7ebf\u7a0b\u53f7\u3002 _thread.get_heap_size() \u83b7\u53d6\u7cfb\u7edf\u5269\u4f59\u5185\u5b58\u5927\u5c0f\u3002 _thread.stack_size(size) \u8bbe\u7f6e\u521b\u5efa\u65b0\u7ebf\u7a0b\u4f7f\u7528\u7684\u6808\u5927\u5c0f\uff08\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\uff09\uff0c\u9ed8\u8ba4\u4e3a8k\u3002 _thread.start_new_thread(function, args) \u521b\u5efa\u4e00\u4e2a\u65b0\u7ebf\u7a0b\uff0c\u63a5\u6536\u6267\u884c\u51fd\u6570\u548c\u88ab\u6267\u884c\u51fd\u6570\u53c2\u6570\u3002 _thread.allocate_lock() \u521b\u5efa\u4e00\u4e2a\u4e92\u65a5\u9501\u5bf9\u8c61\u3002 \u793a\u4f8b\uff1a import _thread lock = _thread.allocate_lock() lock.acquire() \u83b7\u53d6\u9501\uff0c\u6210\u529f\u8fd4\u56deTrue\uff0c\u5426\u5219\u8fd4\u56deFalse\u3002 lock.release() \u91ca\u653e\u9501\u3002 lock.locked() \u8fd4\u56de\u9501\u7684\u72b6\u6001\uff0cTrue\u8868\u793a\u88ab\u67d0\u4e2a\u7ebf\u7a0b\u83b7\u53d6\uff0cFalse\u5219\u8868\u793a\u6ca1\u6709\u3002 _thread\u4f7f\u7528\u793a\u4f8b import _thread a = 0 lock = _thread.allocate_lock() def th_func(delay, id): global a while True: lock.acquire() # \u83b7\u53d6\u9501 if a >= 10: print('thread %d exit' % id) lock.release() # \u91ca\u653e\u9501 break a+=1 print('[thread %d] a is %d' % (id, a)) lock.release() for i in range(2): _thread.start_new_thread(th_func, (i + 1, i))","title":"_thread - \u591a\u7ebf\u7a0b"},{"location":"QuecPython%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/#uhashlib-","text":"\u6a21\u5757\u529f\u80fd: \u5b9e\u73b0\u4e8c\u8fdb\u5236\u6570\u636e\u6563\u5217\u7b97\u6cd5,\u76ee\u524d\u652f\u6301sha256\uff0csha1\uff0cMD5\u3002 \u200b hash_obj = uhashlib.sha256(bytes) \u521b\u5efa\u4e00\u4e2aSHA256\u54c8\u5e0c\u5bf9\u8c61 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e bytes bytes \u53ef\u9009\u53c2\u6570\uff0c\u53ef\u5728\u521b\u5efa\u65f6\u4f20\u5165bytes\u6570\u636e\uff0c\u4e5f\u53ef\u901a\u8fc7update\u65b9\u6cd5 \u8fd4\u56de\u503c SHA256\u54c8\u5e0c\u5bf9\u8c61 \u200b hash_obj = uhashlib.sha1(bytes) \u521b\u5efa\u4e00\u4e2aSHA1\u54c8\u5e0c\u5bf9\u8c61 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e bytes bytes \u53ef\u9009\u53c2\u6570\uff0c\u53ef\u5728\u521b\u5efa\u65f6\u4f20\u5165bytes\u6570\u636e\uff0c\u4e5f\u53ef\u901a\u8fc7update\u65b9\u6cd5 \u8fd4\u56de\u503c SHA1\u54c8\u5e0c\u5bf9\u8c61 \u200b hash_obj = uhashlib.md5(bytes) \u521b\u5efa\u4e00\u4e2aMD5\u54c8\u5e0c\u5bf9\u8c61 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e bytes bytes \u53ef\u9009\u53c2\u6570\uff0c\u53ef\u5728\u521b\u5efa\u65f6\u4f20\u5165bytes\u6570\u636e\uff0c\u4e5f\u53ef\u901a\u8fc7update\u65b9\u6cd5 \u8fd4\u56de\u503c MD5\u54c8\u5e0c\u5bf9\u8c61 \u54c8\u5e0c\u5bf9\u8c61\u65b9\u6cd5 \u200b hash_obj .update(bytes) \u5c06\u66f4\u591a\u7684bytes\u6570\u636e\u52a0\u5230\u6563\u5217 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e bytes bytes \u9700\u8981\u88ab\u52a0\u5bc6\u7684\u6570\u636e \u8fd4\u56de\u503c \u65e0 \u200b hash_obj .digest() \u8fd4\u56de\u901a\u8fc7\u54c8\u5e0c\u4f20\u9012\u7684\u6240\u6709\u6570\u636e\u7684\u6563\u5217\uff0c\u6570\u636e\u4e3a\u5b57\u8282\u7c7b\u578b\u3002\u8c03\u7528\u6b64\u65b9\u6cd5\u540e\uff0c\u65e0\u6cd5\u518d\u5c06\u66f4\u591a\u7684\u6570\u636e\u9001\u5165\u6563\u5217\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u8fd4\u56de\u52a0\u5bc6\u540e\u5b57\u8282\u7c7b\u578b\u7684\u6570\u636e \u4f7f\u7528\u5b9e\u4f8b import uhashlib import ubinascii hash_obj = uhashlib.sha256() # \u521b\u5efahash\u5bf9\u8c61 hash_obj.update(b\"QuecPython\") res = hash_obj.digest() # b\"\\x1e\\xc6gq\\xb3\\xa9\\xac>\\xa4\\xc4O\\x00\\x9eTW\\x97\\xd4.\\x9e}Bo\\xff\\x82u\\x89Th\\xfe'\\xc6\\xcd\" # \u8f6c\u6210\u5341\u516d\u8fdb\u5236\u8868\u793a hex_msg = ubinascii.hexlify(res) # b'1ec66771b3a9ac3ea4c44f009e545797d42e9e7d426fff8275895468fe27c6cd'","title":"uhashlib - \u54c8\u5e0c\u7b97\u6cd5"},{"location":"QuecPython%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/#quecpython_3","text":"","title":"QuecPython\u7c7b\u5e93"},{"location":"QuecPython%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/#example-python","text":"\u6a21\u5757\u529f\u80fd\uff1a\u63d0\u4f9b\u65b9\u6cd5\u8ba9\u7528\u6237\u53ef\u4ee5\u5728\u547d\u4ee4\u884c\u6216\u8005\u4ee3\u7801\u4e2d\u6267\u884cpython\u811a\u672c\u3002 example.exec(filename) \u6267\u884c\u6307\u5b9a\u7684python\u811a\u672c\u6587\u4ef6\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e filename string \u8981\u6267\u884cpython\u811a\u672c\u7684\u6587\u4ef6\u540d \u8fd4\u56de\u503c \u65e0 \u793a\u4f8b # \u5047\u8bbe\u6709\u6587\u4ef6test.py,\u5185\u5bb9\u5982\u4e0b def myprint(): count = 10 while count > 0: count -= 1 print('##### test #####') myprint() #\u5c06test.py\u6587\u4ef6\u4e0a\u4f20\u5230\u6a21\u5757\u4e2d\uff0c\u8fdb\u5165\u547d\u4ee4\u884c\u6267\u884c\u5982\u4e0b\u4ee3\u7801 >>> uos.listdir() ['apn_cfg.json', 'test.py'] >>> import example >>> example.exec('test.py') # \u6267\u884c\u7ed3\u679c\u5982\u4e0b ##### test ##### ##### test ##### ##### test ##### ##### test ##### ##### test ##### ##### test ##### ##### test ##### ##### test ##### ##### test ##### ##### test #####","title":"example - \u6267\u884cpython\u811a\u672c"},{"location":"QuecPython%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/#datacall-","text":"\u6a21\u5757\u529f\u80fd\uff1a\u63d0\u4f9b\u6570\u636e\u62e8\u53f7\u76f8\u5173\u63a5\u53e3\u3002 dataCall.start(profileIdx, ipType, apn, username, password, authType) \u542f\u52a8\u62e8\u53f7\uff0c\u8fdb\u884c\u6570\u636e\u94fe\u8def\u6fc0\u6d3b\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e profileIdx int PDP\u7d22\u5f15\uff0c\u53d6\u503c1-8\uff0c\u4e00\u822c\u8bbe\u7f6e\u4e3a1\uff0c\u8bbe\u7f6e\u5176\u4ed6\u503c\u53ef\u80fd\u9700\u8981\u4e13\u7528apn\u4e0e\u5bc6\u7801\u624d\u80fd\u8bbe\u7f6e\u6210\u529f ipType int IP\u7c7b\u578b\uff0c0-IPV4\uff0c1-IPV6\uff0c2-IPV4\u548cIPV6 apn string apn\u540d\u79f0\uff0c\u53ef\u4e3a\u7a7a username string apn\u7528\u6237\u540d\uff0c\u53ef\u4e3a\u7a7a password string apn\u5bc6\u7801\uff0c\u53ef\u4e3a\u7a7a authType int \u52a0\u5bc6\u65b9\u5f0f\uff0c0-\u4e0d\u52a0\u5bc6\uff0c1-PAP\uff0c2-CHAP\uff0c3-PAP\u6216CHAP \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u6574\u578b\u503c0\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\u3002 \u793a\u4f8b >>> import dataCall >>> dataCall.start(1, 0, \"3gnet.mnc001.mcc460.gprs\", \"\", \"\", 0) 0 dataCall.setApn(profileIdx, ipType, apn, username, password, authType) \u7528\u6237apn\u4fe1\u606f\u914d\u7f6e\u63a5\u53e3\uff0c\u7528\u6237\u8c03\u7528\u8be5\u63a5\u53e3\u540e\uff0c\u4f1a\u5728\u7528\u6237\u5206\u533a\u76ee\u5f55\u4e0b\u521b\u5efauser_apn.json\u6587\u4ef6\uff0c\u7528\u4e8e\u4fdd\u5b58\u7528\u6237apn\u4fe1\u606f\uff0c\u5e76\u4f7f\u7528\u8be5apn\u4fe1\u606f\u542f\u52a8\u62e8\u53f7\uff0c\u8fdb\u884c\u6570\u636e\u94fe\u8def\u6fc0\u6d3b\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e profileIdx int PDP\u7d22\u5f15\uff0c\u53d6\u503c1-8\uff0c\u4e00\u822c\u8bbe\u7f6e\u4e3a1\uff0c\u8bbe\u7f6e\u5176\u4ed6\u503c\u53ef\u80fd\u9700\u8981\u4e13\u7528apn\u4e0e\u5bc6\u7801\u624d\u80fd\u8bbe\u7f6e\u6210\u529f ipType int IP\u7c7b\u578b\uff0c0-IPV4\uff0c1-IPV6\uff0c2-IPV4\u548cIPV6 apn string apn\u540d\u79f0\uff0c\u53ef\u4e3a\u7a7a username string apn\u7528\u6237\u540d\uff0c\u53ef\u4e3a\u7a7a password string apn\u5bc6\u7801\uff0c\u53ef\u4e3a\u7a7a authType int \u52a0\u5bc6\u65b9\u5f0f\uff0c0-\u4e0d\u52a0\u5bc6\uff0c1-PAP\uff0c2-CHAP\uff0c3-PAP\u6216CHAP \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u6574\u578b\u503c0\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\u3002 \u793a\u4f8b >>> import dataCall >>> dataCall.setApn(1, 0, \"3gnet.mnc001.mcc460.gprs\", \"\", \"\", 0) 0 dataCall.setCallback(usrFun) \u6ce8\u518c\u7528\u6237\u56de\u8c03\u51fd\u6570\uff0c\u5f53\u7f51\u7edc\u72b6\u6001\u53d1\u751f\u53d8\u5316\uff0c\u6bd4\u5982\u65ad\u7ebf\u3001\u4e0a\u7ebf\u65f6\uff0c\u4f1a\u901a\u8fc7\u8be5\u56de\u8c03\u51fd\u6570\u901a\u77e5\u7528\u6237\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e usrFun function \u7528\u6237\u56de\u8c03\u51fd\u6570\uff0c\u51fd\u6570\u5f62\u5f0f\u89c1\u793a\u4f8b \u8fd4\u56de\u503c \u6ce8\u518c\u5931\u8d25\u8fd4\u56de\u6574\u578b-1\uff0c\u6210\u529f\u8fd4\u56de\u6574\u578b0\u3002 \u793a\u4f8b >>> import dataCall >>> import net >>> def nw_cb(args): pdp = args[0] nw_sta = args[1] if nw_sta == 1: print(\"*** network %d connected! ***\" % pdp) else: print(\"*** network %d not connected! ***\" % pdp) >>> dataCall.setCallback(nw_cb) 0 >>> net.setModemFun(4) # \u8fdb\u5165\u98de\u884c\u6a21\u5f0f 0 >>> *** network 1 not connected! *** # \u8fdb\u5165\u98de\u884c\u6a21\u5f0f\u5bfc\u81f4\u65ad\u7f51\uff0c\u901a\u8fc7\u56de\u8c03\u544a\u77e5\u7528\u6237 >>> net.setModemFun(1) # \u9000\u51fa\u98de\u884c\u6a21\u5f0f 0 >>> *** network 1 connected! *** # \u9000\u51fa\u98de\u884c\u6a21\u5f0f\uff0c\u81ea\u52a8\u62e8\u53f7\uff0c\u7b49\u5f85\u8054\u7f51\u6210\u529f\uff0c\u901a\u8fc7\u56de\u8c03\u544a\u77e5\u7528\u6237 dataCall.getInfo(profileIdx, ipType) \u83b7\u53d6\u6570\u636e\u62e8\u53f7\u4fe1\u606f\uff0c\u5305\u62ec\u8fde\u63a5\u72b6\u6001\u3001IP\u5730\u5740\u3001DNS\u7b49\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e profileIdx int PDP\u7d22\u5f15\uff0c\u53d6\u503c1-8 ipType int IP\u7c7b\u578b\uff0c0-IPV4\uff0c1-IPV6\uff0c2-IPV4\u548cIPV6 \u8fd4\u56de\u503c \u9519\u8bef\u8fd4\u56de\u6574\u578b-1\uff0c\u6210\u529f\u8fd4\u56de\u62e8\u53f7\u4fe1\u606f\uff0c\u8fd4\u56de\u683c\u5f0f\u6839\u636eipType\u7684\u4e0d\u540c\u800c\u6709\u6240\u533a\u522b\uff1a ipType =0\uff0c\u8fd4\u56de\u503c\u683c\u5f0f\u5982\u4e0b\uff1a (profileIdx, ipType, [nwState, reconnect, ipv4Addr, priDns, secDns]) profileIdx \uff1aPDP\u7d22\u5f15\uff0c\u53d6\u503c1-8 ipType \uff1aIP\u7c7b\u578b\uff0c0-IPV4\uff0c1-IPV6\uff0c2-IPV4\u548cIPV6 nwState \uff1a\u62e8\u53f7\u7ed3\u679c\uff0c0-\u5931\u8d25\uff0c1-\u6210\u529f reconnect \uff1a\u91cd\u62e8\u6807\u5fd7 ipv4Addr \uff1aipv4\u5730\u5740 priDns \uff1adns\u4fe1\u606f secDns \uff1adns\u4fe1\u606f ipType =1\uff0c\u8fd4\u56de\u503c\u683c\u5f0f\u5982\u4e0b\uff1a (profileIdx, ipType, [nwState, reconnect, ipv6Addr, priDns, secDns]) profileIdx \uff1aPDP\u7d22\u5f15\uff0c\u53d6\u503c1-8 ipType \uff1aIP\u7c7b\u578b\uff0c0-IPV4\uff0c1-IPV6\uff0c2-IPV4\u548cIPV6 nwState \uff1a\u62e8\u53f7\u7ed3\u679c\uff0c0-\u5931\u8d25\uff0c1-\u6210\u529f reconnect \uff1a\u91cd\u62e8\u6807\u5fd7 ipv6Addr \uff1aipv6\u5730\u5740 priDns \uff1adns\u4fe1\u606f secDns \uff1adns\u4fe1\u606f ipType =2\uff0c\u8fd4\u56de\u503c\u683c\u5f0f\u5982\u4e0b\uff1a (profileIdx, ipType, [nwState, reconnect, ipv4Addr, priDns, secDns], [nwState, reconnect, ipv6Addr, priDns, secDns]) \u793a\u4f8b >>> import dataCall >>> dataCall.getInfo(1, 0) (1, 0, [1, 0, '10.91.44.177', '58.242.2.2', '218.104.78.2']) \u6ce8\uff1a\u8fd4\u56de\u503c (1, 0, [0, 0, '0.0.0.0', '0.0.0.0', '0.0.0.0']) \u8868\u793a\u5f53\u524d\u6ca1\u6709\u62e8\u53f7\u6216\u8005\u62e8\u53f7\u6ca1\u6709\u6210\u529f\u3002","title":"dataCall - \u6570\u636e\u62e8\u53f7"},{"location":"QuecPython%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/#celllocator-","text":"\u6a21\u5757\u529f\u80fd\uff1a\u63d0\u4f9b\u57fa\u7ad9\u5b9a\u4f4d\u63a5\u53e3\uff0c\u83b7\u53d6\u5750\u6807\u4fe1\u606f\u3002 cellLocator.getLocation(serverAddr, port, token, timeout, profileID) \u83b7\u53d6\u57fa\u7ad9\u5750\u6807\u4fe1\u606f\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e serverAddr string \u670d\u52a1\u5668\u57df\u540d\uff0c\u957f\u5ea6\u5fc5\u987b\u5c0f\u4e8e255 bytes\uff0c\u76ee\u524d\u4ec5\u652f\u6301 \u201cwww.queclocator.com\u201d port int \u670d\u52a1\u5668\u7aef\u53e3\uff0c\u76ee\u524d\u4ec5\u652f\u6301 80 \u7aef\u53e3 token string \u5bc6\u94a5\uff0c16\u4f4d\u5b57\u7b26\u7ec4\u6210\uff0c\u9700\u8981\u7533\u8bf7 timeout int \u8bbe\u7f6e\u8d85\u65f6\u65f6\u95f4\uff0c\u8303\u56f41-300s\uff0c\u9ed8\u8ba4300s profileID int PDP\u7d22\u5f15\uff0c\u8303\u56f41-8 \u8fd4\u56de\u503c \u529f\u8fd4\u56de\u5ea6\u683c\u5f0f\u7ecf\u7eac\u5ea6\u5750\u6807\u4fe1\u606f\uff0c\u8fd4\u56de\u683c\u5f0f\uff1a (latitude, longtitude, accuracy) \uff0c (0.0, 0.0, 0) \u8868\u793a\u672a\u83b7\u53d6\u5230\u6709\u6548\u5750\u6807\u4fe1\u606f\uff1b\u5931\u8d25\u8fd4\u56de\u9519\u8bef\u7801\u8bf4\u660e\u5982\u4e0b\uff1a -1 \u2013 \u521d\u59cb\u5316\u5931\u8d25 -2 \u2013 \u670d\u52a1\u5668\u5730\u5740\u8fc7\u957f\uff08\u8d85\u8fc7255\u5b57\u8282\uff09 -3 \u2013 \u5bc6\u94a5\u957f\u5ea6\u9519\u8bef\uff0c\u5fc5\u987b\u4e3a16\u5b57\u8282 -4 \u2013 \u8d85\u65f6\u65f6\u957f\u8d85\u51fa\u8303\u56f4\uff0c\u652f\u6301\u7684\u8303\u56f4\uff081~300\uff09s -5 \u2013 \u6307\u5b9a\u7684PDP\u7f51\u7edc\u672a\u8fde\u63a5\uff0c\u8bf7\u786e\u8ba4PDP\u662f\u5426\u6b63\u786e -6 \u2013 \u83b7\u53d6\u5750\u6807\u51fa\u9519 \u793a\u4f8b >>> import cellLocator >>> cellLocator.getLocation(\"www.queclocator.com\", 80, \"1111111122222222\", 8, 1) (117.1138, 31.82279, 550) # \u4e0a\u9762\u4f7f\u7528\u7684\u5bc6\u94a5\u4ec5\u4e3a\u6d4b\u8bd5\u5bc6\u94a5","title":"cellLocator - \u57fa\u7ad9\u5b9a\u4f4d"},{"location":"QuecPython%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/#sim-sim","text":"\u6a21\u5757\u529f\u80fd\uff1a\u63d0\u4f9bsim\u5361\u64cd\u4f5c\u76f8\u5173API\uff0c\u5982\u67e5\u8be2sim\u5361\u72b6\u6001\u3001iccid\u3001imsi\u7b49\u3002 \u6ce8\u610f\uff1a\u80fd\u6210\u529f\u83b7\u53d6IMSI\u3001ICCID\u3001\u7535\u8bdd\u53f7\u7801\u7684\u524d\u63d0\u662fSIM\u5361\u72b6\u6001\u4e3a1\uff0c\u53ef\u901a\u8fc7sim.getStatus()\u67e5\u8be2\u3002 sim.getImsi() \u83b7\u53d6sim\u5361\u7684imsi\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56destring\u7c7b\u578b\u7684imsi\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b-1\u3002 \u793a\u4f8b >>> import sim >>> sim.getImsi() '460185466870381' sim.getIccid() \u83b7\u53d6sim\u5361\u7684iccid\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56destring\u7c7b\u578b\u7684iccid\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b-1\u3002 \u793a\u4f8b >>> sim.getIccid() '89860390845513443049' sim.getPhoneNumber() \u83b7\u53d6sim\u5361\u7684\u7535\u8bdd\u53f7\u7801\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56destring\u7c7b\u578b\u7684phone number\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b-1\u3002 \u793a\u4f8b >>> sim.getPhoneNumber() '+8618166328752' sim.getStatus() \u83b7\u53d6sim\u5361\u7684\u72b6\u6001\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u8fd4\u56de\u503c \u8bf4\u660e 0 SIM was removed. 1 SIM is ready. 2 Expecting the universal PIN./SIM is locked, waiting for a CHV1 password. 3 Expecting code to unblock the universal PIN./SIM is blocked, CHV1 unblocking password is required. 4 SIM is locked due to a SIM/USIM personalization check failure. 5 SIM is blocked due to an incorrect PCK; an MEP unblocking password is required. 6 Expecting key for hidden phone book entries. 7 Expecting code to unblock the hidden key. 8 SIM is locked; waiting for a CHV2 password. 9 SIM is blocked; CHV2 unblocking password is required. 10 SIM is locked due to a network personalization check failure. 11 SIM is blocked due to an incorrect NCK; an MEP unblocking password is required. 12 SIM is locked due to a network subset personalization check failure. 13 SIM is blocked due to an incorrect NSCK; an MEP unblocking password is required. 14 SIM is locked due to a service provider personalization check failure. 15 SIM is blocked due to an incorrect SPCK; an MEP unblocking password is required. 16 SIM is locked due to a corporate personalization check failure. 17 SIM is blocked due to an incorrect CCK; an MEP unblocking password is required. 18 SIM is being initialized; waiting for completion. 19 Use of CHV1/CHV2/universal PIN/code to unblock the CHV1/code to unblock the CHV2/code to unblock the universal PIN/ is blocked. 20 Unknow status. sim.enablePin(pin) \u542f\u7528sim\u5361PIN\u7801\u9a8c\u8bc1\uff0c\u5f00\u542f\u540e\u9700\u8981\u8f93\u5165\u6b63\u786e\u7684PIN\u9a8c\u8bc1\u6210\u529f\u540e\uff0csim\u5361\u624d\u80fd\u6b63\u5e38\u4f7f\u7528\u3002\u53ea\u67093\u6b21\u8f93\u5165PIN\u7801\u673a\u4f1a\uff0c3\u6b21\u90fd\u9519\u8bef\uff0csim\u5361\u88ab\u9501\u5b9a\uff0c\u9700\u8981PUK\u6765\u89e3\u9501\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e pin string PIN\u7801\uff0c\u4e00\u822c\u9ed8\u8ba4\u662f\u20181234\u2019 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u6574\u578b0\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b-1\u3002 \u793a\u4f8b >>> sim.enablePin(\"1234\") 0 sim.disablePin(pin) \u5173\u95edsim\u5361PIN\u7801\u9a8c\u8bc1\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e pin string PIN\u7801\uff0c\u4e00\u822c\u9ed8\u8ba4\u662f\u20181234\u2019 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u6574\u578b0\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b-1\u3002 \u793a\u4f8b >>> sim.disablePin(\"1234\") 0 sim.verifyPin(pin) sim\u5361PIN\u7801\u9a8c\u8bc1\u3002\u9700\u8981\u5728\u8c03\u7528sim.enablePin(pin)\u6210\u529f\u4e4b\u540e\uff0c\u624d\u80fd\u8fdb\u884c\u9a8c\u8bc1\uff0c\u9a8c\u8bc1\u6210\u529f\u540e\uff0csim\u5361\u624d\u80fd\u6b63\u5e38\u4f7f\u7528\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e pin string PIN\u7801\uff0c\u4e00\u822c\u9ed8\u8ba4\u662f\u20181234\u2019 \u8fd4\u56de\u503c \u9a8c\u8bc1\u6210\u529f\u8fd4\u56de\u6574\u578b0\uff0c\u9a8c\u8bc1\u5931\u8d25\u8fd4\u56de\u6574\u578b-1\u3002 \u793a\u4f8b >>> sim.verifyPin(\"1234\") 0 sim.unblockPin(puk, newPin) sim\u5361\u89e3\u9501\u3002\u5f53\u591a\u6b21\u9519\u8bef\u8f93\u5165 PIN/PIN2 \u7801\u540e\uff0cSIM \u5361\u72b6\u6001\u4e3a\u8bf7\u6c42 PUK/PUK2 \u65f6\uff0c\u8f93\u5165 PUK/PUK2 \u7801\u548c\u65b0\u7684 PIN/PIN2 \u7801\u8fdb\u884c\u89e3\u9501\uff0cpuk\u7801\u8f93\u516510\u6b21\u9519\u8bef\uff0cSIM\u5361\u5c06\u88ab\u6c38\u4e45\u9501\u5b9a\u81ea\u52a8\u62a5\u5e9f\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e puk string PUK\u7801\uff0c\u957f\u5ea68\u4f4d\u6570\u5b57 newPin string \u65b0PIN\u7801 \u8fd4\u56de\u503c \u89e3\u9501\u6210\u529f\u8fd4\u56de\u6574\u578b0\uff0c\u89e3\u9501\u5931\u8d25\u8fd4\u56de\u6574\u578b-1\u3002 \u793a\u4f8b >>> sim.unblockPin(\"12345678\", \"0000\") 0 sim.changePin(oldPin, newPin) \u66f4\u6539sim\u5361PIN\u7801\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e oldPin string \u65e7\u7684PIN\u7801 newPin string \u65b0\u7684PIN\u7801 \u8fd4\u56de\u503c \u66f4\u6539\u6210\u529f\u8fd4\u56de\u6574\u578b0\uff0c\u66f4\u6539\u5931\u8d25\u8fd4\u56de\u6574\u578b-1\u3002 \u793a\u4f8b >>> sim.changePin(\"1234\", \"4321\") 0 sim.readPhonebook(storage, start, end, username) \u83b7\u53d6 SIM \u5361\u4e0a\u6307\u5b9a\u7535\u8bdd\u672c\u4e2d\u7684\u4e00\u6761\u6216\u591a\u6761\u7535\u8bdd\u53f7\u7801\u8bb0\u5f55\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e storage int \u9700\u8981\u8bfb\u53d6\u7535\u8bdd\u53f7\u7801\u8bb0\u5f55\u7684\u7535\u8bdd\u672c\u5b58\u50a8\u4f4d\u7f6e\uff0c\u53ef\u9009\u53c2\u6570\u5982\u4e0b\uff1a 0 \u2013 DC\uff0c1 \u2013 EN\uff0c2 \u2013 FD\uff0c3 \u2013 LD\uff0c4 \u2013 MC\uff0c5 \u2013 ME\uff0c6 \u2013 MT\uff0c7 \u2013 ON\uff0c 8 \u2013 RC\uff0c9 \u2013 SM\uff0c10 \u2013 AP\uff0c11 \u2013 MBDN\uff0c12 \u2013 MN\uff0c13 \u2013 SDN\uff0c14 \u2013 ICI\uff0c15 - OCI start int \u9700\u8981\u8bfb\u53d6\u7535\u8bdd\u53f7\u7801\u8bb0\u5f55\u7684\u8d77\u59cb\u7f16\u53f7\uff0cstart\u4e3a 0 \u8868\u793a\u4e0d\u4f7f\u7528\u7f16\u53f7\u83b7\u53d6\u7535\u8bdd\u53f7\u7801\u8bb0 end int \u9700\u8981\u8bfb\u53d6\u7535\u8bdd\u53f7\u7801\u8bb0\u5f55\u7684\u7ed3\u675f\u7f16\u53f7 username string \u5f53 start\u4e3a 0 \u65f6\u6709\u6548\uff0c\u7535\u8bdd\u53f7\u7801\u4e2d\u7684\u7528\u6237\u540d \u8fd4\u56de\u503c \u8bfb\u53d6\u5931\u8d25\u8fd4\u56de\u6574\u578b-1\uff0c\u6210\u529f\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4\uff0c\u5305\u542b\u8bfb\u53d6\u8bb0\u5f55\uff0c\u683c\u5f0f\u5982\u4e0b\uff1a (record_number, [(index, username, phone_number), ... , (index, username, phone_number)]) \u8fd4\u56de\u503c\u53c2\u6570\u8bf4\u660e\uff1a record_number \u2013 \u8bfb\u53d6\u7684\u8bb0\u5f55\u6570\u91cf\uff0c\u6574\u578b index \u2013 \u5728\u7535\u8bdd\u7c3f\u4e2d\u7684\u7d22\u5f15\u4f4d\u7f6e\uff0c\u6574\u578b username \u2013 \u59d3\u540d\uff0cstring\u7c7b\u578b phone_number \u2013 \u7535\u8bdd\u53f7\u7801\uff0cstring\u7c7b\u578b \u793a\u4f8b >>> sim.readPhonebook(9, 1, 3, \"\") (3,[(1,'zhangsan','15544272539'),(2,'lisi','15544272539'),(3,'wangwu','18144786859')]) sim. writePhonebook(storage, index, username, number) \u5199\u5165\u4e00\u6761\u7535\u8bdd\u53f7\u7801\u8bb0\u5f55\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e storage int \u9700\u8981\u8bfb\u53d6\u7535\u8bdd\u53f7\u7801\u8bb0\u5f55\u7684\u7535\u8bdd\u672c\u5b58\u50a8\u4f4d\u7f6e\uff0c\u53ef\u9009\u53c2\u6570\u5982\u4e0b\uff1a 0 \u2013 DC\uff0c1 \u2013 EN\uff0c2 \u2013 FD\uff0c3 \u2013 LD\uff0c4 \u2013 MC\uff0c5 \u2013 ME\uff0c6 \u2013 MT\uff0c7 \u2013 ON\uff0c 8 \u2013 RC\uff0c9 \u2013 SM\uff0c10 \u2013 AP\uff0c11 \u2013 MBDN\uff0c12 \u2013 MN\uff0c13 \u2013 SDN\uff0c14 \u2013 ICI\uff0c15 - OCI index int \u9700\u8981\u5199\u5165\u7535\u8bdd\u53f7\u7801\u8bb0\u5f55\u7684\u5728\u7535\u8bdd\u7c3f\u4e2d\u7684\u7f16\u53f7 username string \u7535\u8bdd\u53f7\u7801\u7684\u7528\u6237\u540d number string \u7535\u8bdd\u53f7\u7801 \u8fd4\u56de\u503c \u5199\u5165\u6210\u529f\u8fd4\u56de\u6574\u578b0\uff0c\u5199\u5165\u5931\u8d25\u8fd4\u56de\u6574\u578b-1\u3002","title":"sim - SIM\u5361"},{"location":"QuecPython%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/#net-","text":"\u6a21\u5757\u529f\u80fd\uff1a\u8be5\u6a21\u5757\u63d0\u4f9b\u914d\u7f6e\u548c\u67e5\u8be2\u7f51\u7edc\u6a21\u5f0f\u4fe1\u606f\u7b49\u63a5\u53e3\u3002 net.csqQueryPoll() \u83b7\u53d6csq\u4fe1\u53f7\u5f3a\u5ea6\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u6574\u578b\u7684csq\u4fe1\u53f7\u5f3a\u5ea6\u503c\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\uff0c\u8fd4\u56de\u503c\u4e3a99\u8868\u793a\u5f02\u5e38\uff1b \u4fe1\u53f7\u5f3a\u5ea6\u503c\u8303\u56f40~31\uff0c\u503c\u8d8a\u5927\u8868\u793a\u4fe1\u53f7\u5f3a\u5ea6\u8d8a\u597d\u3002 \u793a\u4f8b >>> import net >>> net.csqQueryPoll() 31 net.getCellInfo() \u83b7\u53d6\u90bb\u8fd1 CELL \u7684\u4fe1\u606f\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\uff0c\u6210\u529f\u8fd4\u56de\u5305\u542b\u4e09\u79cd\u7f51\u7edc\u7cfb\u7edf\uff08GSM\u3001UMTS\u3001LTE\uff09\u7684\u4fe1\u606f\u7684list\uff0c\u5982\u679c\u5bf9\u5e94\u7f51\u7edc\u7cfb\u7edf\u4fe1\u606f\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56de\u7a7a\u7684List\u3002\u8fd4\u56de\u503c\u683c\u5f0f\u5982\u4e0b\uff1a ([(flag, cid, mcc, mnc, lac, arfcn, bsic, rssi)], [(flag, cid, licd, mcc, mnc, lac, arfcn, bsic, rssi)], [(flag, cid, mcc, mnc, pci, tac, earfcn, rssi)]) GSM\u7f51\u7edc\u7cfb\u7edf\u8fd4\u56de\u503c\u8bf4\u660e \u53c2\u6570 \u53c2\u6570\u610f\u4e49 flag \u8fd4\u56de 0 - 2\uff0c 0\uff1apresent\uff0c1\uff1ainter\uff0c2\uff1aintra cid \u8fd4\u56decid\u4fe1\u606f\uff0c0\u5219\u4e3a\u7a7a mcc \u79fb\u52a8\u8bbe\u5907\u56fd\u5bb6\u4ee3\u7801 mnc \u79fb\u52a8\u8bbe\u5907\u7f51\u7edc\u4ee3\u7801 lac \u4f4d\u7f6e\u533a\u7801 arfcn \u65e0\u7ebf\u9891\u9053\u7f16\u53f7 bsic \u57fa\u7ad9\u8bc6\u522b\u7801 rssi \u63a5\u6536\u7684\u4fe1\u53f7\u5f3a\u5ea6 UMTS\u7f51\u7edc\u7cfb\u7edf\u8fd4\u56de\u503c\u8bf4\u660e \u53c2\u6570 \u53c2\u6570\u610f\u4e49 flag \u8fd4\u56de 0 - 2\uff0c 0\uff1apresent\uff0c1\uff1ainter\uff0c2\uff1aintra cid \u8fd4\u56decid\u4fe1\u606f\uff0c0\u5219\u4e3a\u7a7a licd \u533a\u57df\u6807\u8bc6\u53f7 mcc \u79fb\u52a8\u8bbe\u5907\u56fd\u5bb6\u4ee3\u7801 mnc \u79fb\u52a8\u8bbe\u5907\u7f51\u7edc\u4ee3\u7801 lac \u4f4d\u7f6e\u533a\u7801 arfcn \u65e0\u7ebf\u9891\u9053\u7f16\u53f7 bsic \u57fa\u7ad9\u8bc6\u522b\u7801 rssi \u63a5\u6536\u7684\u4fe1\u53f7\u5f3a\u5ea6 LTE\u7f51\u7edc\u7cfb\u7edf\u8fd4\u56de\u503c\u8bf4\u660e \u53c2\u6570 \u53c2\u6570\u610f\u4e49 flag \u8fd4\u56de 0 - 2\uff0c 0\uff1apresent\uff0c1\uff1ainter\uff0c2\uff1aintra cid \u8fd4\u56decid\u4fe1\u606f\uff0c0\u5219\u4e3a\u7a7a mcc \u79fb\u52a8\u8bbe\u5907\u56fd\u5bb6\u4ee3\u7801 mnc \u79fb\u52a8\u8bbe\u5907\u7f51\u7edc\u4ee3\u7801 pci \u5c0f\u533a\u6807\u8bc6 tac Tracing area code earfcn \u65e0\u7ebf\u9891\u9053\u7f16\u53f7 \u8303\u56f4: 0 - 65535 rssi \u63a5\u6536\u7684\u4fe1\u53f7\u5f3a\u5ea6 \u793a\u4f8b >>> net.getCellInfo() ([], [], [(0, 14071232, 1120, 0, 21771, 123, 1300)]) net.getConfig() \u83b7\u53d6\u5f53\u524d\u7f51\u7edc\u6a21\u5f0f\u3001\u6f2b\u6e38\u914d\u7f6e\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\uff0c\u6210\u529f\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4\uff0c\u5305\u542b\u5f53\u524d\u9996\u9009\u7684\u7f51\u7edc\u5236\u5f0f\u4e0e\u6f2b\u6e38\u6253\u5f00\u72b6\u6001\u3002 \u7f51\u7edc\u5236\u5f0f \u503c \u7f51\u7edc\u5236\u5f0f 0 GSM 1 UMTS . not supported in EC100Y 2 GSM_UMTS, auto. not supported in EC100Y and EC200S 3 GSM_UMTS, GSM preferred. not supported in EC100Y and EC200S 4 SM_UMTS, UMTS preferred. not supported in EC100Y and EC200S 5 LTE 6 GSM_LTE, auto, single link 7 GSM_LTE, GSM preferred, single link 8 GSM_LTE, LTE preferred, single link 9 UMTS_LTE, auto, single link. not supported in EC100Y and EC200S 10 UMTS_LTE, UMTS preferred, single link. not supported in EC100Y and EC200S 11 UMTS_LTE, LTE preferred, single link . not supported in EC100Y and EC200S 12 GSM_UMTS_LTE, auto, single link. not supported in EC100Y and EC200S 13 GSM_UMTS_LTE, GSM preferred, single link. not supported in EC100Y and EC200S 14 GSM_UMTS_LTE, UMTS preferred, single link. not supported in EC100Y and EC200S 15 GSM_UMTS_LTE, LTE preferred, single link. not supported in EC100Y and EC200S 16 GSM_LTE, dual link 17 UMTS_LTE, dual link. not supported in EC100Y and EC200S 18 GSM_UMTS_LTE, dual link. not supported in EC100Y and EC200S \u793a\u4f8b >>>net.getConfig () (8, False) net.setConfig(mode, roaming) \u8bbe\u7f6e\u7f51\u7edc\u6a21\u5f0f\u3001\u6f2b\u6e38\u914d\u7f6e\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e mode int \u7f51\u7edc\u5236\u5f0f(\u8be6\u89c1\u4e0a\u56fe) roaming int \u6f2b\u6e38\u5f00\u5173(0\uff1a\u5173\u95ed\uff0c 1\uff1a\u5f00\u542f) \u8fd4\u56de\u503c \u8bbe\u7f6e\u6210\u529f\u8fd4\u56de\u6574\u578b\u503c0\uff0c\u8bbe\u7f6e\u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\u3002 net.getNetMode() \u83b7\u53d6\u7f51\u7edc\u914d\u7f6e\u6a21\u5f0f\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\uff0c\u6210\u529f\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4\uff0c\u683c\u5f0f\u4e3a\uff1a (selection_mode, mcc, mnc, act) \u8fd4\u56de\u503c\u53c2\u6570\u8bf4\u660e\uff1a selection_mode \uff1a\u65b9\u5f0f\uff0c0 - \u81ea\u52a8\uff0c1 - \u624b\u52a8 mcc \uff1a\u79fb\u52a8\u8bbe\u5907\u56fd\u5bb6\u4ee3\u7801 mnc \uff1a\u79fb\u52a8\u8bbe\u5907\u7f51\u7edc\u4ee3\u7801 act \uff1a\u9996\u9009\u7f51\u7edc\u7684ACT\u6a21\u5f0f ACT\u6a21\u5f0f \u503c ACT\u6a21\u5f0f 0 GSM 1 COMPACT 2 UTRAN 3 GSM wEGPRS 4 UTRAN wHSDPA 5 UTRAN wHSUPA 6 UTRAN wHSDPA HSUPA 7 E UTRAN 8 UTRAN HSPAP 9 E TRAN A 10 NONE \u793a\u4f8b >>> net.getNetMode() (0, '460', '46', 7) net.getSignal() \u83b7\u53d6\u8be6\u7ec6\u4fe1\u53f7\u5f3a\u5ea6\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\uff0c\u6210\u529f\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4\uff0c\u5305\u542b\u4e24\u4e2aList(GW \u3001LTE)\uff0c\u8fd4\u56de\u503c\u683c\u5f0f\u5982\u4e0b\uff1a ([rssi, bitErrorRate, rscp, ecno], [rssi, rsrp, rsrq, cqi]) \u8fd4\u56de\u503c\u53c2\u6570\u8bf4\u660e\uff1a GW list\uff1a rssi \uff1a\u63a5\u6536\u7684\u4fe1\u53f7\u5f3a\u5ea6 bitErrorRate \uff1a\u8bef\u7801\u7387 rscp \uff1a\u63a5\u6536\u4fe1\u53f7\u7801\u529f\u7387 ecno \uff1a\u5bfc\u9891\u4fe1\u9053 LTE list\uff1a rssi \uff1a\u63a5\u6536\u7684\u4fe1\u53f7\u5f3a\u5ea6 rsrp \uff1a\u4e0b\u884c\u53c2\u8003\u4fe1\u53f7\u7684\u63a5\u6536\u529f\u7387 rsrq \uff1a\u4e0b\u884c\u7279\u5b9a\u5c0f\u533a\u53c2\u8003\u4fe1\u53f7\u7684\u63a5\u6536\u8d28\u91cf cqi \uff1a\u4fe1\u9053\u8d28\u91cf \u793a\u4f8b >>>net.getSignal() ([99, 99, 255, 255], [-51, -76, -5, 255]) net.nitzTime() \u83b7\u53d6\u5f53\u524d\u57fa\u7ad9\u65f6\u95f4\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\uff0c\u6210\u529f\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4\uff0c\u5305\u542b\u57fa\u7ad9\u65f6\u95f4\u4e0e\u5bf9\u5e94\u65f6\u95f4\u6233\u4e0e\u95f0\u79d2\u6570\uff080\u8868\u793a\u4e0d\u53ef\u7528\uff09\uff0c\u683c\u5f0f\u4e3a\uff1a (date, abs_time, leap_sec) date \uff1a\u57fa\u7ad9\u65f6\u95f4\uff0cstring\u7c7b\u578b abs_time \uff1a\u57fa\u7ad9\u65f6\u95f4\u7684\u7edd\u5bf9\u79d2\u6570\u8868\u793a\uff0c\u6574\u578b leap_sec \uff1a\u95f0\u79d2\u6570\uff0c\u6574\u578b \u793a\u4f8b >>> net.nitzTime() ('20/11/26 02:13:25 +8 0', 1606356805, 0) net.operatorName() \u83b7\u53d6\u5f53\u524d\u6ce8\u7f51\u7684\u8fd0\u8425\u5546\u4fe1\u606f\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\uff0c\u6210\u529f\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4\uff0c\u5305\u542b\u6ce8\u7f51\u7684\u8fd0\u8425\u5546\u4fe1\u606f\uff0c\u683c\u5f0f\u4e3a\uff1a (long_eons, short_eons, mcc, mnc) long_eons \uff1a\u8fd0\u8425\u5546\u4fe1\u606f\u5168\u79f0\uff0cstring\u7c7b\u578b short_eons \uff1a\u8fd0\u8425\u5546\u4fe1\u606f\u7b80\u79f0\uff0cstring\u7c7b\u578b mcc \uff1a\u79fb\u52a8\u8bbe\u5907\u56fd\u5bb6\u4ee3\u7801\uff0cstring\u7c7b\u578b mnc \uff1a\u79fb\u52a8\u8bbe\u5907\u7f51\u7edc\u4ee3\u7801\uff0cstring\u7c7b\u578b \u793a\u4f8b >>> net.operatorName() ('CHN-UNICOM', 'UNICOM', '460', '01') net.getState() \u83b7\u53d6\u5f53\u524d\u7f51\u7edc\u6ce8\u518c\u4fe1\u606f\u3002 \u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\uff0c\u6210\u529f\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4\uff0c\u5305\u542b\u6ce8\u7f51\u7684\u7f51\u7edc\u6ce8\u518c\u4fe1\u606f\uff0c\u683c\u5f0f\u4e3a\uff1a ([voice_state, voice_lac, voice_cid, voice_rat, voice_reject_cause, voice_psc], [data_state, data _lac, data _cid, data _rat, data _reject_cause, data _psc]) \u8fd4\u56de\u503c\u53c2\u6570\u8bf4\u660e\uff1a state \uff1a\u7f51\u7edc\u6ce8\u518c\u72b6\u6001 lac \uff1a\u4f4d\u7f6e\u533a\u7801 cid \uff1aint\u7c7b\u578bid\u4fe1\u606f act \uff1a\u6ce8\u7f51\u5236\u5f0f reject_cause \uff1a\u6ce8\u518c\u88ab\u62d2\u7edd\u7684\u539f\u56e0 psc \uff1aPrimary Scrambling Code \u7f51\u7edc\u6ce8\u518c\u72b6\u6001 \u503c \u72b6\u6001\u8bf4\u660e 0 not registered, MT is not currently searching an operator to register to 1 registered, home network 2 not registered, but MT is currently trying to attach or searching an operator to register to 3 registration denied 4 unknown 5 registered, roaming 6 egistered for \u201cSMS only\u201d, home network (not applicable) 7 registered for \u201cSMS only\u201d, roaming (not applicable) 8 attached for emergency bearer services only 9 registered for \u201cCSFB not preferred\u201d, home network (not applicable) 10 registered for \u201cCSFB not preferred\u201d, roaming (not applicable) 11 emergency bearer services only \u793a\u4f8b >>> getState() ([11, 26909, 232301323, 7, 0, 466], [0, 26909, 232301323, 7, 0, 0]) net.getCi() \u83b7\u53d6\u9644\u8fd1\u5c0f\u533aID\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u4e00\u4e2alist\u7c7b\u578b\u7684\u6570\u7ec4\uff0c\u5305\u542b\u5c0f\u533aid\uff0c\u683c\u5f0f\u4e3a\uff1a [id, \u2026\u2026, id] \u3002\u6570\u7ec4\u6210\u5458\u6570\u91cf\u5e76\u975e\u56fa\u5b9a\u4e0d\u53d8\uff0c\u4f4d\u7f6e\u4e0d\u540c\u3001\u4fe1\u53f7\u5f3a\u5f31\u4e0d\u540c\u7b49\u90fd\u53ef\u80fd\u5bfc\u81f4\u83b7\u53d6\u7684\u7ed3\u679c\u4e0d\u4e00\u6837\u3002 \u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\u3002 \u793a\u4f8b >>> net.getCi() [14071232, 0] net.getMnc() \u83b7\u53d6\u9644\u8fd1\u5c0f\u533a\u7684mnc\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u4e00\u4e2alist\u7c7b\u578b\u7684\u6570\u7ec4\uff0c\u5305\u542b\u5c0f\u533amnc\uff0c\u683c\u5f0f\u4e3a\uff1a [mnc, \u2026\u2026, mnc] \u3002\u6570\u7ec4\u6210\u5458\u6570\u91cf\u5e76\u975e\u56fa\u5b9a\u4e0d\u53d8\uff0c\u4f4d\u7f6e\u4e0d\u540c\u3001\u4fe1\u53f7\u5f3a\u5f31\u4e0d\u540c\u7b49\u90fd\u53ef\u80fd\u5bfc\u81f4\u83b7\u53d6\u7684\u7ed3\u679c\u4e0d\u4e00\u6837\u3002 \u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\u3002 \u793a\u4f8b >>> net.getMnc() [0, 0] net.getMcc() \u83b7\u53d6\u9644\u8fd1\u5c0f\u533a\u7684mcc\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u4e00\u4e2alist\u7c7b\u578b\u7684\u6570\u7ec4\uff0c\u5305\u542b\u5c0f\u533amcc\uff0c\u683c\u5f0f\u4e3a\uff1a [mcc, \u2026\u2026, mcc] \u3002\u6570\u7ec4\u6210\u5458\u6570\u91cf\u5e76\u975e\u56fa\u5b9a\u4e0d\u53d8\uff0c\u4f4d\u7f6e\u4e0d\u540c\u3001\u4fe1\u53f7\u5f3a\u5f31\u4e0d\u540c\u7b49\u90fd\u53ef\u80fd\u5bfc\u81f4\u83b7\u53d6\u7684\u7ed3\u679c\u4e0d\u4e00\u6837\u3002 \u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\u3002 \u793a\u4f8b >>> net.getMcc() [1120, 0] net.getLac() \u83b7\u53d6\u9644\u8fd1\u5c0f\u533a\u7684Lac\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u4e00\u4e2alist\u7c7b\u578b\u7684\u6570\u7ec4\uff0c\u5305\u542b\u5c0f\u533alac\uff0c\u683c\u5f0f\u4e3a\uff1a [lac, \u2026\u2026, lac] \u3002\u6570\u7ec4\u6210\u5458\u6570\u91cf\u5e76\u975e\u56fa\u5b9a\u4e0d\u53d8\uff0c\u4f4d\u7f6e\u4e0d\u540c\u3001\u4fe1\u53f7\u5f3a\u5f31\u4e0d\u540c\u7b49\u90fd\u53ef\u80fd\u5bfc\u81f4\u83b7\u53d6\u7684\u7ed3\u679c\u4e0d\u4e00\u6837\u3002 \u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\u3002 \u793a\u4f8b >>> net.getLac() [21771, 0] net.getModemFun() \u83b7\u53d6\u5f53\u524dSIM\u6a21\u5f0f\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u5f53\u524dSIM\u6a21\u5f0f\uff1a 0 \uff1a\u5168\u529f\u80fd\u5173\u95ed 1 \uff1a\u5168\u529f\u80fd\u5f00\u542f\uff08\u9ed8\u8ba4\uff09 4 \uff1a\u98de\u884c\u6a21\u5f0f \u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\u3002 \u793a\u4f8b >>> net.getModemFun() 1 net.setModemFun(function, rst) \u8bbe\u7f6e\u5f53\u524dSIM\u6a21\u5f0f\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e function int \u8bbe\u7f6eSIM\u5361\u6a21\u5f0f\uff0c0 - \u5168\u529f\u80fd\u5173\u95ed\uff0c 1 - \u5168\u529f\u80fd\u5f00\u542f\uff0c 4 - \u98de\u884c\u6a21\u5f0f rst int \u53ef\u9009\u53c2\u6570 \uff0c0 - \u8bbe\u7f6e\u7acb\u5373\u751f\u6548\uff08\u9ed8\u8ba4\u4e3a0\uff09\uff0c1 - \u8bbe\u7f6e\u5b8c\u91cd\u542f \u8fd4\u56de\u503c \u8bbe\u7f6e\u6210\u529f\u8fd4\u56de\u6574\u578b\u503c0\uff0c\u8bbe\u7f6e\u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\u3002 \u793a\u4f8b >>> net.setModemFun(4) 0","title":"net - \u7f51\u7edc\u76f8\u5173\u529f\u80fd"},{"location":"QuecPython%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/#fota-","text":"\u6a21\u5757\u529f\u80fd\uff1a\u56fa\u4ef6\u5347\u7ea7\u3002 \u521b\u5efafota\u5bf9\u8c61 import fota fota_obj = fota() fota_obj.write(bytesData, file_size) \u5199\u5165\u5347\u7ea7\u5305\u6570\u636e\u6d41\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e bytesData bytes \u5347\u7ea7\u5305\u6587\u4ef6\u6570\u636e file_size int \u5347\u7ea7\u5305\u6587\u4ef6\u603b\u5927\u5c0f(\u5355\u4f4d\uff1a\u5b57\u8282) \u8fd4\u56de\u503c \u5199\u5165\u6210\u529f\u8fd4\u56de\u6574\u578b\u503c0\uff0c\u5199\u5165\u5931\u8d25\u8fd4\u56de\u503c\u6574\u578b\u503c-1\u3002 fota_obj.verify() \u6570\u636e\u6821\u9a8c\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u68c0\u9a8c\u6210\u529f\u8fd4\u56de\u6574\u578b\u503c0\uff0c\u6821\u9a8c\u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\u3002 \u793a\u4f8b >>> fota_obj.verify() 0","title":"fota - \u56fa\u4ef6\u5347\u7ea7"},{"location":"QuecPython%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/#audio-","text":"\u6a21\u5757\u529f\u80fd\uff1a\u97f3\u9891\u64ad\u653e\uff0c\u652f\u6301TTS\u3001mp3\u4ee5\u53caAMR\u6587\u4ef6\u64ad\u653e\u3002","title":"audio - \u97f3\u9891\u64ad\u653e"},{"location":"QuecPython%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/#tts","text":"\u521b\u5efaTTS\u5bf9\u8c61 import audio tts = audio.TTS(device) \u53c2\u6570 device \uff1a\u8bbe\u5907\u7c7b\u578b\uff0c0 - \u8bdd\u7b52\uff0c1 - \u8033\u673a\uff0c2 - \u5587\u53ed\u3002 \u793a\u4f8b >>> import audio >>> tts = audio.TTS(1) tts.close() \u5173\u95edTTS\u529f\u80fd\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u6574\u578b0\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b-1\u3002 tts.play(priority, breakin, mode, str) \u8bed\u97f3\u64ad\u653e\uff0c\u652f\u6301\u4f18\u5148\u7ea70~4\uff0c\u6570\u5b57\u8d8a\u5927\u4f18\u5148\u7ea7\u8d8a\u9ad8\uff0c\u6bcf\u4e2a\u4f18\u5148\u7ea7\u7ec4\u53ef\u540c\u65f6\u6700\u591a\u52a0\u516510\u4e2a\u64ad\u653e\u4efb\u52a1\uff1b\u64ad\u653e\u7b56\u7565\u8bf4\u660e\u5982\u4e0b\uff1a \u5982\u679c\u5f53\u524d\u6b63\u5728\u64ad\u653e\u4efb\u52a1A\uff0c\u5e76\u4e14\u5141\u8bb8\u88ab\u6253\u65ad\uff0c\u6b64\u65f6\u6709\u9ad8\u4f18\u5148\u7ea7\u64ad\u653e\u4efb\u52a1B\uff0c\u90a3\u4e48\u4f1a\u6253\u65ad\u5f53\u524d\u4f4e\u4f18\u5148\u7ea7\u64ad\u653e\u4efb\u52a1A\uff0c\u76f4\u63a5\u64ad\u653e\u9ad8\u4f18\u5148\u7ea7\u4efb\u52a1B\uff1b \u5982\u679c\u5f53\u524d\u6b63\u5728\u64ad\u653e\u4efb\u52a1A\uff0c\u5e76\u4e14\u4e0d\u5141\u8bb8\u88ab\u6253\u65ad\uff0c\u6b64\u65f6\u6709\u9ad8\u4f18\u5148\u7ea7\u64ad\u653e\u4efb\u52a1B\uff0c\u90a3\u4e48B\u64ad\u653e\u4efb\u52a1\u5c06\u4f1a\u52a0\u5165\u5230\u64ad\u653e\u961f\u5217\u4e2d\u5408\u9002\u7684\u4f4d\u7f6e\uff0c\u7b49\u5f85A\u64ad\u653e\u5b8c\u6210\uff0c\u518d\u4f9d\u6b21\u4ece\u961f\u5217\u4e2d\u6309\u7167\u4f18\u5148\u7ea7\u4ece\u9ad8\u5230\u4f4e\u64ad\u653e\u5176\u4ed6\u4efb\u52a1\uff1b \u5982\u679c\u5f53\u524d\u6b63\u5728\u64ad\u653e\u4efb\u52a1A\uff0c\u4e14\u4e0d\u5141\u8bb8\u88ab\u6253\u65ad\uff0c\u6b64\u65f6\u6765\u4e86\u4e00\u4e2a\u540c\u4f18\u5148\u7ea7\u64ad\u653e\u4efb\u52a1B\uff0c\u90a3\u4e48B\u4f1a\u88ab\u52a0\u5165\u5230\u8be5\u4f18\u5148\u7ea7\u7ec4\u64ad\u653e\u961f\u5217\u961f\u5c3e\uff0c\u7b49\u5f85A\u64ad\u653e\u5b8c\u6210\uff0c\u518d\u4f9d\u6b21\u4ece\u961f\u5217\u4e2d\u6309\u7167\u4f18\u5148\u7ea7\u4ece\u9ad8\u5230\u4f4e\u64ad\u653e\u5176\u4ed6\u4efb\u52a1\uff1b \u5982\u679c\u5f53\u524d\u6b63\u5728\u64ad\u653e\u4efb\u52a1A\uff0c\u4e14\u5141\u8bb8\u88ab\u6253\u65ad\uff0c\u6b64\u65f6\u6765\u4e86\u4e00\u4e2a\u540c\u4f18\u5148\u7ea7\u64ad\u653e\u4efb\u52a1B\uff0c\u90a3\u4e48\u4f1a\u6253\u65ad\u5f53\u524d\u64ad\u653e\u4efb\u52a1A\uff0c\u76f4\u63a5\u64ad\u653e\u4efb\u52a1B\uff1b \u5982\u679c\u5f53\u524d\u6b63\u5728\u64ad\u653e\u4efb\u52a1A\uff0c\u4e14\u4efb\u52a1A\u7684\u4f18\u5148\u7ea7\u7ec4\u64ad\u653e\u961f\u5217\u4e2d\u5df2\u7ecf\u6709\u51e0\u4e2a\u64ad\u653e\u4efb\u52a1\u5b58\u5728\uff0c\u4e14\u8be5\u4f18\u5148\u7ea7\u7ec4\u64ad\u653e\u961f\u5217\u6700\u540e\u4e00\u4e2a\u4efb\u52a1N\u662f\u5141\u8bb8\u88ab\u6253\u65ad\u7684\uff0c\u6b64\u65f6\u5982\u679c\u6765\u4e86\u4e00\u4e2a\u540c\u6837\u4f18\u5148\u7ea7\u7684\u64ad\u653e\u4efb\u52a1B\uff0c\u90a3\u4e48\u4efb\u52a1B\u4f1a\u76f4\u63a5\u8986\u76d6\u6389\u4efb\u52a1N\uff1b\u4e5f\u5c31\u662f\u8bf4\uff0c\u67d0\u4e2a\u4f18\u5148\u7ea7\u7ec4\uff0c\u53ea\u6709\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u662f\u5141\u8bb8\u88ab\u6253\u65ad\u7684\uff0c\u5373breakin\u4e3a1\uff0c\u5176\u4ed6\u4efb\u52a1\u90fd\u662f\u4e0d\u5141\u8bb8\u88ab\u6253\u65ad\u7684\uff1b \u5982\u679c\u5f53\u524d\u6b63\u5728\u64ad\u653e\u4efb\u52a1A\uff0c\u4e0d\u7ba1\u4efb\u52a1A\u662f\u5426\u5141\u8bb8\u88ab\u6253\u65ad\uff0c\u6b64\u65f6\u6765\u4e86\u4e00\u4e2a\u4f18\u5148\u7ea7\u4f4e\u4e8e\u4efb\u52a1A\u7684\u8bf7\u6c42B\uff0c\u90a3\u4e48\u5c06B\u52a0\u5165\u5230B\u5bf9\u5e94\u4f18\u5148\u7ea7\u7ec4\u64ad\u653e\u961f\u5217\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e priority int \u64ad\u653e\u4f18\u5148\u7ea7\uff0c\u652f\u6301\u4f18\u5148\u7ea70~4\uff0c\u6570\u503c\u8d8a\u5927\u4f18\u5148\u7ea7\u8d8a\u9ad8 breakin int \u6253\u65ad\u6a21\u5f0f\uff0c0\u8868\u793a\u4e0d\u5141\u8bb8\u88ab\u6253\u65ad\uff0c1\u8868\u793a\u5141\u8bb8\u88ab\u6253\u65ad mode int \u7f16\u7801\u6a21\u5f0f\uff0c1 - UNICODE16(Size end conversion)\uff0c2 - UTF-8\uff0c3 - UNICODE16(Don't convert) str string \u5f85\u64ad\u653e\u5b57\u7b26\u4e32 \u8fd4\u56de\u503c \u64ad\u653e\u6210\u529f\u8fd4\u56de\u6574\u578b0\uff1b \u64ad\u653e\u5931\u8d25\u8fd4\u56de\u6574\u578b-1\uff1b \u65e0\u6cd5\u7acb\u5373\u64ad\u653e\uff0c\u52a0\u5165\u64ad\u653e\u961f\u5217\uff0c\u8fd4\u56de\u6574\u578b1\uff1b \u65e0\u6cd5\u7acb\u5373\u64ad\u653e\uff0c\u4e14\u8be5\u8bf7\u6c42\u7684\u4f18\u5148\u7ea7\u7ec4\u961f\u5217\u4efb\u52a1\u5df2\u8fbe\u4e0a\u9650\uff0c\u65e0\u6cd5\u52a0\u5165\u64ad\u653e\u961f\u5217\uff0c\u8fd4\u56de\u6574\u578b-2\u3002 \u793a\u4f8b >>> import audio >>> tts = audio.TTS(1) #\u6b63\u5728\u64ad\u653e\u4efb\u52a1A\uff0c\u4e14A\u5141\u8bb8\u88ab\u6253\u65ad\uff0c\u6b64\u65f6\u6765\u4e86\u4efb\u52a1B\uff0c\u4e14\u4f18\u5148\u7ea7\u9ad8\u4e8e\u4efb\u52a1A\uff0c\u90a3\u4e48A\u4f1a\u88ab#\u6253\u65ad\uff0c\u76f4\u63a5\u64ad\u653eB >>> tts.play(1, 1, 2, '1111111111111111') #\u4efb\u52a1A 0 >>> tts.play(2, 0, 2, '2222222222222222') #\u4efb\u52a1B 0 #\u6b63\u5728\u64ad\u653e\u4efb\u52a1A\uff0c\u4e14A\u4e0d\u5141\u8bb8\u88ab\u6253\u65ad\uff0c\u6b64\u65f6\u6765\u4e86\u4efb\u52a1B\uff0c\u4e14\u4f18\u5148\u7ea7\u9ad8\u4e8e\u4efb\u52a1A\uff0c\u90a3\u4e48B\u4f1a#\u88ab\u52a0\u5165\u64ad\u653e\u961f\u5217\uff0c\u7b49\u5f85A\u64ad\u653e\u5b8c\u6210\u64ad\u653eB\uff08\u5047\u8bbe\u64ad\u653e\u961f\u5217\u4e4b\u524d\u4e3a\u7a7a\uff09 >>> tts.play(1, 0, 2, '1111111111111111') #\u4efb\u52a1A 0 >>> tts.play(2, 0, 2, '2222222222222222') #\u4efb\u52a1B 1 #\u6b63\u5728\u64ad\u653e\u4efb\u52a1A\uff0c\u4e14A\u5141\u8bb8\u88ab\u6253\u65ad\uff0c\u6b64\u65f6\u6765\u4e86\u4efb\u52a1B\uff0c\u4e14\u4f18\u5148\u7ea7\u548cA\u4f18\u5148\u7ea7\u4e00\u6837\uff0c\u90a3\u4e48A #\u4f1a\u88ab\u6253\u65ad\uff0c\u76f4\u63a5\u64ad\u653eB >>> tts.play(2, 1, 2, '2222222222222222222') #\u4efb\u52a1A 0 >>> tts.play(2, 0, 2, '3333333333333333333') #\u4efb\u52a1B 0 #\u6b63\u5728\u64ad\u653e\u4efb\u52a1A\uff0c\u4e14A\u4e0d\u5141\u8bb8\u88ab\u6253\u65ad\uff0c\u6b64\u65f6\u6765\u4e86\u4efb\u52a1B\uff0c\u4e14\u4f18\u5148\u7ea7\u548cA\u4f18\u5148\u7ea7\u4e00\u6837\uff0c\u90a3\u4e48#B\u4f1a\u88ab\u52a0\u5165\u64ad\u653e\u961f\u5217\uff0c\u7b49\u5f85A\u64ad\u653e\u5b8c\u6210\u64ad\u653eB\uff08\u5047\u8bbe\u64ad\u653e\u961f\u5217\u4e4b\u524d\u4e3a\u7a7a\uff09 >>> tts.play(2, 0, 2, '2222222222222222222') #\u4efb\u52a1A 0 >>> tts.play(2, 0, 2, '3333333333333333333') #\u4efb\u52a1B 1 #\u6b63\u5728\u64ad\u653eA\uff0c\u4e14A\u4e0d\u5141\u8bb8\u88ab\u6253\u65ad\uff0c\u6b64\u65f6\u6765\u4e86\u4efb\u52a1B\uff0c\u4e14\u4efb\u52a1B\u5141\u8bb8\u88ab\u6253\u65ad\uff0c\u4f18\u5148\u7ea7\u4e0eA\u76f8\u540c\uff0c\u90a3\u4e48\u4efb\u52a1B\u4f1a\u88ab\u52a0\u5165\u5230\u64ad\u653e\u961f\u5217\u4e2d\uff0c\u6b64\u65f6\u53c8\u6765\u4e86\u4e00\u4e2a\u4efb\u52a1C\uff0c\u4e14\u4f18\u5148\u7ea7\u548cA\u3001B\u76f8\u540c\uff0c\u90a3\u4e48C\u4f1a\u88ab\u52a0\u5165\u64ad\u653e\u961f\u5217\u4e2d\uff0c\u4e14\u76f4\u63a5\u8986\u76d6\u7387\u4efb\u52a1B\uff0c\u6240\u4ee5A\u64ad\u653e\u5b8c\u6210\u4e0b\u4e00\u4e2a\u64ad\u653e\u7684\u662fC\uff08\u5047\u8bbe\u64ad\u653e\u961f\u5217\u4e4b\u524d\u4e3a\u7a7a\uff09 >>> tts.play(2, 0, 2, '2222222222222222222') #\u4efb\u52a1A 0 >>> tts.play(2, 1, 2, '3333333333333333333') #\u4efb\u52a1B 1 >>> tts.play(2, 0, 2, '4444444444444444444') #\u4efb\u52a1C 1 tts\u64ad\u653e\u4e2d\u6587\u793a\u4f8b\uff1a \u6ce8\u610f\uff0cpython\u6587\u4ef6\u5f00\u5934\u9700\u8981\u52a0\u4e0a\u201c# - - coding: UTF-8 - -\u201d\uff0c\u5982\u679c\u64ad\u653e\u7684\u4e2d\u6587\u4e2d\u6709\u6807\u70b9\u7b26\u53f7\uff0c\u8981\u7528\u82f1\u6587\u7684\u6807\u70b9\u7b26\u53f7\u3002 # -*- coding: UTF-8 -*- import audio tts = audio.TTS(1) str1 = '\u79fb\u8054\u4e07\u7269,\u5fd7\u9ad8\u884c\u8fdc' #\u8fd9\u91cc\u7684\u9017\u53f7\u662f\u82f1\u6587\u7684\u9017\u53f7 tts.play(4, 0, 2, str1) tts.setCallback(usrFun) \u6ce8\u518c\u7528\u6237\u7684\u56de\u8c03\u51fd\u6570\uff0c\u7528\u4e8e\u901a\u77e5\u7528\u6237TTS\u64ad\u653e\u72b6\u6001\u3002\u6ce8\u610f\uff0c\u8be5\u56de\u8c03\u51fd\u6570\u4e2d\u4e0d\u8981\u8fdb\u884c\u8017\u65f6\u4ee5\u53ca\u963b\u585e\u6027\u7684\u64cd\u4f5c\uff0c\u5efa\u8bae\u53ea\u8fdb\u884c\u7b80\u5355\u3001\u8017\u65f6\u77ed\u7684\u64cd\u4f5c\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e usrFun function \u7528\u6237\u56de\u8c03\u51fd\u6570\uff0c\u51fd\u6570\u5f62\u5f0f\u89c1\u793a\u4f8b \u8fd4\u56de\u503c \u6ce8\u518c\u6210\u529f\u8fd4\u56de\u6574\u578b0\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b-1\u3002 \u793a\u4f8b import audio def tts_cb(event): if event == 2: print('TTS-play start.') elif event == 4: print('TTS-play finish.') tts = audio.TTS(1) tts.setCallback(tts_cb) tts.play(1, 0, 2, 'QuecPython') \u5173\u4e8eTTS\u64ad\u653e\u56de\u8c03\u51fd\u6570\u53c2\u6570event\u7684\u51e0\u79cd\u72b6\u6001\u503c\u8bf4\u660e\uff1a event \u8868\u793a\u72b6\u6001 2 \u5f00\u59cb\u64ad\u653e 3 \u505c\u6b62\u64ad\u653e 4 \u64ad\u653e\u5b8c\u6210 5 \u64ad\u653e\u5931\u8d25 tts.getVolume() \u83b7\u53d6\u5f53\u524d\u64ad\u653e\u97f3\u91cf\u5927\u5c0f\uff0c\u97f3\u91cf\u503c\u4e3a0~9\uff0c0\u8868\u793a\u9759\u97f3\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u6574\u578b\u97f3\u91cf\u5927\u5c0f\u503c\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b-1\u3002 \u793a\u4f8b >>> tts.getVolume() 4 tts.setVolume(vol) \u8bbe\u7f6e\u64ad\u653e\u97f3\u91cf\u5927\u5c0f\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e vol int \u97f3\u91cf\u503c\uff0c\u97f3\u91cf\u503c\u4e3a0~9\uff0c0\u8868\u793a\u9759\u97f3 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u6574\u578b\u97f3\u91cf\u503c\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b-1\u3002 \u793a\u4f8b >>> tts.setVolume(6) 0 tts.getSpeed() \u83b7\u53d6\u5f53\u524d\u64ad\u653e\u901f\u5ea6\uff0c\u901f\u5ea6\u503c\u4e3a0~9\uff0c\u503c\u8d8a\u5927\uff0c\u901f\u5ea6\u8d8a\u5feb\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u5f53\u524d\u64ad\u653e\u901f\u5ea6\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b-1\u3002 \u793a\u4f8b >>> tts.getSpeed() 4 tts.setSpeed(speed) \u8bbe\u7f6eTTS\u64ad\u653e\u901f\u5ea6\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e speed int \u901f\u5ea6\u503c\uff0c\u901f\u5ea6\u503c\u4e3a0~9\uff0c\u503c\u8d8a\u5927\uff0c\u901f\u5ea6\u8d8a\u5feb \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u6574\u578b0\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b-1\u3002 \u793a\u4f8b >>> tts.setSpeed(6) 0 tts.getState() \u83b7\u53d6tts\u72b6\u6001\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c 0 \u2013 \u6574\u578b\u503c\uff0c\u8868\u793a\u5f53\u524d\u65e0tts\u64ad\u653e\uff1b 1 \u2013 \u6574\u578b\u503c\uff0c\u8868\u793a\u5f53\u524d\u6709tts\u6b63\u5728\u64ad\u653e\u3002 \u793a\u4f8b >>> tts1 = audio.TTS(1) >>> tts1.getState() 0 >>> tts1.play(1, 0, 2, '8787878787878787') 0 >>> tts1.getState() #\u5728\u4e0a\u9762tts\u64ad\u653e\u8fc7\u7a0b\u4e2d\u6267\u884c\u8fd9\u53e5 1 tts.stop() \u505c\u6b62TTS\u64ad\u653e\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u6574\u578b0\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b-1\u3002","title":"TTS"},{"location":"QuecPython%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/#audio","text":"\u521b\u5efa\u4e00\u4e2a\u5bf9\u8c61 import audio aud = audio.Audio(device) \u53c2\u6570 device \uff1a\u8bbe\u5907\u7c7b\u578b\uff0c0 - \u8bdd\u7b52\uff0c1 - \u8033\u673a\uff0c2 - \u5587\u53ed\u3002 \u793a\u4f8b >>> import audio >>> aud = audio.Audio(1) aud.play(priority, breakin, filename) \u97f3\u9891\u6587\u4ef6\u64ad\u653e\uff0c\u652f\u6301mp3\u548camr\u6587\u4ef6\u64ad\u653e\u3002\u652f\u6301\u4f18\u5148\u7ea70~4\uff0c\u6570\u5b57\u8d8a\u5927\u4f18\u5148\u7ea7\u8d8a\u9ad8\uff0c\u6bcf\u4e2a\u4f18\u5148\u7ea7\u7ec4\u53ef\u540c\u65f6\u6700\u591a\u52a0\u516510\u4e2a\u64ad\u653e\u4efb\u52a1\uff0c\u4e0eTTS\u64ad\u653e\u5171\u7528\u540c\u4e00\u4e2a\u64ad\u653e\u961f\u5217\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e priority int \u64ad\u653e\u4f18\u5148\u7ea7\uff0c\u652f\u6301\u4f18\u5148\u7ea70~4\uff0c\u6570\u503c\u8d8a\u5927\u4f18\u5148\u7ea7\u8d8a\u9ad8 breakin int \u6253\u65ad\u6a21\u5f0f\uff0c0\u8868\u793a\u4e0d\u5141\u8bb8\u88ab\u6253\u65ad\uff0c1\u8868\u793a\u5141\u8bb8\u88ab\u6253\u65ad filename string \u5f85\u64ad\u653e\u7684\u6587\u4ef6\u540d\u79f0\uff0c\u5305\u542b\u6587\u4ef6\u5b58\u653e\u8def\u5f84 \u8fd4\u56de\u503c \u64ad\u653e\u6210\u529f\u8fd4\u56de\u6574\u578b0\uff1b \u64ad\u653e\u5931\u8d25\u8fd4\u56de\u6574\u578b-1\uff1b \u65e0\u6cd5\u7acb\u5373\u64ad\u653e\uff0c\u52a0\u5165\u64ad\u653e\u961f\u5217\uff0c\u8fd4\u56de\u6574\u578b1\uff1b \u65e0\u6cd5\u7acb\u5373\u64ad\u653e\uff0c\u4e14\u8be5\u8bf7\u6c42\u7684\u4f18\u5148\u7ea7\u7ec4\u961f\u5217\u4efb\u52a1\u5df2\u8fbe\u4e0a\u9650\uff0c\u65e0\u6cd5\u52a0\u5165\u64ad\u653e\u961f\u5217\uff0c\u8fd4\u56de\u6574\u578b-2\u3002 \u793a\u4f8b >>> import audio >>> a = audio.Audio(1) >>> a.play(2, 1, 'U:/music.mp3') #\u6587\u4ef6\u540d\u524d\u9762\u8981\u52a0\u4e0a\u8def\u5f84 0 \u5173\u4e8e\u6587\u4ef6\u64ad\u653e\u8def\u5f84\u7684\u8bf4\u660e\uff1a \u7528\u6237\u5206\u533a\u8def\u5f84\u56fa\u5b9a\u4e3a\u2019U:/\u2018\u5f00\u5934\uff0c\u8868\u793a\u7528\u6237\u5206\u533a\u7684\u6839\u76ee\u5f55\uff0c\u5982\u679c\u7528\u6237\u5728\u6839\u76ee\u5f55\u4e0b\u65b0\u5efaaudio\u76ee\u5f55\uff0c\u5e76\u5c06\u97f3\u9891\u6587\u4ef6\u5b58\u653e\u5728\u6839\u76ee\u5f55\u4e0b\u7684audio\u76ee\u5f55\uff0c\u90a3\u4e48\u64ad\u653e\u63a5\u53e3\u4e2d\uff0c\u4f20\u5165\u7684\u8def\u5f84\u53c2\u6570\u5e94\u8be5\u662f\uff1a'U:/audio/music.mp3'\u3002 \u8bf4\u660e \u7531\u4e8eTTS\u548c\u97f3\u9891\u6587\u4ef6\u64ad\u653e\u5171\u7528\u540c\u4e00\u4e2a\u64ad\u653e\u961f\u5217\uff0c\u6240\u4ee5TTS\u4e2d\u8bbe\u7f6e\u7684\u64ad\u653e\u4f18\u5148\u7ea7\u3001\u6253\u65ad\u6a21\u5f0f\u4e0d\u4ec5\u4ec5\u662f\u548c\u5176\u4ed6TTS\u64ad\u653e\u4efb\u52a1\u6bd4\u8f83\uff0c\u8fd8\u4f1a\u548c\u97f3\u9891\u6587\u4ef6\u64ad\u653e\u4efb\u52a1\u7684\u4f18\u5148\u7ea7\u548c\u6253\u65ad\u6a21\u5f0f\u6bd4\u8f83\uff0c\u53cd\u4e4b\uff0c\u97f3\u9891\u6587\u4ef6\u64ad\u653e\u4e2d\u8bbe\u7f6e\u7684\u64ad\u653e\u4f18\u5148\u7ea7\u4e0e\u6253\u65ad\u6a21\u5f0f\u5bf9TTS\u4efb\u52a1\u540c\u6837\u662f\u6709\u6548\u7684\u3002 aud.stop() \u505c\u6b62\u97f3\u9891\u6587\u4ef6\u64ad\u653e\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u6574\u578b0\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b-1\u3002 aud.setCallback(usrFun) \u6ce8\u518c\u7528\u6237\u7684\u56de\u8c03\u51fd\u6570\uff0c\u7528\u4e8e\u901a\u77e5\u7528\u6237\u97f3\u9891\u6587\u4ef6\u64ad\u653e\u72b6\u6001\u3002\u6ce8\u610f\uff0c\u8be5\u56de\u8c03\u51fd\u6570\u4e2d\u4e0d\u8981\u8fdb\u884c\u8017\u65f6\u4ee5\u53ca\u963b\u585e\u6027\u7684\u64cd\u4f5c\uff0c\u5efa\u8bae\u53ea\u8fdb\u884c\u7b80\u5355\u3001\u8017\u65f6\u77ed\u7684\u64cd\u4f5c\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e usrFun function \u7528\u6237\u56de\u8c03\u51fd\u6570\uff0c\u51fd\u6570\u5f62\u5f0f\u89c1\u793a\u4f8b \u8fd4\u56de\u503c \u6ce8\u518c\u6210\u529f\u8fd4\u56de\u6574\u578b0\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b-1\u3002 \u793a\u4f8b import audio def audio_cb(event): if event == 0: print('audio-play start.') elif event == 7: print('audio-play finish.') aud = audio.Audio(1) aud.setCallback(audio_cb) aud.play(1, 0, 'U:/test.mp3') \u5173\u4e8eaudio\u64ad\u653e\u56de\u8c03\u51fd\u6570\u53c2\u6570event\u7684\u51e0\u79cd\u72b6\u6001\u503c\u8bf4\u660e\uff1a event \u8868\u793a\u72b6\u6001 -1 \u64ad\u653e\u9519\u8bef 0 \u5f00\u59cb\u64ad\u653e 7 \u64ad\u653e\u5b8c\u6210 aud.getState() \u83b7\u53d6audio\u521d\u59cb\u5316\u72b6\u6001\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c audio\u521d\u59cb\u5316\u672a\u5b8c\u6210\u8fd4\u56de\u6574\u578b\u503c-1\uff0c\u521d\u59cb\u5316\u5b8c\u6210\u8fd4\u56de\u6574\u578b\u503c0\u3002 aud.getVolume() \u83b7\u53d6audio\u97f3\u91cf\u5927\u5c0f\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u8fd4\u56de\u6574\u578b\u97f3\u91cf\u503c\u3002 aud.setVolume(vol) \u8bbe\u7f6eaudio\u97f3\u91cf\u5927\u5c0f\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e vol int \u97f3\u91cf\u7b49\u7ea7\uff0c\u8303\u56f4\uff081~11\uff09\uff0c\u6570\u503c\u8d8a\u5927\uff0c\u97f3\u91cf\u8d8a\u5927 \u8fd4\u56de\u503c \u8bbe\u7f6e\u6210\u529f\u8fd4\u56de\u6574\u578b0\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b-1\u3002 \u793a\u4f8b >>> aud.setVolume(6) 0 >>> aud.getVolume() 6","title":"Audio"},{"location":"QuecPython%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/#misc-","text":"\u6a21\u5757\u529f\u80fd\uff1a\u63d0\u4f9b\u5173\u673a\u3001\u8f6f\u4ef6\u91cd\u542f\u3001PWM\u4ee5\u53caADC\u76f8\u5173\u529f\u80fd\u3002","title":"misc - \u5176\u4ed6"},{"location":"QuecPython%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/#power","text":"\u5173\u673a\u4ee5\u53ca\u8f6f\u4ef6\u91cd\u542f\u3002 \u4f7f\u7528\u524d\u5bfc\u5165\u8be5\u7c7b\uff1afrom misc import Power Power.powerDown() \u6a21\u5757\u5173\u673a\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u65e0 Power.powerRestart() \u6a21\u5757\u91cd\u542f\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u65e0 Power. powerOnReason() \u83b7\u53d6\u6a21\u5757\u542f\u52a8\u539f\u56e0\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u8fd4\u56deint\u6570\u503c\uff0c\u89e3\u91ca\u5982\u4e0b\uff1a 1\uff1a\u6b63\u5e38\u7535\u6e90\u5f00\u673a 2\uff1a\u91cd\u542f 3\uff1aVBAT 4\uff1aRTC\u5b9a\u65f6\u5f00\u673a 5\uff1aFault 6\uff1aVBUS 0\uff1a\u672a\u77e5 Power. powerDownReason() \u83b7\u53d6\u6a21\u5757\u4e0a\u6b21\u5173\u673a\u539f\u56e0\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c 1\uff1a\u6b63\u5e38\u7535\u6e90\u5173\u673a 2\uff1a\u7535\u538b\u8fc7\u9ad8 3\uff1a\u7535\u538b\u504f\u4f4e 4\uff1a\u8d85\u6e29 5\uff1aWDT 6\uff1aVRTC \u504f\u4f4e 0\uff1a\u672a\u77e5 Power. getVbatt() \u83b7\u53d6\u7535\u6c60\u7535\u538b\uff0c\u5355\u4f4dmV\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c int\u7c7b\u578b\u7535\u538b\u503c\u3002 \u793a\u4f8b >>> Power.getVbatt() 3590","title":"Power"},{"location":"QuecPython%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/#pwm","text":"\u5e38\u91cf\u8bf4\u660e \u5e38\u91cf \u8bf4\u660e PWM.PWM0 PWM0 PWM.PWM1 PWM1 PWM.PWM2 PWM2 PWM.PWM3 PWM3 PWM.PWM4 PWM4 PWM.PWM5 PWM5 \u521b\u5efa\u4e00\u4e2apwm\u5bf9\u8c61 from misc import PWM pwm = PWM(PWM.PWMn, highTime, cycleTime) \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e PWMn int PWM\u53f7 \u6ce8\uff1aEC100YCN\u5e73\u53f0\uff0c\u652f\u6301PWM0-PWM5\uff0c\u5bf9\u5e94\u5f15\u811a\u5982\u4e0b\uff1a PWM0 \u2013 \u5f15\u811a\u53f719 PWM1 \u2013 \u5f15\u811a\u53f718 PWM2 \u2013 \u5f15\u811a\u53f716 PWM3 \u2013 \u5f15\u811a\u53f717 PWM4 \u2013 \u5f15\u811a\u53f723 PWM5 \u2013 \u5f15\u811a\u53f722 \u6ce8\uff1aEC600SCN\u5e73\u53f0\uff0c\u652f\u6301PWM0-PWM5\uff0c\u5bf9\u5e94\u5f15\u811a\u5982\u4e0b\uff1a PWM0 \u2013 \u5f15\u811a\u53f752 PWM1 \u2013 \u5f15\u811a\u53f753 PWM2 \u2013 \u5f15\u811a\u53f757 PWM3 \u2013 \u5f15\u811a\u53f756 PWM4 \u2013 \u5f15\u811a\u53f770 PWM5 \u2013 \u5f15\u811a\u53f769 highTime int \u9ad8\u7535\u5e73\u65f6\u95f4\uff0c\u5355\u4f4dms cycleTime int pwm\u4e00\u4e2a\u5468\u671f\u65f6\u95f4\uff0c\u5355\u4f4dms \u793a\u4f8b >>> from misc import PWM >>> pwm4 = PWM(PWM.PWM4, 100, 200) pwm.open() \u5f00\u542fPWM\u8f93\u51fa\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u6574\u578b0\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b-1\u3002 pwm.close() \u5173\u95edPWM\u8f93\u51fa\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u6574\u578b0\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b-1\u3002","title":"PWM"},{"location":"QuecPython%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/#adc","text":"\u5e38\u91cf\u8bf4\u660e \u5e38\u91cf \u8bf4\u660e ADC.ADC0 ADC\u901a\u90530 ADC.ADC1 ADC\u901a\u90531 \u521b\u5efa\u4e00\u4e2aADC\u5bf9\u8c61 from misc import ADC adc = ADC() \u793a\u4f8b >>> from misc import ADC >>> adc = ADC() adc.open() ADC\u529f\u80fd\u521d\u59cb\u5316\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u6574\u578b0\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b-1\u3002 adc.read(ADCn) \u8bfb\u53d6\u6307\u5b9a\u901a\u9053\u7684\u7535\u538b\u503c\uff0c\u5355\u4f4dmV\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e ADCn int ADC\u901a\u9053 \u6ce8\uff1aEC100YCN\u5e73\u53f0\u652f\u6301ADC0\uff0cADC1\uff0c\u5bf9\u5e94\u5f15\u811a\u5982\u4e0b ADC0 \u2013 \u5f15\u811a\u53f739 ADC1 \u2013 \u5f15\u811a\u53f781 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u6307\u5b9a\u901a\u9053\u7535\u538b\u503c\uff0c\u9519\u8bef\u8fd4\u56de\u6574\u578b-1\u3002 \u793a\u4f8b >>>adc.read(ADC.ADC0) #\u8bfb\u53d6ADC\u901a\u90530\u7535\u538b\u503c 613 >>>adc.read(ADC.ADC1) #\u8bfb\u53d6ADC\u901a\u90531\u7535\u538b\u503c 605 adc.close() \u5173\u95edADC\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c 0\u5173\u95ed\u6210\u529f\uff0c-1\u5173\u95ed\u5931\u8d25\u3002","title":"ADC"},{"location":"QuecPython%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/#modem-","text":"\u6a21\u5757\u529f\u80fd\uff1a\u8bbe\u5907\u4fe1\u606f\u83b7\u53d6\u3002 modem.getDevImei() \u83b7\u53d6\u8bbe\u5907\u7684IMEI\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56destring\u7c7b\u578b\u8bbe\u5907\u7684IMEI\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\u3002 \u793a\u4f8b >>> import modem >>> modem.getDevImei() '866327040830317' modem.getDevModel() \u83b7\u53d6\u8bbe\u5907\u578b\u53f7\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56destring\u7c7b\u578b\u8bbe\u5907\u578b\u53f7\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\u3002 \u793a\u4f8b >>> modem.getDevModel() 'EC100Y' modem.getDevSN() \u83b7\u53d6\u8bbe\u5907\u5e8f\u5217\u53f7\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56destring\u7c7b\u578b\u8bbe\u5907\u5e8f\u5217\u53f7\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\u3002 \u793a\u4f8b >>> modem.getDevSN() 'D1Q20GM050038341P' modem.getDevFwVersion() \u83b7\u53d6\u8bbe\u5907\u56fa\u4ef6\u7248\u672c\u53f7\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56destring\u7c7b\u578b\u56fa\u4ef6\u7248\u672c\u53f7\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\u3002 \u793a\u4f8b >>> modem.getDevFwVersion() 'EC100YCNAAR01A01M16_OCPU_PY' modem.getDevProductId() \u83b7\u53d6\u8bbe\u5907\u7684\u5236\u9020\u5546ID\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u8bbe\u5907\u5236\u9020\u5546ID\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\u3002 \u793a\u4f8b >>> modem.getDevProductId() 'Quectel'","title":"modem - \u8bbe\u5907\u76f8\u5173"},{"location":"QuecPython%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/#machine-","text":"\u6a21\u5757\u529f\u80fd: \u5305\u542b\u4e0e\u7279\u5b9a\u7535\u8def\u677f\u4e0a\u7684\u786c\u4ef6\u76f8\u5173\u7684\u7279\u5b9a\u529f\u80fd\u3002\u8be5\u6a21\u5757\u4e2d\u7684\u5927\u591a\u6570\u529f\u80fd\u5141\u8bb8\u76f4\u63a5\u548c\u4e0d\u53d7\u9650\u5236\u5730\u8bbf\u95ee\u548c\u63a7\u5236\u7cfb\u7edf\u4e0a\u7684\u786c\u4ef6\u3002","title":"machine - \u786c\u4ef6\u76f8\u5173\u529f\u80fd"},{"location":"QuecPython%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/#pin","text":"\u7c7b\u529f\u80fd\uff1aGPIO\u8bfb\u5199\u64cd\u4f5c\u3002 \u5e38\u91cf\u8bf4\u660e \u5e38\u91cf \u8bf4\u660e Pin.GPIO1\uff08EC600S / EC100Y\uff09 GPIO1 Pin.GPIO2\uff08EC600S / EC100Y\uff09 GPIO2 Pin.GPIO3\uff08EC600S / EC100Y\uff09 GPIO3 Pin.GPIO4\uff08EC600S / EC100Y\uff09 GPIO4 Pin.GPIO5\uff08EC600S / EC100Y\uff09 GPIO5 Pin.GPIO6\uff08EC600S\uff09 GPIO6 Pin.GPIO7\uff08EC600S\uff09 GPIO7 Pin.GPIO8\uff08EC600S\uff09 GPIO8 Pin.GPIO9\uff08EC600S\uff09 GPIO9 Pin.GPIO10\uff08EC600S\uff09 GPIO10 Pin.IN \u8f93\u5165\u6a21\u5f0f Pin.OUT \u8f93\u51fa\u6a21\u5f0f Pin.PULL_DISABLE \u6d6e\u7a7a\u6a21\u5f0f Pin.PULL_PU \u4e0a\u62c9\u6a21\u5f0f Pin.PULL_PD \u4e0b\u62c9\u6a21\u5f0f \u521b\u5efagpio\u5bf9\u8c61 gpio = Pin(GPIOn, direction, pullMode, level) \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e GPIOn int \u5f15\u811a\u53f7 EC100YCN\u5e73\u53f0\u5f15\u811a\u5bf9\u5e94\u5173\u7cfb\u5982\u4e0b\uff1a GPIO1 \u2013 \u5f15\u811a\u53f722 GPIO2 \u2013 \u5f15\u811a\u53f723 GPIO3 \u2013 \u5f15\u811a\u53f7178 GPIO4 \u2013 \u5f15\u811a\u53f7199 GPIO5 \u2013 \u5f15\u811a\u53f7204 EC600SCN\u5e73\u53f0\u5f15\u811a\u5bf9\u5e94\u5173\u7cfb\u5982\u4e0b\uff1a GPIO1 \u2013 \u5f15\u811a\u53f710 GPIO2 \u2013 \u5f15\u811a\u53f711 GPIO3 \u2013 \u5f15\u811a\u53f712 GPIO4 \u2013 \u5f15\u811a\u53f713 GPIO5 \u2013 \u5f15\u811a\u53f714 GPIO6 \u2013 \u5f15\u811a\u53f715 GPIO7 \u2013 \u5f15\u811a\u53f716 GPIO8 \u2013 \u5f15\u811a\u53f739 GPIO9 \u2013 \u5f15\u811a\u53f740 GPIO10 \u2013 \u5f15\u811a\u53f748 direction int IN \u2013 \u8f93\u5165\u6a21\u5f0f\uff0cOUT \u2013 \u8f93\u51fa\u6a21\u5f0f pullMode int PULL_DISABLE \u2013 \u6d6e\u7a7a\u6a21\u5f0f PULL_PU \u2013 \u4e0a\u62c9\u6a21\u5f0f PULL_PD \u2013 \u4e0b\u62c9\u6a21\u5f0f level int 0 - \u8bbe\u7f6e\u5f15\u811a\u4e3a\u4f4e\u7535\u5e73, 1- \u8bbe\u7f6e\u5f15\u811a\u4e3a\u9ad8\u7535\u5e73 \u793a\u4f8b from machine import Pin gpio1 = Pin(Pin.GPIO1, Pin.OUT, Pin.PULL_DISABLE, 0) Pin.read() \u83b7\u53d6PIN\u811a\u7535\u5e73\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c PIN\u811a\u7535\u5e73\uff0c0-\u4f4e\u7535\u5e73\uff0c1-\u9ad8\u7535\u5e73\u3002 Pin.write(value) \u8bbe\u7f6ePIN\u811a\u7535\u5e73\u3002 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e value int 0 - \u5f53PIN\u811a\u4e3a\u8f93\u51fa\u6a21\u5f0f\u65f6\uff0c\u8bbe\u7f6e\u5f53\u524dPIN\u811a\u8f93\u51fa\u4f4e; 1 - \u5f53PIN\u811a\u4e3a\u8f93\u51fa\u6a21\u5f0f\u65f6\uff0c\u8bbe\u7f6e\u5f53\u524dPIN\u811a\u8f93\u51fa\u9ad8 \u8fd4\u56de\u503c \u8bbe\u7f6e\u6210\u529f\u8fd4\u56de\u6574\u578b\u503c0\uff0c\u8bbe\u7f6e\u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\u3002 \u793a\u4f8b >>> from machine import Pin >>> gpio1 = Pin(Pin.GPIO1, Pin.OUT, Pin.PULL_DISABLE, 0) >>> gpio1.write(1) 0 >>> gpio1.read() 1","title":"Pin"},{"location":"QuecPython%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/#uart","text":"\u7c7b\u529f\u80fd\uff1auart\u4e32\u53e3\u6570\u636e\u4f20\u8f93\u3002 \u5e38\u91cf\u8bf4\u660e \u5e38\u91cf \u8bf4\u660e UART.UART0 UART0 UART.UART1 UART1 UART.UART2 UART2 UART.UART3 UART3 \u521b\u5efauart\u5bf9\u8c61 uart = UART(UART.UARTn, buadrate, databits, parity, stopbits, flowctl) \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e UARTn int \u7aef\u53e3\u53f7 EC100YCN\u5e73\u53f0\u4e0eEC600SCN\u5e73\u53f0,UARTn\u4f5c\u7528\u5982\u4e0b\uff1a UART0 - DEBUG PORT UART1 \u2013 BT PORT UART2 \u2013 MAIN PORT UART3 \u2013 USB CDC PORT buadrate int \u6ce2\u7279\u7387\uff0c\u5e38\u7528\u6ce2\u7279\u7387\u90fd\u652f\u6301\uff0c\u59824800\u30019600\u300119200\u300138400\u300157600\u3001115200\u3001230400\u7b49 databits int \u6570\u636e\u4f4d\uff085~8\uff09 parity int \u5947\u5076\u6821\u9a8c\uff080 \u2013 NONE\uff0c1 \u2013 EVEN\uff0c2 - ODD\uff09 stopbits int \u505c\u6b62\u4f4d\uff081~2\uff09 flowctl int \u786c\u4ef6\u63a7\u5236\u6d41\uff080 \u2013 FC_NONE\uff0c 1 \u2013 FC_HW\uff09 \u793a\u4f8b >>> from machine import UART >>> uart1 = UART(UART.UART1, 115200, 8, 0, 1, 0) uart.any() \u8fd4\u56de\u63a5\u6536\u7f13\u5b58\u5668\u4e2d\u6709\u591a\u5c11\u5b57\u8282\u7684\u6570\u636e\u672a\u8bfb\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u8fd4\u56de\u63a5\u6536\u7f13\u5b58\u5668\u4e2d\u6709\u591a\u5c11\u5b57\u8282\u7684\u6570\u636e\u672a\u8bfb\u3002 \u793a\u4f8b >>> uart.any() 20 #\u8868\u793a\u63a5\u6536\u7f13\u51b2\u533a\u4e2d\u670920\u5b57\u8282\u6570\u636e\u672a\u8bfb uart.read(nbytes) \u4ece\u4e32\u53e3\u8bfb\u53d6\u6570\u636e\u3002 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e nbytes int \u8981\u8bfb\u53d6\u7684\u5b57\u8282\u6570 \u8fd4\u56de\u503c \u8fd4\u56de\u8bfb\u53d6\u7684\u6570\u636e\u3002 uart.write(data) \u53d1\u9001\u6570\u636e\u5230\u4e32\u53e3\u3002 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e data string \u53d1\u9001\u7684\u6570\u636e \u8fd4\u56de\u503c \u8fd4\u56de\u53d1\u9001\u7684\u5b57\u8282\u6570\u3002 uart.close() \u5173\u95ed\u4e32\u53e3\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u6574\u578b0\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b-1\u3002 UART\u4f7f\u7528\u793a\u4f8b >>> from machine import UART >>> uart1 = UART(UART.UART1, 115200, 8, 0, 1, 0) #\u4e32\u53e31 >>> uart1.any() 10 >>> uart1.read(5) b\u201912345\u2019 >>> uart1.any() 5","title":"UART"},{"location":"QuecPython%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/#timer","text":"\u7c7b\u529f\u80fd\uff1a\u786c\u4ef6\u5b9a\u65f6\u5668\u3002 \u5e38\u91cf\u8bf4\u660e \u5e38\u91cf \u8bf4\u660e Timer.Timer0 \u5b9a\u65f6\u56680 Timer.Timer1 \u5b9a\u65f6\u56681 Timer.Timer2 \u5b9a\u65f6\u56682 Timer.Timer3 \u5b9a\u65f6\u56683 Timer.ONE_SHOT \u5355\u6b21\u6a21\u5f0f\uff0c\u5b9a\u65f6\u5668\u53ea\u6267\u884c\u4e00\u6b21 Timer.PERIODIC \u5468\u671f\u6a21\u5f0f\uff0c\u5b9a\u65f6\u5668\u5faa\u73af\u6267\u884c \u521b\u5efaTimer\u5bf9\u8c61 timer = Timer(Timern) \u521b\u5efaTimer\u5bf9\u8c61\u3002 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e Timern int \u5b9a\u65f6\u5668\u53f7 EC100YCN\u652f\u6301\u5b9a\u65f6\u5668Timer0~Timer3 \u793a\u4f8b >>> from machine import Timer >>> timer1 = Timer(Timer.Timer1) timer.start(period, mode, callback) \u542f\u52a8\u5b9a\u65f6\u5668\u3002 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e period int \u4e2d\u65ad\u5468\u671f\uff0c\u5355\u4f4d\u6beb\u79d2 mode int \u8fd0\u884c\u6a21\u5f0f Timer.ONE_SHOT \u5355\u6b21\u6a21\u5f0f\uff0c\u5b9a\u65f6\u5668\u53ea\u6267\u884c\u4e00\u6b21 Timer.PERIODIC \u5468\u671f\u6a21\u5f0f\uff0c\u5faa\u73af\u6267\u884c callback function \u5b9a\u65f6\u5668\u6267\u884c\u51fd\u6570 \u8fd4\u56de\u503c \u542f\u52a8\u6210\u529f\u8fd4\u56de\u6574\u578b\u503c0\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\u3002 \u793a\u4f8b >>> def fun(args): print(\u201c###timer callback function###\u201d) >>> timer.start(period=1000, mode=timer.PERIODIC, callback=fun) 0 ###timer callback function### ###timer callback function### ###timer callback function### \u2026\u2026 timer.stop() \u5173\u95ed\u5b9a\u65f6\u5668\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u6574\u578b\u503c0\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\u3002 Timer\u4f7f\u7528\u793a\u4f8b from machine import Timer timer1 = Timer(Timer.Timer1) #\u5b9a\u65f6\u56681 def run(t): print(\"run count\") timer1.start(period=1000, mode=timer1.PERIODIC, callback=run) while 1: pass","title":"Timer"},{"location":"QuecPython%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/#extint","text":"\u7c7b\u529f\u80fd\uff1a\u7528\u4e8e\u914d\u7f6eI/O\u5f15\u811a\u5728\u53d1\u751f\u5916\u90e8\u4e8b\u4ef6\u65f6\u4e2d\u65ad\u3002 \u5e38\u91cf\u8bf4\u660e \u5e38\u91cf \u8bf4\u660e ExtInt.GPIO1\uff08EC600S / EC100Y\uff09 GPIO1 ExtInt.GPIO2\uff08EC600S / EC100Y\uff09 GPIO2 ExtInt.GPIO3\uff08EC600S / EC100Y\uff09 GPIO3 ExtInt.GPIO4\uff08EC600S / EC100Y\uff09 GPIO4 ExtInt.GPIO5\uff08EC600S / EC100Y\uff09 GPIO5 ExtInt.GPIO6\uff08EC600S\uff09 GPIO6 ExtInt.GPIO7\uff08EC600S\uff09 GPIO7 ExtInt.GPIO8\uff08EC600S\uff09 GPIO8 ExtInt.GPIO9\uff08EC600S\uff09 GPIO9 ExtInt.GPIO10\uff08EC600S\uff09 GPIO10 ExtInt.IRQ_RISING \u4e0a\u5347\u6cbf\u89e6\u53d1 ExtInt.IRQ_FALLING \u4e0b\u964d\u6cbf\u89e6\u53d1 ExtInt.IRQ_RISING_FALLING \u4e0a\u5347\u548c\u4e0b\u964d\u6cbf\u89e6\u53d1 ExtInt.PULL_DISABLE \u6d6e\u7a7a\u6a21\u5f0f ExtInt.PULL_PU \u4e0a\u62c9\u6a21\u5f0f ExtInt.PULL_PD \u4e0b\u62c9\u6a21\u5f0f \u521b\u5efaExtInt\u5bf9\u8c61 extint = ExtInt(GPIOn, mode, pull, callback) \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e GPIOn int \u5f15\u811a\u53f7 EC100YCN\u5e73\u53f0\u5f15\u811a\u5bf9\u5e94\u5173\u7cfb\u5982\u4e0b\uff1a GPIO1 \u2013 \u5f15\u811a\u53f722 GPIO2 \u2013 \u5f15\u811a\u53f723 GPIO3 \u2013 \u5f15\u811a\u53f7178 GPIO4 \u2013 \u5f15\u811a\u53f7199 GPIO5 \u2013 \u5f15\u811a\u53f7204 EC600SCN\u5e73\u53f0\u5f15\u811a\u5bf9\u5e94\u5173\u7cfb\u5982\u4e0b\uff1a GPIO1 \u2013 \u5f15\u811a\u53f710 GPIO2 \u2013 \u5f15\u811a\u53f711 GPIO3 \u2013 \u5f15\u811a\u53f712 GPIO4 \u2013 \u5f15\u811a\u53f713 GPIO5 \u2013 \u5f15\u811a\u53f714 GPIO6 \u2013 \u5f15\u811a\u53f715 GPIO7 \u2013 \u5f15\u811a\u53f716 GPIO8 \u2013 \u5f15\u811a\u53f739 GPIO9 \u2013 \u5f15\u811a\u53f740 GPIO10 \u2013 \u5f15\u811a\u53f748 mode int \u8bbe\u7f6e\u89e6\u53d1\u65b9\u5f0f IRQ_RISING \u2013 \u4e0a\u5347\u6cbf\u89e6\u53d1 IRQ_FALLING \u2013 \u4e0b\u964d\u6cbf\u89e6\u53d1 IRQ_RISING_FALLING \u2013 \u4e0a\u5347\u548c\u4e0b\u964d\u6cbf\u89e6\u53d1 pull int PULL_DISABLE \u2013 \u6d6e\u7a7a\u6a21\u5f0f PULL_PU \u2013 \u4e0a\u62c9\u6a21\u5f0f PULL_PD \u2013 \u4e0b\u62c9\u6a21\u5f0f callback function \u4e2d\u65ad\u89e6\u53d1\u56de\u8c03\u51fd\u6570 \u793a\u4f8b >>> from machine import ExtInt >>> def fun(args): print(\u201c###interrupt %d ###\u201d %args) >>> extint = ExtInt(ExtInt.GPIO1, ExtInt.IRQ_FALLING, ExtInt.PULL_PU, fun) extint.enable() \u4f7f\u80fdextint\u5bf9\u8c61\u5916\u90e8\u4e2d\u65ad\uff0c\u5f53\u4e2d\u65ad\u5f15\u811a\u6536\u5230\u4e0a\u5347\u6cbf\u6216\u8005\u4e0b\u964d\u6cbf\u4fe1\u53f7\u65f6\uff0c\u4f1a\u8c03\u7528callback\u6267\u884c \u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u4f7f\u80fd\u6210\u529f\u8fd4\u56de\u6574\u578b\u503c0\uff0c\u4f7f\u80fd\u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\u3002 extint.disable() \u7981\u7528\u4e0eextint\u5bf9\u8c61\u5173\u8054\u7684\u4e2d\u65ad \u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u4f7f\u80fd\u6210\u529f\u8fd4\u56de\u6574\u578b\u503c0\uff0c\u4f7f\u80fd\u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\u3002 extint.line() \u8fd4\u56de\u5f15\u811a\u6620\u5c04\u7684\u884c\u53f7\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u5f15\u811a\u6620\u5c04\u7684\u884c\u53f7\u3002 \u793a\u4f8b >>> extint = ExtInt(ExtInt.GPIO1, ExtInt.IRQ_FALLING, ExtInt.PULL_PU, fun) >>> ext.line() 32","title":"ExtInt"},{"location":"QuecPython%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/#rtc","text":"\u7c7b\u529f\u80fd\uff1a\u63d0\u4f9b\u83b7\u53d6\u8bbe\u7f6ertc\u65f6\u95f4\u65b9\u6cd5\u3002 \u521b\u5efaRTC\u5bf9\u8c61 from machine import RTC rtc = RTC() rtc.datetime([year, month, day, week, hour, minute, second, microsecond]) \u8bbe\u7f6e\u548c\u83b7\u53d6RTC\u65f6\u95f4\uff0c\u4e0d\u5e26\u53c2\u6570\u65f6\uff0c\u5219\u7528\u4e8e\u83b7\u53d6\u65f6\u95f4\uff0c\u5e26\u53c2\u6570\u5219\u662f\u8bbe\u7f6e\u65f6\u95f4\uff1b\u8bbe\u7f6e\u65f6\u95f4\u7684\u65f6\u5019\uff0c\u53c2\u6570week\u4e0d\u53c2\u4e8e\u8bbe\u7f6e\uff0cmicrosecond\u53c2\u6570\u4fdd\u7559\uff0c\u6682\u672a\u4f7f\u7528\uff0c\u9ed8\u8ba4\u662f0\u3002 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e year int \u5e74 month int \u6708 day int \u65e5 week int \u661f\u671f\uff0c\u8bbe\u7f6e\u65f6\u95f4\u65f6\uff0c\u8be5\u53c2\u6570\u4e0d\u8d77\u4f5c\u7528\uff0c\u4fdd\u7559\uff1b\u83b7\u53d6\u65f6\u95f4\u65f6\u8be5\u53c2\u6570\u6709\u6548 hour int \u65f6 minute int \u5206 second int \u79d2 microsecond int \u5fae\u79d2\uff0c\u4fdd\u7559\u53c2\u6570\uff0c\u6682\u672a\u4f7f\u7528\uff0c\u8bbe\u7f6e\u65f6\u95f4\u65f6\u8be5\u53c2\u6570\u51990\u5373\u53ef \u8fd4\u56de\u503c \u83b7\u53d6\u65f6\u95f4\u65f6\uff0c\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4\uff0c\u5305\u542b\u65e5\u671f\u65f6\u95f4\uff0c\u683c\u5f0f\u5982\u4e0b\uff1a [year, month, day, week, hour, minute, second, microsecond] \u8bbe\u7f6e\u65f6\u95f4\u65f6\uff0c\u8bbe\u7f6e\u6210\u529f\u8fd4\u56de\u6574\u578b\u503c0\uff0c\u8bbe\u7f6e\u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1 \u3002 \u793a\u4f8b >>> from machine import RTC >>> rtc = RTC() >>> rtc.datetime() (2020, 9, 11, 5, 15, 43, 23, 0) >>> rtc.datetime([2020, 3, 12, 1, 12, 12, 12, 0]) 0 >>> rtc.datetime() (2020, 3, 12, 4, 12, 12, 14, 0)","title":"RTC"},{"location":"QuecPython%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/#i2c","text":"\u7c7b\u529f\u80fd\uff1a\u7528\u4e8e\u8bbe\u5907\u4e4b\u95f4\u901a\u4fe1\u7684\u53cc\u7ebf\u534f\u8bae\u3002 \u5e38\u91cf\u8bf4\u660e \u5e38\u91cf I2C.I2C0 i2c \u901a\u8def\u7d22\u5f15\u53f7: 0 I2C.I2C1 i2c \u901a\u8def\u7d22\u5f15\u53f7: 1 I2C.STANDARD_MODE \u6807\u51c6\u6a21\u5f0f I2C.FAST_MODE \u5feb\u901f\u6a21\u5f0f \u521b\u5efaI2C\u5bf9\u8c61 from machine import I2C i2c_obj = I2C(I2Cn, MODE) \u53c2\u6570\u8bf4\u660e \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e I2Cn int i2c \u901a\u8def\u7d22\u5f15\u53f7: I2C.I2C0 : 0 \uff08EC100Y\uff09 I2C.I2C0 : 1 \uff08EC600S\uff09 MODE int i2c \u7684\u5de5\u4f5c\u6a21\u5f0f: I2C.STANDARD_MODE : 0 \u6807\u51c6\u6a21\u5f0f I2C.FAST_MODE \uff1a 1 \u5feb\u901f\u6a21\u5f0f \u793a\u4f8b from machine import I2C i2c_obj = I2C(I2C.I2C0, I2C.STANDARD_MODE) # \u8fd4\u56dei2c\u5bf9\u8c61 I2C.read(slaveaddress, addr,addr_len, r_data, datalen, delay) \u4ece I2C \u603b\u7ebf\u4e2d\u8bfb\u53d6\u6570\u636e\u3002 \u53c2\u6570\u8bf4\u660e \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e slaveaddress 16\u8fdb\u5236 i2c \u8bbe\u5907\u5730\u5740 addr 16\u8fdb\u5236 i2c \u5bc4\u5b58\u5668\u5730\u5740 addr_len int \u5bc4\u5b58\u5668\u5730\u5740\u957f\u5ea6 r_data bytearray \u63a5\u6536\u6570\u636e\u7684\u5b57\u8282\u6570\u7ec4 datalen int \u5b57\u8282\u6570\u7ec4\u7684\u957f\u5ea6 delay int \u5ef6\u65f6\uff0c\u6570\u636e\u8f6c\u6362\u7f13\u51b2\u65f6\u95f4\uff08\u5355\u4f4dms\uff09 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u6574\u578b\u503c0\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\u3002 I2C.write(slaveaddress, addr, addr_len, data, datalen) \u4ece I2C \u603b\u7ebf\u4e2d\u5199\u5165\u6570\u636e\u3002 \u53c2\u6570\u8bf4\u660e \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e slaveaddress 16\u8fdb\u5236 i2c \u8bbe\u5907\u5730\u5740 addr 16\u8fdb\u5236 i2c \u5bc4\u5b58\u5668\u5730\u5740 addr_len int \u5bc4\u5b58\u5668\u5730\u5740\u957f\u5ea6 data bytearray \u5199\u5165\u7684\u6570\u636e datalen int \u5199\u5165\u6570\u636e\u7684\u957f\u5ea6 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u6574\u578b\u503c0\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\u3002 \u4f7f\u7528\u793a\u4f8b \u9700\u8981\u8fde\u63a5\u8bbe\u5907\u4f7f\u7528\uff01 from machine import I2C I2C_SLAVE_ADDR = 0x1B # i2c \u8bbe\u5907\u5730\u5740 WHO_AM_I= bytearray({0x02, 0}) # i2c \u5bc4\u5b58\u5668\u5730\u5740\uff0c\u4ee5buff\u7684\u65b9\u5f0f\u4f20\u5165\uff0c\u53d6\u7b2c\u4e00\u4e2a\u503c\uff0c\u8ba1\u7b97\u4e00\u4e2a\u503c\u7684\u957f\u5ea6 data = bytearray({0x12, 0}) # \u8f93\u5165\u5bf9\u5e94\u6307\u4ee4 i2c_obj = I2C(I2C.I2C0, I2C.STANDARD_MODE) # \u8fd4\u56dei2c\u5bf9\u8c61 i2c_obj.write(I2C_SLAVE_ADDR, WHO_AM_I, 1, data, 2) # \u5199\u5165data r_data = bytearray(2) # \u521b\u5efa\u957f\u5ea6\u4e3a2\u7684\u5b57\u8282\u6570\u7ec4\u63a5\u6536 i2c_obj.read(I2C_SLAVE_ADDR, WHO_AM_I, 1, r_data, 2, 0) # read i2c_log.info(r_data[0]) i2c_log.info(r_data[1])","title":"I2C"},{"location":"QuecPython%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/#wdt","text":"\u6a21\u5757\u529f\u80fd\uff1aAPP\u5e94\u7528\u7a0b\u5e8f\u53d1\u751f\u5f02\u5e38\u4e0d\u6267\u884c\u65f6\u8fdb\u884c\u7cfb\u7edf\u91cd\u542f\u64cd\u4f5c \u200b wdt = WDT(period) \u521b\u5efa\u8f6f\u72d7\u5bf9\u8c61\u3002 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e period int \u8bbe\u7f6e\u8f6f\u72d7\u68c0\u6d4b\u65f6\u95f4\uff0c\u5355\u4f4d(s\uff09 \u8fd4\u56de\u503c \u8fd4\u56de\u8f6f\u72d7\u5bf9\u8c61 \u200b wdt.feed() \u5582\u72d7 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u65e0 \u200b wdt.stop() \u5173\u95ed\u8f6f\u72d7\u529f\u80fd \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u65e0 \u4f7f\u7528\u793a\u4f8b from machine import WDT from machine import Timer timer1 = Timer(Timer.Timer1) def feed(t): wdt.feed() if __name__ == '__main__': wdt = WDT(20) # \u542f\u52a8\u770b\u95e8\u72d7\uff0c\u95f4\u9694\u65f6\u957f timer1.start(period=15000, mode=timer1.PERIODIC, callback=feed) # \u4f7f\u7528\u5b9a\u65f6\u5668\u5582\u72d7 # wdt.stop()","title":"WDT"},{"location":"QuecPython%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/#pm-","text":"\u6a21\u5757\u529f\u80fd\uff1a\u5728\u65e0\u4e1a\u52a1\u5904\u7406\u65f6\u4f7f\u7cfb\u7edf\u8fdb\u5165\u4f11\u7720\u72b6\u6001\uff0c\u8fdb\u5165\u4f4e\u529f\u8017\u6a21\u5f0f\u3002 \u200b lpm_fd = pm.create_wakelock(lock_name, name_size) \u521b\u5efawake_lock\u9501 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e lock_name string \u81ea\u5b9a\u4e49lock\u540d name_size int lock_name\u7684\u957f\u5ea6 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56dewakelock\u7684\u6807\u8bc6\u53f7\uff0c\u5426\u5219\u8fd4\u56de-1\u3002 \u200b pm.delete_wakelock(lpm_fd) \u5220\u9664wake_lock\u9501 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e lpm_fd int \u9700\u8981\u5220\u9664\u7684\u9501\u5bf9\u5e94\u6807\u8bc6id \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de0\u3002 \u200b pm.wakelock_lock(lpm_fd) \u52a0\u9501 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e lpm_fd int \u9700\u8981\u6267\u884c\u52a0\u9501\u64cd\u4f5c\u7684wakelock\u6807\u8bc6id \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de0\uff0c\u5426\u5219\u8fd4\u56de-1\u3002 \u200b pm.wakelock_unlock(lpm_fd) \u91ca\u653e\u9501 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e lpm_fd int \u9700\u8981\u6267\u884c\u91ca\u653e\u9501\u64cd\u4f5c\u7684wakelock\u6807\u8bc6id \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de0\uff0c\u5426\u5219\u8fd4\u56de-1\u3002 \u200b pm.autosleep(sleep_flag) \u81ea\u52a8\u4f11\u7720\u6a21\u5f0f\u63a7\u5236 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e sleep_flag int 0\uff0c\u5173\u95ed\u81ea\u52a8\u4f11\u7720\uff1b1\u5f00\u542f\u81ea\u52a8\u4f11\u7720 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de0\u3002 \u200b pm.get_wakelock_num() \u83b7\u53d6\u5df2\u521b\u5efa\u7684\u9501\u6570\u91cf \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u8fd4\u56de\u5df2\u521b\u5efawakelock\u9501\u7684\u6570\u91cf\u3002 \u4f7f\u7528\u793a\u4f8b \u6a21\u62df\u6d4b\u8bd5\uff0c\u5b9e\u9645\u5f00\u53d1\u8bf7\u6839\u636e\u4e1a\u52a1\u573a\u666f\u9009\u62e9\u4f7f\u7528\uff01 import pm import utime # \u521b\u5efawakelock\u9501 lpm_fd = pm.create_wakelock(\"test_lock\", len(\"test_lock\")) # \u8bbe\u7f6e\u81ea\u52a8\u4f11\u7720\u6a21\u5f0f pm.autosleep(1) # \u6a21\u62df\u6d4b\u8bd5\uff0c\u5b9e\u9645\u5f00\u53d1\u8bf7\u6839\u636e\u4e1a\u52a1\u573a\u666f\u9009\u62e9\u4f7f\u7528 while 1: utime.sleep(20) # \u4f11\u7720 res = pm.wakelock_lock(lpm_fd) print(\"ql_lpm_idlelock_lock, g_c1_axi_fd = %d\" %lpm_fd) print(\"unlock sleep\") utime.sleep(20) res = pm.wakelock_unlock(lpm_fd) print(res) print(\"ql_lpm_idlelock_unlock, g_c1_axi_fd = %d\" % lpm_fd) num = pm.get_wakelock_num() # \u83b7\u53d6\u5df2\u521b\u5efa\u9501\u7684\u6570\u91cf print(num)","title":"pm - \u4f4e\u529f\u8017"},{"location":"QuecPython%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/#ure-","text":"\u6a21\u5757\u529f\u80fd\uff1a\u63d0\u4f9b\u901a\u8fc7\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u6570\u636e\uff08ps\uff1a\u6b64re\u6a21\u5757\u76ee\u524d\u652f\u6301\u7684\u64cd\u4f5c\u7b26\u8f83\u5c11\uff0c\u90e8\u5206\u64cd\u4f5c\u7b26\u6682\u4e0d\u652f\u6301\uff09 \u652f\u6301\u64cd\u4f5c\u7b26\uff1a \u5b57\u7b26 \u8bf4\u660e \u2018.\u2019 \u5339\u914d\u4efb\u610f\u5b57\u7b26 \u2018[]\u2019 \u5339\u914d\u5b57\u7b26\u96c6\u5408\uff0c\u652f\u6301\u5355\u4e2a\u5b57\u7b26\u548c\u4e00\u4e2a\u8303\u56f4\uff0c\u5305\u62ec\u8d1f\u96c6 \u2018^\u2019 \u5339\u914d\u5b57\u7b26\u4e32\u7684\u5f00\u5934\u3002 \u2018$\u2019 \u5339\u914d\u5b57\u7b26\u4e32\u7684\u7ed3\u5c3e\u3002 \u2018?\u2019 \u5339\u914d\u96f6\u4e2a\u6216\u524d\u9762\u7684\u5b50\u6a21\u5f0f\u4e4b\u4e00\u3002 \u2018*\u2019 \u5339\u914d\u96f6\u4e2a\u6216\u591a\u4e2a\u5148\u524d\u7684\u5b50\u6a21\u5f0f\u3002 \u2018+\u2019 \u5339\u914d\u4e00\u4e2a\u6216\u591a\u4e2a\u5148\u524d\u7684\u5b50\u6a21\u5f0f\u3002 \u2018??\u2019 \u975e\u8d2a\u5a6a\u7248\u672c\u7684 ? \uff0c\u5339\u914d0\u62161 \u2018*?\u2019 \u975e\u8d2a\u5a6a\u7248\u672c\u7684*\uff0c\u5339\u914d\u96f6\u4e2a\u6216\u591a\u4e2a \u2018+?\u2019 \u975e\u8d2a\u5a6a\u7248\u672c\u7684+\uff0c\u5339\u914d\u4e00\u4e2a\u6216\u591a\u4e2a \u2018|\u2019 \u5339\u914d\u8be5\u64cd\u4f5c\u7b26\u7684\u5de6\u4fa7\u5b50\u6a21\u5f0f\u6216\u53f3\u4fa7\u5b50\u6a21\u5f0f\u3002 \u2018\\d\u2019 \u6570\u5b57\u5339\u914d \u2018\\D\u2019 \u975e\u6570\u5b57\u5339\u914d '\\s' \u5339\u914d\u7a7a\u683c '\\S' \u5339\u914d\u975e\u7a7a\u683c \u2018\\w\u2019 \u5339\u914d\u201d\u5355\u8bcd\u5b57\u7b26\u201d (\u4ec5\u9650ASCII) \u2018\\W\u2019 \u5339\u914d\u975e\u201c\u5355\u8bcd\u5b57\u7b26\u201d\uff08\u4ec5\u9650ASCII\uff09 \u4e0d\u652f\u6301\uff1a \u91cd\u590d\u6b21\u6570 ( {m,n} ) \u547d\u540d\u7ec4 ( (?P<name>...) ) \u975e\u6355\u83b7\u7ec4( (?:...) ) \u66f4\u9ad8\u7ea7\u7684\u65ad\u8a00( \\b , \\B ) \u7279\u6b8a\u5b57\u7b26\u8f6c\u4e49\uff0c\u5982 \\r , \\n - \u6539\u7528Python\u81ea\u5df1\u7684\u8f6c\u4e49\u3002 \u200b ure.compile(regex) compile \u51fd\u6570\u7528\u4e8e\u7f16\u8bd1\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u751f\u6210\u4e00\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\uff08 Pattern \uff09\u5bf9\u8c61\uff0c\u4f9b match() \u548c search() \u8fd9\u4e24\u4e2a\u51fd\u6570\u4f7f\u7528\u3002 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e regex string \u6b63\u5219\u8868\u8fbe\u5f0f \u8fd4\u56de\u503c \u8fd4\u56de regex \u5bf9\u8c61 \u200b ure.match(regex, string) \u5c06\u6b63\u5219\u8868\u8fbe\u5f0f\u5bf9\u8c61 \u4e0e string \u5339\u914d\uff0c\u5339\u914d\u901a\u5e38\u4ece\u5b57\u7b26\u4e32\u7684\u8d77\u59cb\u4f4d\u7f6e\u8fdb\u884c \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e regex string \u6b63\u5219\u8868\u8fbe\u5f0f string string \u9700\u8981\u5339\u914d\u7684\u5b57\u7b26\u4e32\u6570\u636e \u8fd4\u56de\u503c \u5339\u914d\u6210\u529f\u8fd4\u56de\u4e00\u4e2a\u5339\u914d\u7684\u5bf9\u8c61\uff0c\u5426\u5219\u8fd4\u56deNone\u3002 \u200b ure.search(regex, string) re.search \u626b\u63cf\u6574\u4e2a\u5b57\u7b26\u4e32\u5e76\u8fd4\u56de\u7b2c\u4e00\u4e2a\u6210\u529f\u7684\u5339\u914d\u3002 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e regex string \u6b63\u5219\u8868\u8fbe\u5f0f string string \u9700\u8981\u5339\u914d\u7684\u5b57\u7b26\u4e32\u6570\u636e \u8fd4\u56de\u503c \u5339\u914d\u6210\u529f\u8fd4\u56de\u4e00\u4e2a\u5339\u914d\u7684\u5bf9\u8c61\uff0c\u5426\u5219\u8fd4\u56deNone\u3002 Match \u5bf9\u8c61 \u5339\u914d\u7531 match() \u548c serach \u65b9\u6cd5\u8fd4\u56de\u7684\u5bf9\u8c61 \u200b match.group(index) \u5339\u914d\u7684\u6574\u4e2a\u8868\u8fbe\u5f0f\u7684\u5b57\u7b26\u4e32 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e index int \u6b63\u5219\u8868\u8fbe\u5f0f\u4e2d\uff0cgroup()\u7528\u6765\u63d0\u51fa\u5206\u7ec4\u622a\u83b7\u7684\u5b57\u7b26\u4e32, index=0\u8fd4\u56de\u6574\u4f53\uff0c\u6839\u636e\u7f16\u5199\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u8fdb\u884c\u83b7\u53d6\uff0c\u5f53\u5206\u7ec4\u4e0d\u5b58\u5728\u65f6\u4f1a\u629b\u51fa\u5f02\u5e38 \u8fd4\u56de\u503c \u8fd4\u56de\u5339\u914d\u7684\u6574\u4e2a\u8868\u8fbe\u5f0f\u7684\u5b57\u7b26\u4e32 \u200b match.groups() \u5339\u914d\u7684\u6574\u4e2a\u8868\u8fbe\u5f0f\u7684\u5b57\u7b26\u4e32 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u8be5\u5339\u914d\u7ec4\u7684\u6240\u6709\u5b50\u5b57\u7b26\u4e32\u7684\u5143\u7ec4\u3002 \u200b match.start(index) \u8fd4\u56de\u5339\u914d\u7684\u5b50\u5b57\u7b26\u4e32\u7ec4\u7684\u8d77\u59cb\u539f\u59cb\u5b57\u7b26\u4e32\u4e2d\u7684\u7d22\u5f15\u3002 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e index int index \u9ed8\u8ba4\u4e3a\u6574\u4e2a\u7ec4\uff0c\u5426\u5219\u5c06\u9009\u62e9\u4e00\u4e2a\u7ec4 \u8fd4\u56de\u503c \u8fd4\u56de\u5339\u914d\u7684\u5b50\u5b57\u7b26\u4e32\u7ec4\u7684\u8d77\u59cb\u539f\u59cb\u5b57\u7b26\u4e32\u4e2d\u7684\u7d22\u5f15\u3002 \u200b match.end(index) \u8fd4\u56de\u5339\u914d\u7684\u5b50\u5b57\u7b26\u4e32\u7ec4\u7684\u7ed3\u675f\u539f\u59cb\u5b57\u7b26\u4e32\u4e2d\u7684\u7d22\u5f15\u3002 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e index int index \u9ed8\u8ba4\u4e3a\u6574\u4e2a\u7ec4\uff0c\u5426\u5219\u5c06\u9009\u62e9\u4e00\u4e2a\u7ec4 \u8fd4\u56de\u503c \u8fd4\u56de\u5339\u914d\u7684\u5b50\u5b57\u7b26\u4e32\u7ec4\u7684\u7ed3\u675f\u539f\u59cb\u5b57\u7b26\u4e32\u4e2d\u7684\u7d22\u5f15\u3002 \u4f7f\u7528\u793a\u4f8b import ure res = ''' $GNRMC,133648.00,A,3149.2969,N,11706.9027,E,0.055,,311020,,,A,V*18 $GNGGA,133648.00,3149.2969,N,11706.9027,E,1,24,1.03,88.9,M,,M,,*6C $GNGLL,3149.2969,N,11706.9027,E,133648.00,A,A*7A $GNGSA,A,3,31,26,11,194,27,195,08,09,03,193,04,16,1.41,1.03,0.97,1*31 ''' r = ure.search(\"GNGGA(.+?)M\", res) print(r.group(0))","title":"ure - \u6b63\u5219"},{"location":"QuecPython%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/#_5","text":"","title":"\u7b2c\u4e09\u65b9\u5e93"},{"location":"QuecPython%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/#aliyun-","text":"\u6a21\u5757\u529f\u80fd\uff1a\u963f\u91cc\u4e91\u7269\u8054\u7f51\u5957\u4ef6\u5ba2\u6237\u7aef\u529f\u80fd,\u76ee\u524d\u7684\u4ea7\u54c1\u8282\u70b9\u7c7b\u578b\u4ec5\u652f\u6301\u201c\u8bbe\u5907\u201d\uff0c\u8bbe\u5907\u8ba4\u8bc1\u65b9\u5f0f\u652f\u6301\u201c\u4e00\u673a\u4e00\u5bc6\u548c\u201c\u4e00\u578b\u4e00\u5bc6\u201d\u3002 aLiYun(productKey, productSecret, DeviceName, DeviceSecret) \u914d\u7f6e\u963f\u91cc\u4e91\u7269\u8054\u7f51\u5957\u4ef6\u7684\u4ea7\u54c1\u4fe1\u606f\u548c\u8bbe\u5907\u4fe1\u606f\u3002 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e productKey string \u4ea7\u54c1\u6807\u8bc6 productSecret string \u53ef\u9009\u53c2\u6570\uff0c\u9ed8\u8ba4\u4e3aNone\uff0cproductSecret\uff0c\u4ea7\u54c1\u5bc6\u94a5 \u4e00\u673a\u4e00\u5bc6\u8ba4\u8bc1\u65b9\u6848\u65f6\uff0c\u6b64\u53c2\u6570\u4f20\u5165None \u4e00\u578b\u4e00\u5bc6\u8ba4\u8bc1\u65b9\u6848\u65f6\uff0c\u6b64\u53c2\u6570\u4f20\u5165\u771f\u5b9e\u7684\u4ea7\u54c1\u5bc6\u94a5 DeviceName string \u8bbe\u5907\u540d\u79f0 DeviceSecret string \u53ef\u9009\u53c2\u6570,\u9ed8\u8ba4\u4e3aNon\uff0c\u8bbe\u5907\u5bc6\u94a5\uff08\u4e00\u578b\u4e00\u5bc6\u8ba4\u8bc1\u65b9\u6848\u65f6\u6b64\u53c2\u6570\u4f20\u5165None\uff09 \u8fd4\u56de\u503c \u8fd4\u56deaLiYun\u8fde\u63a5\u5bf9\u8c61\u3002 aLiYun.setMqtt(clientID, clean_session, keepAlive) \u8bbe\u7f6eMQTT\u6570\u636e\u901a\u9053\u7684\u53c2\u6570 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e clientID string \u81ea\u5b9a\u4e49\u963f\u91cc\u4e91\u8fde\u63a5id clean_session bool \u53ef\u9009\u53c2\u6570\uff0c\u4e00\u4e2a\u51b3\u5b9a\u5ba2\u6237\u7aef\u7c7b\u578b\u7684\u5e03\u5c14\u503c\u3002 \u5982\u679c\u4e3aTrue\uff0c\u90a3\u4e48\u4ee3\u7406\u5c06\u5728\u5176\u65ad\u5f00\u8fde\u63a5\u65f6\u5220\u9664\u6709\u5173\u6b64\u5ba2\u6237\u7aef\u7684\u6240\u6709\u4fe1\u606f\u3002 \u5982\u679c\u4e3aFalse\uff0c\u5219\u5ba2\u6237\u7aef\u662f\u6301\u4e45\u5ba2\u6237\u7aef\uff0c\u5f53\u5ba2\u6237\u7aef\u65ad\u5f00\u8fde\u63a5\u65f6\uff0c\u8ba2\u9605\u4fe1\u606f\u548c\u6392\u961f\u6d88\u606f\u5c06\u88ab\u4fdd\u7559\u3002\u9ed8\u8ba4\u4e3aFalse keepAlive int \u901a\u4fe1\u4e4b\u95f4\u5141\u8bb8\u7684\u6700\u957f\u65f6\u95f4\u6bb5\uff08\u4ee5\u79d2\u4e3a\u5355\u4f4d\uff09,\u9ed8\u8ba4\u4e3a300\uff0c\u8303\u56f4\uff0860-1200\uff09 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u6574\u578b\u503c0\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\u3002 aLiYun.setCallback(sub_cb) \u6ce8\u518c\u56de\u8c03\u51fd\u6570\u3002 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e sub_cb function \u56de\u8c03\u51fd\u6570 \u8fd4\u56de\u503c \u65e0 aLiYun.subscribe(topic,qos) \u8ba2\u9605mqtt\u4e3b\u9898\u3002 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e topic string topic qos int MQTT\u6d88\u606f\u670d\u52a1\u8d28\u91cf\uff08\u9ed8\u8ba40\uff0c\u53ef\u9009\u62e90\u62161\uff090\uff1a\u53d1\u9001\u8005\u53ea\u53d1\u9001\u4e00\u6b21\u6d88\u606f\uff0c\u4e0d\u8fdb\u884c\u91cd\u8bd5 1\uff1a\u53d1\u9001\u8005\u6700\u5c11\u53d1\u9001\u4e00\u6b21\u6d88\u606f\uff0c\u786e\u4fdd\u6d88\u606f\u5230\u8fbeBroker \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u6574\u578b\u503c0\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\u3002 aLiYun.publish(topic,msg, qos=0) \u53d1\u5e03\u6d88\u606f\u3002 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e topic string topic msg string \u9700\u8981\u53d1\u9001\u7684\u6570\u636e qos int MQTT\u6d88\u606f\u670d\u52a1\u8d28\u91cf\uff08\u9ed8\u8ba40\uff0c\u53ef\u9009\u62e90\u62161\uff090\uff1a\u53d1\u9001\u8005\u53ea\u53d1\u9001\u4e00\u6b21\u6d88\u606f\uff0c\u4e0d\u8fdb\u884c\u91cd\u8bd5 1\uff1a\u53d1\u9001\u8005\u6700\u5c11\u53d1\u9001\u4e00\u6b21\u6d88\u606f\uff0c\u786e\u4fdd\u6d88\u606f\u5230\u8fbeBroker \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u6574\u578b\u503c0\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\u3002 aLiYun.start() \u8fd0\u884c\u8fde\u63a5\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u65e0 \u4f7f\u7528\u793a\u4f8b from aLiYun import aLiYun productKey = \"\" # \u4ea7\u54c1\u6807\u8bc6 productSecret = None # \u4ea7\u54c1\u5bc6\u94a5\uff08\u4e00\u673a\u4e00\u5bc6\u8ba4\u8bc1\u6b64\u53c2\u6570\u4f20\u5165None\uff09 DeviceName = \"\" # \u8bbe\u5907\u540d\u79f0 DeviceSecret = None # \u8bbe\u5907\u5bc6\u94a5\uff08\u4e00\u578b\u4e00\u5bc6\u8ba4\u8bc1\u6b64\u53c2\u6570\u4f20\u5165None\uff09 # \u521b\u5efaaliyun\u8fde\u63a5\u5bf9\u8c61 ali = aLiYun(productKey, productSecret, DeviceName, DeviceSecret) # \u8bbe\u7f6emqtt\u8fde\u63a5\u5c5e\u6027 clientID = \"mqttText\" # \u81ea\u5b9a\u4e49\u5b57\u7b26\uff08\u4e0d\u8d85\u8fc764\uff09 ali.setMqtt(clientID, clean_session=False, keepAlive=300) # \u56de\u8c03\u51fd\u6570 def sub_cb(topic, msg): print(\"subscribe recv:\") print(topic, msg) # \u8bbe\u7f6e\u56de\u8c03\u51fd\u6570 ali.setCallback(sub_cb) topic = \"\" # \u4e3b\u9898 # \u8ba2\u9605\u4e3b\u9898 ali.subscribe(topic) # \u53d1\u5e03\u6d88\u606f ali.publish(topic, \"hello world\") # \u8fd0\u884c ali.start()","title":"aLiYun - \u963f\u91cc\u4e91\u670d\u52a1"},{"location":"QuecPython%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/#tencentyun-","text":"\u6a21\u5757\u529f\u80fd\uff1a\u817e\u8baf\u4e91\u7269\u8054\u7f51\u5957\u4ef6\u5ba2\u6237\u7aef\u529f\u80fd,\u76ee\u524d\u7684\u4ea7\u54c1\u8282\u70b9\u7c7b\u578b\u4ec5\u652f\u6301\u201c\u8bbe\u5907\u201d\uff0c\u8bbe\u5907\u8ba4\u8bc1\u65b9\u5f0f\u652f\u6301\u201c\u4e00\u673a\u4e00\u5bc6\u548c\u201c\u52a8\u6001\u6ce8\u518c\u8ba4\u8bc1\u201d\u3002 TXyun(productID, devicename, devicePsk, ProductSecret) \u914d\u7f6e\u963f\u91cc\u4e91\u7269\u8054\u7f51\u5957\u4ef6\u7684\u4ea7\u54c1\u4fe1\u606f\u548c\u8bbe\u5907\u4fe1\u606f\u3002 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e productID string \u4ea7\u54c1\u6807\u8bc6\uff08\u552f\u4e00ID\uff09 ProductSecret string \u53ef\u9009\u53c2\u6570\uff0c\u9ed8\u8ba4\u4e3aNone\uff0cproductSecret\uff0c\u4ea7\u54c1\u5bc6\u94a5 \u4e00\u673a\u4e00\u5bc6\u8ba4\u8bc1\u65b9\u6848\u65f6\uff0c\u6b64\u53c2\u6570\u4f20\u5165None \u4e00\u578b\u4e00\u5bc6\u8ba4\u8bc1\u65b9\u6848\u65f6\uff0c\u6b64\u53c2\u6570\u4f20\u5165\u771f\u5b9e\u7684\u4ea7\u54c1\u5bc6\u94a5 devicename string \u8bbe\u5907\u540d\u79f0 devicePsk string \u53ef\u9009\u53c2\u6570,\u9ed8\u8ba4\u4e3aNon\uff0c\u8bbe\u5907\u5bc6\u94a5\uff08\u4e00\u578b\u4e00\u5bc6\u8ba4\u8bc1\u65b9\u6848\u65f6\u6b64\u53c2\u6570\u4f20\u5165None\uff09 \u8fd4\u56de\u503c \u8fd4\u56deTXyun\u8fde\u63a5\u5bf9\u8c61\u3002 TXyun.setMqtt(clean_session, keepAlive) \u8bbe\u7f6eMQTT\u6570\u636e\u901a\u9053\u7684\u53c2\u6570 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e clean_session bool \u53ef\u9009\u53c2\u6570\uff0c\u4e00\u4e2a\u51b3\u5b9a\u5ba2\u6237\u7aef\u7c7b\u578b\u7684\u5e03\u5c14\u503c\u3002 \u5982\u679c\u4e3aTrue\uff0c\u90a3\u4e48\u4ee3\u7406\u5c06\u5728\u5176\u65ad\u5f00\u8fde\u63a5\u65f6\u5220\u9664\u6709\u5173\u6b64\u5ba2\u6237\u7aef\u7684\u6240\u6709\u4fe1\u606f\u3002 \u5982\u679c\u4e3aFalse\uff0c\u5219\u5ba2\u6237\u7aef\u662f\u6301\u4e45\u5ba2\u6237\u7aef\uff0c\u5f53\u5ba2\u6237\u7aef\u65ad\u5f00\u8fde\u63a5\u65f6\uff0c\u8ba2\u9605\u4fe1\u606f\u548c\u6392\u961f\u6d88\u606f\u5c06\u88ab\u4fdd\u7559\u3002\u9ed8\u8ba4\u4e3aFalse keepAlive int \u901a\u4fe1\u4e4b\u95f4\u5141\u8bb8\u7684\u6700\u957f\u65f6\u95f4\u6bb5\uff08\u4ee5\u79d2\u4e3a\u5355\u4f4d\uff09,\u9ed8\u8ba4\u4e3a300\uff0c\u8303\u56f4\uff0860-1000\uff09\uff0c\u5efa\u8bae300\u4ee5\u4e0a \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u6574\u578b\u503c0\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\u3002 TXyun.setCallback(sub_cb) \u6ce8\u518c\u56de\u8c03\u51fd\u6570\u3002 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e sub_cb function \u8bbe\u7f6e\u6d88\u606f\u56de\u8c03\u51fd\u6570\uff0c\u5f53\u670d\u52a1\u7aef\u54cd\u5e94\u65f6\u89e6\u53d1\u8be5\u65b9\u6cd5 \u8fd4\u56de\u503c \u65e0 TXyun.subscribe(topic,qos) \u8ba2\u9605mqtt\u4e3b\u9898\u3002 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e topic string topic qos int MQTT\u6d88\u606f\u670d\u52a1\u8d28\u91cf\uff08\u9ed8\u8ba40\uff0c\u53ef\u9009\u62e90\u62161\uff09MQTT\u6d88\u606f\u670d\u52a1\u8d28\u91cf\uff08\u9ed8\u8ba40\uff0c\u53ef\u9009\u62e90\u62161\uff090\uff1a\u53d1\u9001\u8005\u53ea\u53d1\u9001\u4e00\u6b21\u6d88\u606f\uff0c\u4e0d\u8fdb\u884c\u91cd\u8bd5 1\uff1a\u53d1\u9001\u8005\u6700\u5c11\u53d1\u9001\u4e00\u6b21\u6d88\u606f\uff0c\u786e\u4fdd\u6d88\u606f\u5230\u8fbeBroker \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u6574\u578b\u503c0\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\u3002 TXyun.publish(topic,msg, qos=0) \u53d1\u5e03\u6d88\u606f\u3002 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e topic string topic msg string \u9700\u8981\u53d1\u9001\u7684\u6570\u636e qos int MQTT\u6d88\u606f\u670d\u52a1\u8d28\u91cf\uff08\u9ed8\u8ba40\uff0c\u53ef\u9009\u62e90\u62161\uff09MQTT\u6d88\u606f\u670d\u52a1\u8d28\u91cf\uff08\u9ed8\u8ba40\uff0c\u53ef\u9009\u62e90\u62161\uff090\uff1a\u53d1\u9001\u8005\u53ea\u53d1\u9001\u4e00\u6b21\u6d88\u606f\uff0c\u4e0d\u8fdb\u884c\u91cd\u8bd5 1\uff1a\u53d1\u9001\u8005\u6700\u5c11\u53d1\u9001\u4e00\u6b21\u6d88\u606f\uff0c\u786e\u4fdd\u6d88\u606f\u5230\u8fbeBroker \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u6574\u578b\u503c0\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\u3002 TXyun.start() \u8fd0\u884c\u8fde\u63a5\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u65e0 \u4f7f\u7528\u793a\u4f8b from TenCentYun import TXyun productID = \"\" # \u4ea7\u54c1\u6807\u8bc6 devicename = \"\" # \u8bbe\u5907\u540d\u79f0 devicePsk = \"\" # \u8bbe\u5907\u5bc6\u94a5\uff08\u4e00\u578b\u4e00\u5bc6\u8ba4\u8bc1\u6b64\u53c2\u6570\u4f20\u5165None\uff09 ProductSecret = None # \u4ea7\u54c1\u5bc6\u94a5\uff08\u4e00\u673a\u4e00\u5bc6\u8ba4\u8bc1\u6b64\u53c2\u6570\u4f20\u5165None\uff09 tenxun = TXyun(productID, devicename, devicePsk, ProductSecret) # \u521b\u5efa\u8fde\u63a5\u5bf9\u8c61 def sub_cb(topic, msg): # \u4e91\u7aef\u6d88\u606f\u54cd\u5e94\u56de\u8c03\u51fd\u6570 print(\"subscribe recv:\") print(topic, msg) tenxun.setMqtt() tenxun.setCallback(sub_cb) topic = \"\" # \u8f93\u5165\u81ea\u5b9a\u4e49\u7684Topic tenxun.subscribe(topic) tenxun.publish(topic, \"hello world\") tenxun.start()","title":"TenCentYun- \u817e\u8baf\u4e91\u670d\u52a1"},{"location":"QuecPython%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/#request-http","text":"\u6a21\u5757\u529f\u80fd\uff1aHTTP\u5ba2\u6237\u7aef\u7684\u76f8\u5173\u529f\u80fd\u51fd\u6570\u3002 request.get(url, data, headers) \u53d1\u9001GET\u8bf7\u6c42\u3002 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e url string \u7f51\u5740 data json \uff08\u53ef\u9009\u53c2\u6570\uff09\u9644\u52a0\u5230\u8bf7\u6c42\u7684\u6b63\u6587\uff0cjson\u7c7b\u578b\uff0c\u9ed8\u8ba4\u4e3aNone headers dict \uff08\u53ef\u9009\u53c2\u6570\uff09\u8bf7\u6c42\u5934\uff0c\u9ed8\u8ba4\u4e3aNone \u793a\u4f8b import request url = \"http://httpbin.org/get\" response = request.get(url) request.post(url, data, headers) \u53d1\u9001POST\u8bf7\u6c42\u3002 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e url string \u7f51\u5740 data json \uff08\u53ef\u9009\u53c2\u6570\uff09\u9644\u52a0\u5230\u8bf7\u6c42\u7684\u6b63\u6587\uff0cjson\u7c7b\u578b\uff0c\u9ed8\u8ba4\u4e3aNone headers dict \uff08\u53ef\u9009\u53c2\u6570\uff09\u8bf7\u6c42\u5934\uff0c\u9ed8\u8ba4\u4e3aNone \u793a\u4f8b import request url = \"http://httpbin.org/post\" response = request.post(url) request.put(url, data, headers) \u53d1\u9001PUT\u8bf7\u6c42\u3002 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e url string \u7f51\u5740 data json \uff08\u53ef\u9009\u53c2\u6570\uff09\u9644\u52a0\u5230\u8bf7\u6c42\u7684\u6b63\u6587\uff0cjson\u7c7b\u578b\uff0c\u9ed8\u8ba4\u4e3aNone headers dict \uff08\u53ef\u9009\u53c2\u6570\uff09\u8bf7\u6c42\u5934\uff0c\u9ed8\u8ba4\u4e3aNone \u793a\u4f8b import request url = \"http://httpbin.org/put\" response = request.put(url) request.head(url, data, headers) \u53d1\u9001HEAD\u8bf7\u6c42\u3002 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e url string \u7f51\u5740 data json \uff08\u53ef\u9009\u53c2\u6570\uff09\u9644\u52a0\u5230\u8bf7\u6c42\u7684\u6b63\u6587\uff0cjson\u7c7b\u578b\uff0c\u9ed8\u8ba4\u4e3aNone headers dict \uff08\u53ef\u9009\u53c2\u6570\uff09\u8bf7\u6c42\u5934\uff0c\u9ed8\u8ba4\u4e3aNone \u793a\u4f8b import request url = \"http://httpbin.org/head\" response = request.head(url) request.patch(url, data, headers) \u53d1\u9001PATCH\u8bf7\u6c42\u3002 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e url string \u7f51\u5740 data json \uff08\u53ef\u9009\u53c2\u6570\uff09\u9644\u52a0\u5230\u8bf7\u6c42\u7684\u6b63\u6587\uff0cjson\u7c7b\u578b\uff0c\u9ed8\u8ba4\u4e3aNone headers dict \uff08\u53ef\u9009\u53c2\u6570\uff09\u8bf7\u6c42\u5934\uff0c\u9ed8\u8ba4\u4e3aNone \u793a\u4f8b import request url = \"http://httpbin.org/patch\" response = request.patch(url) request.delete(url, data, headers) \u53d1\u9001DELETE\u8bf7\u6c42\u3002 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e url string \u7f51\u5740 data json \uff08\u53ef\u9009\u53c2\u6570\uff09\u9644\u52a0\u5230\u8bf7\u6c42\u7684\u6b63\u6587\uff0cjson\u7c7b\u578b\uff0c\u9ed8\u8ba4\u4e3aNone headers dict \uff08\u53ef\u9009\u53c2\u6570\uff09\u8bf7\u6c42\u5934\uff0c\u9ed8\u8ba4\u4e3aNone \u793a\u4f8b import request url = \"http://httpbin.org/delete\" response = request.delete(url) Response\u7c7b\u65b9\u6cd5\u8bf4\u660e response =request.get(url) \u65b9\u6cd5 \u8bf4\u660e response.content \u8fd4\u56de\u54cd\u5e94\u7684\u5185\u5bb9\uff0c\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d response.text \u4ee5\u6587\u672c\u65b9\u5f0f\u8fd4\u56de\u54cd\u5e94\u7684\u5185\u5bb9\uff0c\u7f16\u7801\u4e3aunicode response.json() \u8fd4\u56de\u54cd\u5e94\u7684json\u7f16\u7801\u5185\u5bb9\u5e76\u8f6c\u4e3adict\u7c7b\u578b response.close() \u5173\u95edsocket request\u4f7f\u7528\u793a\u4f8b import request import ujson url = \"http://httpbin.org/post\" data = {\"key1\": \"value1\", \"key2\": \"value2\", \"key3\": \"value3\"} # POST\u8bf7\u6c42 response = request.post(url, data=ujson.dumps(data)) print(response.text)","title":"request - HTTP"},{"location":"QuecPython%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/#log-","text":"\u6a21\u5757\u529f\u80fd\uff1a\u7cfb\u7edf\u65e5\u5fd7\u8bb0\u5f55,\u5206\u7ea7\u522b\u65e5\u5fd7\u5de5\u5177\u3002 log.basicConfig(level) \u8bbe\u7f6e\u65e5\u8bb0\u8f93\u51fa\u7ea7\u522b, \u8bbe\u7f6e\u65e5\u5fd7\u8f93\u51fa\u7ea7\u522b, \u9ed8\u8ba4\u4e3alog.INFO\uff0c\u7cfb\u7edf\u53ea\u4f1a\u8f93\u51fa level \u6570\u503c\u5927\u4e8e\u6216\u7b49\u4e8e\u8be5 level \u7684\u7684\u65e5\u5fd7\u7ed3\u679c\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u8bf4\u660e CRITICAL \u5e38\u91cf \u65e5\u5fd7\u8bb0\u5f55\u7ea7\u522b\u7684\u6570\u503c 50 ERROR \u5e38\u91cf \u65e5\u5fd7\u8bb0\u5f55\u7ea7\u522b\u7684\u6570\u503c 40 WARNING \u5e38\u91cf \u65e5\u5fd7\u8bb0\u5f55\u7ea7\u522b\u7684\u6570\u503c 30 INFO \u5e38\u91cf \u65e5\u5fd7\u8bb0\u5f55\u7ea7\u522b\u7684\u6570\u503c 20 DEBUG \u5e38\u91cf \u65e5\u5fd7\u8bb0\u5f55\u7ea7\u522b\u7684\u6570\u503c 10 NOTSET \u5e38\u91cf \u65e5\u5fd7\u8bb0\u5f55\u7ea7\u522b\u7684\u6570\u503c 0 \u793a\u4f8b import log log.basicConfig(level=log.INFO) log.getLogger(name) \u83b7\u53d6logger\u5bf9\u8c61\uff0c\u5982\u679c\u4e0d\u6307\u5b9aname\u5219\u8fd4\u56deroot\u5bf9\u8c61\uff0c\u591a\u6b21\u4f7f\u7528\u76f8\u540c\u7684name\u8c03\u7528getLogger\u65b9\u6cd5\u8fd4\u56de\u540c\u4e00\u4e2alogger\u5bf9\u8c61\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u8bf4\u660e name string \u65e5\u5fd7\u4e3b\u9898 \u8fd4\u56de\u503c log\u5bf9\u8c61\u3002 \u793a\u4f8b import log Testlog = log.getLogger (\u201cTestLog\u201d) log.debug(tag, msg) \u8f93\u51fadebug\u7ea7\u522b\u7684\u65e5\u5fd7\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u8bf4\u660e tag string \u6a21\u5757\u6216\u529f\u80fd\u540d\u79f0\uff0c\u4f5c\u4e3a\u65e5\u5fd7\u524d\u7f00 msg string \u53ef\u53d8\u53c2\u6570\uff0c\u65e5\u5fd7\u5185\u5bb9 \u8fd4\u56de\u503c \u65e0 \u793a\u4f8b import log Testlog = log.getLogger (\u201cTestLog\u201d) Testlog.debug(\"Test message: %d(%s)\", 100, \"foobar\") log.info(tag,msg) \u8f93\u51fainfo\u7ea7\u522b\u7684\u65e5\u5fd7\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u8bf4\u660e tag string \u6a21\u5757\u6216\u529f\u80fd\u540d\u79f0\uff0c\u4f5c\u4e3a\u65e5\u5fd7\u524d\u7f00 msg string \u53ef\u53d8\u53c2\u6570\uff0c\u65e5\u5fd7\u5185\u5bb9 \u8fd4\u56de\u503c \u65e0 \u793a\u4f8b import log Testlog = log.getLogger (\u201cTestLog\u201d) Testlog.info(\"Test message: %d(%s)\", 100, \"foobar\") log.warning(tag,msg) \u8f93\u51fawarning\u7ea7\u522b\u7684\u65e5\u5fd7\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u8bf4\u660e tag string \u6a21\u5757\u6216\u529f\u80fd\u540d\u79f0\uff0c\u4f5c\u4e3a\u65e5\u5fd7\u524d\u7f00 msg string \u53ef\u53d8\u53c2\u6570\uff0c\u65e5\u5fd7\u5185\u5bb9 \u8fd4\u56de\u503c \u65e0 \u793a\u4f8b import log Testlog = log.getLogger (\u201cTestLog\u201d) Testlog.warning(\"Test message: %d(%s)\", 100, \"foobar\") log.error(tag,msg) \u8f93\u51faerror\u7ea7\u522b\u7684\u65e5\u5fd7\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u8bf4\u660e tag string \u6a21\u5757\u6216\u529f\u80fd\u540d\u79f0\uff0c\u4f5c\u4e3a\u65e5\u5fd7\u524d\u7f00 msg string \u53ef\u53d8\u53c2\u6570\uff0c\u65e5\u5fd7\u5185\u5bb9 \u8fd4\u56de\u503c \u65e0 \u793a\u4f8b import log Testlog = log.getLogger (\u201cTestLog\u201d) Testlog.error(\"Test message: %d(%s)\", 100, \"foobar\") log.critical(tag,msg) \u8f93\u51facritical\u7ea7\u522b\u7684\u65e5\u5fd7\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u8bf4\u660e tag string \u6a21\u5757\u6216\u529f\u80fd\u540d\u79f0\uff0c\u4f5c\u4e3a\u65e5\u5fd7\u524d\u7f00 msg string \u53ef\u53d8\u53c2\u6570\uff0c\u65e5\u5fd7\u5185\u5bb9 \u8fd4\u56de\u503c \u65e0 \u793a\u4f8b import log Testlog = log.getLogger (\u201cTestLog\u201d) Testlog.critical(\"Test message: %d(%s)\", 100, \"foobar\") log\u4f7f\u7528\u793a\u4f8b import log log.basicConfig(level=log.INFO) # \u8bbe\u7f6e\u65e5\u5fd7\u8f93\u51fa\u7ea7\u522b # \u83b7\u53d6logger\u5bf9\u8c61\uff0c\u5982\u679c\u4e0d\u6307\u5b9aname\u5219\u8fd4\u56deroot\u5bf9\u8c61\uff0c\u591a\u6b21\u4f7f\u7528\u76f8\u540c\u7684name\u8c03\u7528getLogger\u65b9\u6cd5\u8fd4\u56de\u540c\u4e00\u4e2alogger\u5bf9\u8c61 log_obj = log.getLogger(\"test\") log_obj.debug(\"Test message: %d(%s)\", 100, \"foobar\") log_obj.info(\"Test message2: %d(%s)\", 100, \"foobar\") log_obj.warning(\"Test message3: %d(%s)\") log_obj.error(\"Test message4\") log_obj.critical(\"Test message5\")","title":"log - \u65e5\u5fd7"},{"location":"QuecPython%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/#umqtt-mqtt","text":"\u6a21\u5757\u529f\u80fd:\u63d0\u4f9b\u521b\u5efaMQTT\u5ba2\u6237\u7aef\u53d1\u5e03\u8ba2\u9605\u529f\u80fd\u3002 QoS\u7ea7\u522b\u8bf4\u660e \u5728MQTT\u534f\u8bae\u4e2d\uff0c\u5b9a\u4e49\u4e86\u4e09\u4e2a\u7ea7\u522b\u7684QoS\uff0c\u5206\u522b\u662f\uff1a QoS0 \u2013 \u6700\u591a\u4e00\u6b21\uff0c\u662f\u6700\u4f4e\u7ea7\u522b\uff1b\u53d1\u9001\u8005\u53d1\u9001\u5b8c\u6d88\u606f\u4e4b\u540e\uff0c\u5e76\u4e0d\u5173\u5fc3\u6d88\u606f\u662f\u5426\u5df2\u7ecf\u5230\u8fbe\u63a5\u6536\u65b9\uff1b QoS1 \u2013 \u81f3\u5c11\u4e00\u6b21\uff0c\u662f\u4e2d\u95f4\u7ea7\u522b\uff1b\u53d1\u9001\u8005\u4fdd\u8bc1\u6d88\u606f\u81f3\u5c11\u9001\u8fbe\u5230\u63a5\u6536\u65b9\u4e00\u6b21\uff1b QoS2 \u2013 \u6709\u4e14\u4ec5\u6709\u4e00\u6b21\uff0c\u662f\u6700\u9ad8\u7ea7\u522b\uff1b\u4fdd\u8bc1\u6d88\u606f\u9001\u8fbe\u4e14\u4ec5\u9001\u8fbe\u4e00\u6b21\u3002 MQTTClient(client_id, server, port=0, user=None, password=None, keepalive=0, ssl=False, ssl_params={}) \u6784\u5efamqtt\u8fde\u63a5\u5bf9\u8c61\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u8bf4\u660e client_id string \u5ba2\u6237\u7aef ID\uff0c\u5177\u6709\u552f\u4e00\u6027 server string \u670d\u52a1\u7aef\u5730\u5740\uff0c\u53ef\u4ee5\u662f IP \u6216\u8005\u57df\u540d port int \u670d\u52a1\u5668\u7aef\u53e3\uff08\u53ef\u9009\uff09\u3002 \u9ed8\u8ba4\u4e3a1883\uff0c\u8bf7\u6ce8\u610f\uff0cMQTT over SSL/TLS\u7684\u9ed8\u8ba4\u7aef\u53e3\u662f8883 user string \uff08\u53ef\u9009) \u5728\u670d\u52a1\u5668\u4e0a\u6ce8\u518c\u7684\u7528\u6237\u540d password string \uff08\u53ef\u9009) \u5728\u670d\u52a1\u5668\u4e0a\u6ce8\u518c\u7684\u5bc6\u7801 keepalive int \uff08\u53ef\u9009\uff09\u5ba2\u6237\u7aef\u7684keepalive\u8d85\u65f6\u503c\u3002 \u9ed8\u8ba4\u4e3a60\u79d2\uff0c\u8303\u56f4\uff0860~1200\uff09s ssl bool \uff08\u53ef\u9009\uff09\u662f\u5426\u4f7f\u80fd SSL/TLS \u652f\u6301 ssl_params string \uff08\u53ef\u9009\uff09SSL/TLS \u53c2\u6570 \u8fd4\u56de\u503c mqtt\u5bf9\u8c61\u3002 MQTTClient.set_callback(callback) \u8bbe\u7f6e\u56de\u8c03\u51fd\u6570\uff0c\u6536\u5230\u6d88\u606f\u65f6\u4f1a\u88ab\u8c03\u7528\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u8bf4\u660e callback function \u6d88\u606f\u56de\u8c03\u51fd\u6570 \u8fd4\u56de\u503c \u65e0 MQTTClient.set_last_will(topic,msg,retain=False,qos=0) \u8bbe\u7f6e\u8981\u53d1\u9001\u7ed9\u670d\u52a1\u5668\u7684\u9057\u5631\uff0c\u5ba2\u6237\u7aef\u6ca1\u6709\u8c03\u7528disconnect()\u5f02\u5e38\u65ad\u5f00\uff0c\u5219\u53d1\u9001\u901a\u77e5\u5230\u5ba2\u6237\u7aef\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u8bf4\u660e topic string \u9057\u5631\u4e3b\u9898 msg string \u9057\u5631\u7684\u5185\u5bb9 retain bool retain = True boker\u4f1a\u4e00\u76f4\u4fdd\u7559\u6d88\u606f\uff0c\u9ed8\u8ba4False qos int \u6d88\u606f\u670d\u52a1\u8d28\u91cf(0~2) \u8fd4\u56de\u503c \u65e0 MQTTClient.connect(clean_session=True) \u4e0e\u670d\u52a1\u5668\u5efa\u7acb\u8fde\u63a5\uff0c\u8fde\u63a5\u5931\u8d25\u4f1a\u5bfc\u81f4MQTTException\u5f02\u5e38\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u8bf4\u660e clean_session bool \u53ef\u9009\u53c2\u6570\uff0c\u4e00\u4e2a\u51b3\u5b9a\u5ba2\u6237\u7aef\u7c7b\u578b\u7684\u5e03\u5c14\u503c\u3002 \u5982\u679c\u4e3aTrue\uff0c\u90a3\u4e48\u4ee3\u7406\u5c06\u5728\u5176\u65ad\u5f00\u8fde\u63a5\u65f6\u5220\u9664\u6709\u5173\u6b64\u5ba2\u6237\u7aef\u7684\u6240\u6709\u4fe1\u606f\u3002 \u5982\u679c\u4e3aFalse\uff0c\u5219\u5ba2\u6237\u7aef\u662f\u6301\u4e45\u5ba2\u6237\u7aef\uff0c\u5f53\u5ba2\u6237\u7aef\u65ad\u5f00\u8fde\u63a5\u65f6\uff0c\u8ba2\u9605\u4fe1\u606f\u548c\u6392\u961f\u6d88\u606f\u5c06\u88ab\u4fdd\u7559\u3002\u9ed8\u8ba4\u4e3aFalse \u8fd4\u56de\u503c \u65e0 MQTTClient.disconnect() \u4e0e\u670d\u52a1\u5668\u65ad\u5f00\u8fde\u63a5\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u65e0 MQTTClient.ping() \u5f53keepalive\u4e0d\u4e3a0\u4e14\u5728\u65f6\u9650\u5185\u6ca1\u6709\u901a\u8baf\u6d3b\u52a8\uff0c\u4f1a\u4e3b\u52a8\u5411\u670d\u52a1\u5668\u53d1\u9001ping\u5305,\u68c0\u6d4b\u4fdd\u6301\u8fde\u901a\u6027\uff0ckeepalive\u4e3a0\u5219\u4e0d\u5f00\u542f\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u65e0 MQTTClient.publish(topic,msg,qos) \u53d1\u5e03\u6d88\u606f\u3002 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e topic string \u6d88\u606f\u4e3b\u9898 msg string \u9700\u8981\u53d1\u9001\u7684\u6570\u636e qos int MQTT\u6d88\u606f\u670d\u52a1\u8d28\u91cf\uff08\u9ed8\u8ba40\uff0c\u53ef\u9009\u62e90\u62161\uff090\uff1a\u53d1\u9001\u8005\u53ea\u53d1\u9001\u4e00\u6b21\u6d88\u606f\uff0c\u4e0d\u8fdb\u884c\u91cd\u8bd5 1\uff1a\u53d1\u9001\u8005\u6700\u5c11\u53d1\u9001\u4e00\u6b21\u6d88\u606f\uff0c\u786e\u4fdd\u6d88\u606f\u5230\u8fbeBroker \u8fd4\u56de\u503c \u65e0 MQTTClient.subscribe(topic,qos) \u8ba2\u9605mqtt\u4e3b\u9898\u3002 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e topic string topic qos int MQTT\u6d88\u606f\u670d\u52a1\u8d28\u91cf\uff08\u9ed8\u8ba40\uff0c\u53ef\u9009\u62e90\u62161\uff090\uff1a\u53d1\u9001\u8005\u53ea\u53d1\u9001\u4e00\u6b21\u6d88\u606f\uff0c\u4e0d\u8fdb\u884c\u91cd\u8bd5 1\uff1a\u53d1\u9001\u8005\u6700\u5c11\u53d1\u9001\u4e00\u6b21\u6d88\u606f\uff0c\u786e\u4fdd\u6d88\u606f\u5230\u8fbeBroker \u8fd4\u56de\u503c \u65e0 MQTTClient.check_msg() \u68c0\u67e5\u670d\u52a1\u5668\u662f\u5426\u6709\u5f85\u5904\u7406\u6d88\u606f\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u65e0 MQTTClient.wait_msg() \u963b\u585e\u7b49\u5f85\u670d\u52a1\u5668\u6d88\u606f\u54cd\u5e94\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u65e0 \u793a\u4f8b\u4ee3\u7801 import utime from umqtt import MQTTClient state = 0 def sub_cb(topic, msg): ''' \u6d88\u606f\u56de\u8c03\u51fd\u6570 ''' global state mqtt_log.info(\"Subscribe Recv: Topic={},Msg={}\".format(topic.decode(), msg.decode())) state = 1 c = MQTTClient(\"umqtt_client\", \"mq.tongxinmao.com\", 18830) c.set_callback(sub_cb) c.connect() c.subscribe(b\"/public/TEST/quecpython\") c.publish(b\"/public/TEST/quecpython\", b\"my name is Quecpython!\") while True: c.wait_msg() # \u963b\u585e\u51fd\u6570\uff0c\u76d1\u542c\u6d88\u606f if state == 1: break # \u5173\u95ed\u8fde\u63a5 c.disconnect()","title":"umqtt - MQTT"},{"location":"QuecPython%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/#ntptime-ntp","text":"\u6a21\u5757\u529f\u80fd\uff1a\u8be5\u6a21\u5757\u7528\u4e8e\u65f6\u95f4\u540c\u6b65\u3002 ntptime.host \u8fd4\u56de\u5f53\u524d\u7684ntp\u670d\u52a1\u5668\uff0c\u9ed8\u8ba4\u4e3a\"ntp.aliyun.com\"\u3002 ntptime.sethost(host) \u8bbe\u7f6entp\u670d\u52a1\u5668\u3002 \u53c2\u6570 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e host string ntp\u670d\u52a1\u5668\u5730\u5740 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u6574\u578b\u503c0\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\u3002 ntptime.settime() \u540c\u6b65ntp\u65f6\u95f4\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u6210\u529f\u8fd4\u56de\u6574\u578b\u503c0\uff0c\u5931\u8d25\u8fd4\u56de\u6574\u578b\u503c-1\u3002 ntptime\u4f7f\u7528\u793a\u4f8b import ntptime ntptime.sethost('pool.ntp.org') # set the ntp service ntptime.settime() # sync the local time \u200b","title":"ntptime - NTP\u5bf9\u65f6"},{"location":"QuecPython%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/#quecpython-qpycom-gui","text":"\u53c2\u89c1\u300aQuectel QuecPython_QPYcom\u5de5\u5177\u4f7f\u7528\u8bf4\u660e_V1.0\u300b","title":"QuecPython QPYcom GUI\u5de5\u5177\u4f7f\u7528"},{"location":"QuecPython%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/#quecpython-app","text":"","title":"QuecPython APP\u5f00\u53d1\u6d41\u7a0b\u4ecb\u7ecd"},{"location":"QuecPython%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/","text":"QuecPython\u5feb\u901f\u5165\u95e8 QuecPython\u5feb\u901f\u5165\u95e8\uff1aHello World QuecPython\u5feb\u901f\u5165\u95e8\uff1a\u70b9\u4eaeLED\u706f QuecPython\u5feb\u901f\u5165\u95e8\uff1aPing\u767e\u5ea6","title":"QuecPython\u5feb\u901f\u5165\u95e8"},{"location":"QuecPython%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/#quecpython","text":"","title":"QuecPython\u5feb\u901f\u5165\u95e8"},{"location":"QuecPython%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/#quecpythonhello-world","text":"","title":"QuecPython\u5feb\u901f\u5165\u95e8\uff1aHello World"},{"location":"QuecPython%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/#quecpythonled","text":"","title":"QuecPython\u5feb\u901f\u5165\u95e8\uff1a\u70b9\u4eaeLED\u706f"},{"location":"QuecPython%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/#quecpythonping","text":"","title":"QuecPython\u5feb\u901f\u5165\u95e8\uff1aPing\u767e\u5ea6"},{"location":"QuecPython%E6%97%A0%E7%BA%BF%E8%81%94%E7%BD%91%E5%BC%80%E5%8F%91/","text":"QuecPython\u65e0\u7ebf\u8054\u7f51\u5f00\u53d1 QuecPython \u6570\u636e\u62e8\u53f7 QuecPython \u57fa\u7ad9\u5b9a\u4f4d QuecPython SIM\u5361\u529f\u80fd\u5f00\u53d1 QuecPython NET\u7f51\u8def\u6a21\u5f0f\u914d\u7f6e\u53ca\u4fe1\u606f\u83b7\u53d6 QuecPython \u77ed\u4fe1\u6536\u53d1","title":"QuecPython\u65e0\u7ebf\u8054\u7f51\u5f00\u53d1"},{"location":"QuecPython%E6%97%A0%E7%BA%BF%E8%81%94%E7%BD%91%E5%BC%80%E5%8F%91/#quecpython","text":"","title":"QuecPython\u65e0\u7ebf\u8054\u7f51\u5f00\u53d1"},{"location":"QuecPython%E6%97%A0%E7%BA%BF%E8%81%94%E7%BD%91%E5%BC%80%E5%8F%91/#quecpython_1","text":"","title":"QuecPython \u6570\u636e\u62e8\u53f7"},{"location":"QuecPython%E6%97%A0%E7%BA%BF%E8%81%94%E7%BD%91%E5%BC%80%E5%8F%91/#quecpython_2","text":"","title":"QuecPython \u57fa\u7ad9\u5b9a\u4f4d"},{"location":"QuecPython%E6%97%A0%E7%BA%BF%E8%81%94%E7%BD%91%E5%BC%80%E5%8F%91/#quecpython-sim","text":"","title":"QuecPython SIM\u5361\u529f\u80fd\u5f00\u53d1"},{"location":"QuecPython%E6%97%A0%E7%BA%BF%E8%81%94%E7%BD%91%E5%BC%80%E5%8F%91/#quecpython-net","text":"","title":"QuecPython NET\u7f51\u8def\u6a21\u5f0f\u914d\u7f6e\u53ca\u4fe1\u606f\u83b7\u53d6"},{"location":"QuecPython%E6%97%A0%E7%BA%BF%E8%81%94%E7%BD%91%E5%BC%80%E5%8F%91/#quecpython_3","text":"","title":"QuecPython \u77ed\u4fe1\u6536\u53d1"},{"location":"QuecPython%E6%A0%87%E5%87%86%E5%BA%93%E4%BB%8B%E7%BB%8D/","text":"QuecPython\u6807\u51c6\u5e93\u4ecb\u7ecd QuecPython\u6807\u51c6\u5e93 uos - \u57fa\u672c\u7cfb\u7edf\u670d\u52a1 uos\u6a21\u5757\u5305\u542b\u6587\u4ef6\u7cfb\u7edf\u8bbf\u95ee\u548c\u6302\u8f7d\u6784\u5efa\uff0c\u8be5\u6a21\u5757\u5b9e\u73b0\u4e86CPython\u6a21\u5757\u76f8\u5e94\u6a21\u5757\u7684\u5b50\u96c6\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605\u9605CPython\u6587\u6863\uff1a os uos.remove(path) \u5220\u9664\u6587\u4ef6\u3002path\u8868\u793a\u6587\u4ef6\u540d\u3002 uos.chdir(path) \u6539\u53d8\u5f53\u524d\u76ee\u5f55\u3002path\u8868\u793a\u76ee\u5f55\u540d\u3002 uos.getcwd() \u83b7\u53d6\u5f53\u524d\u8def\u5f84\u3002 uos.listdir( [dir] ) \u6ca1\u6709\u53c2\u6570\u5217\u51fa\u5f53\u524d\u76ee\u5f55\u6587\u4ef6\uff0c\u5426\u5219\u5217\u51fa\u7ed9\u5b9a\u76ee\u5f55\u7684\u6587\u4ef6\u3002dir\u4e3a\u53ef\u9009\u53c2\u6570\uff0c\u8868\u793a\u76ee\u5f55\u540d\uff0c\u9ed8\u8ba4\u4e3a \u2018/\u2019 \u76ee\u5f55\u3002 \u793a\u4f8b\uff1a >>> uos.listdir() [\u2018file1\u2019, \u2018read.txt\u2019, \u2018demo.py\u2019] uos.mkdir(path) \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u76ee\u5f55\u3002path\u8868\u793a\u51c6\u5907\u521b\u5efa\u7684\u76ee\u5f55\u540d\u3002 \u793a\u4f8b\uff1a >>> uos.mkdir('testdir') >>> uos.listdir() [\u2018file1\u2019, \u2018read.txt\u2019, \u2018demo.py\u2019, 'testdir'] uos.rename(old_path, new_path) \u91cd\u547d\u540d\u6587\u4ef6\u3002old_path\u8868\u793a\u65e7\u6587\u4ef6\u6216\u76ee\u5f55\u540d\uff0cnew_path\u8868\u793a\u65b0\u6587\u4ef6\u6216\u76ee\u5f55\u540d\u3002 \u793a\u4f8b\uff1a >>> uos.rename('testdir', 'testdir1') uos.rmdir(path) \u5220\u9664\u6307\u5b9a\u76ee\u5f55\u3002path\u8868\u793a\u76ee\u5f55\u540d\u3002 \u793a\u4f8b\uff1a >>> uos.rmdir('testdir') >>> uos.listdir() [\u2018file1\u2019, \u2018read.txt\u2019, \u2018demo.py\u2019] uos.ilistdir( [dir] ) \u8be5\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u8be5\u8fed\u4ee3\u5668\u4f1a\u751f\u6210\u6240\u5217\u51fa\u6761\u76ee\u5bf9\u5e94\u76843\u5143\u7ec4\u3002dir\u4e3a\u53ef\u9009\u53c2\u6570\uff0c\u8868\u793a\u76ee\u5f55\u540d\uff0c\u6ca1\u6709\u53c2\u6570\u65f6\uff0c\u9ed8\u8ba4\u5217\u51fa\u5f53\u524d\u76ee\u5f55\uff0c\u6709\u53c2\u6570\u65f6\uff0c\u5219\u5217\u51fadir\u53c2\u6570\u6307\u5b9a\u7684\u76ee\u5f55\u3002\u5143\u7ec4\u7684\u5f62\u5f0f\u4e3a (name, type, inode[, size]) : name \u662f\u6761\u76ee\u7684\u540d\u79f0\uff0c\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u5982\u679cdir\u662f\u5b57\u8282\u5bf9\u8c61\uff0c\u5219\u540d\u79f0\u4e3a\u5b57\u8282; type \u662f\u6761\u76ee\u7684\u7c7b\u578b\uff0c\u6574\u578b\u6570\uff0c0x4000\u8868\u793a\u76ee\u5f55\uff0c0x8000\u8868\u793a\u5e38\u89c4\u6587\u4ef6\uff1b \u662f\u4e00\u4e2a\u4e0e\u6587\u4ef6\u7684\u7d22\u5f15\u8282\u70b9\u76f8\u5bf9\u5e94\u7684\u6574\u6570\uff0c\u5bf9\u4e8e\u6ca1\u6709\u8fd9\u79cd\u6982\u5ff5\u7684\u6587\u4ef6\u7cfb\u7edf\u6765\u8bf4\uff0c\u53ef\u80fd\u4e3a0\uff1b \u4e00\u4e9b\u5e73\u53f0\u53ef\u80fd\u4f1a\u8fd4\u56de\u4e00\u4e2a4\u5143\u7ec4\uff0c\u5176\u4e2d\u5305\u542b\u6761\u76ee\u7684size\u3002\u5bf9\u4e8e\u6587\u4ef6\u6761\u76ee\uff0csize\u8868\u793a\u6587\u4ef6\u5927\u5c0f\u7684\u6574\u6570\uff0c\u5982\u679c\u672a\u77e5\uff0c\u5219\u4e3a-1\u3002\u5bf9\u4e8e\u76ee\u5f55\u9879\uff0c\u5176\u542b\u4e49\u76ee\u524d\u5c1a\u672a\u5b9a\u4e49\u3002 uos.stat(path) \u83b7\u53d6\u6587\u4ef6\u6216\u76ee\u5f55\u7684\u72b6\u6001\u3002path\u8868\u793a\u6587\u4ef6\u6216\u76ee\u5f55\u540d\u3002\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u5143\u7ec4\uff0c\u8fd4\u56de\u503c\u5f62\u5f0f\u4e3a\uff1a (mode, ino, dev, nlink, uid, gid, size, atime, mtime, ctime) mode \u2013 inode\u4fdd\u62a4\u6a21\u5f0f ino \u2013 inode\u8282\u70b9\u53f7 dev \u2013 inode\u9a7b\u7559\u7684\u8bbe\u5907 nlink \u2013 inode\u7684\u94fe\u63a5\u6570 uid \u2013 \u6240\u6709\u8005\u7684\u7528\u6237ID gid \u2013 \u6240\u6709\u8005\u7684\u7ec4ID size \u2013 \u6587\u4ef6\u5927\u5c0f\uff0c\u5355\u4f4d\u5b57\u8282 atime \u2013 \u4e0a\u6b21\u8bbf\u95ee\u7684\u65f6\u95f4 mtime \u2013 \u6700\u540e\u4e00\u6b21\u4fee\u6539\u7684\u65f6\u95f4 ctime \u2013 \u64cd\u4f5c\u7cfb\u7edf\u62a5\u544a\u7684\u201cctime\u201d\uff0c\u5728\u67d0\u4e9b\u7cfb\u7edf\u4e0a\u662f\u6700\u65b0\u7684\u5143\u6570\u636e\u66f4\u6539\u7684\u65f6\u95f4\uff0c\u5728\u5176\u5b83\u7cfb\u7edf\u4e0a\u662f\u521b\u5efa\u65f6\u95f4\uff0c\u8be6\u7ec6\u4fe1\u606f\u53c2\u89c1\u5e73\u53f0\u6587\u6863 uos.statvfs(path) \u83b7\u53d6\u6587\u4ef6\u7cfb\u7edf\u72b6\u6001\u4fe1\u606f\u3002path\u8868\u793a\u6587\u4ef6\u6216\u76ee\u5f55\u540d\u3002\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u6587\u4ef6\u7cfb\u7edf\u4fe1\u606f\u7684\u5143\u7ec4\uff1a (f_bsize, f_frsize, f_blocks, f_bfree, f_bavail, f_files, f_ffree, f_favail, f_flag, f_namemax) f_bsize \u2013 \u6587\u4ef6\u7cfb\u7edf\u5757\u5927\u5c0f\uff0c\u5355\u4f4d\u5b57\u8282 f_frsize \u2013 \u5206\u6808\u5927\u5c0f\uff0c\u5355\u4f4d\u5b57\u8282 f_blocks \u2013 \u6587\u4ef6\u7cfb\u7edf\u6570\u636e\u5757\u603b\u6570 f_bfree \u2013 \u53ef\u7528\u5757\u6570 f_bavai \u2013 \u975e\u8d85\u7ea7\u7528\u6237\u53ef\u83b7\u53d6\u7684\u5757\u6570 f_files \u2013 \u6587\u4ef6\u7ed3\u70b9\u603b\u6570 f_ffree \u2013 \u53ef\u7528\u6587\u4ef6\u7ed3\u70b9\u6570 f_favail \u2013 \u8d85\u7ea7\u7528\u6237\u7684\u53ef\u7528\u6587\u4ef6\u7ed3\u70b9\u6570 f_flag \u2013 \u6302\u8f7d\u6807\u8bb0 f_namemax \u2013 \u6700\u5927\u6587\u4ef6\u957f\u5ea6\uff0c\u5355\u4f4d\u5b57\u8282 \u793a\u4f8b\uff1a >>> import uos >>> res = uos.statvfs(\"main.py\") >>> print(res) (4096, 4096, 256, 249, 249, 0, 0, 0, 0, 255) uos.uname() \u83b7\u53d6\u5173\u4e8e\u5e95\u5c42\u4fe1\u606f\u6216\u5176\u64cd\u4f5c\u7cfb\u7edf\u7684\u4fe1\u606f\u3002\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4\uff0c\u5f62\u5f0f\u4e3a\uff1a (sysname, nodename, release, version, machine) sysname \u2013 \u5e95\u5c42\u7cfb\u7edf\u7684\u540d\u79f0\uff0cstring\u7c7b\u578b nodename \u2013 \u7f51\u7edc\u540d\u79f0(\u53ef\u4ee5\u4e0e sysname \u76f8\u540c) \uff0cstring\u7c7b\u578b release \u2013 \u5e95\u5c42\u7cfb\u7edf\u7684\u7248\u672c\uff0cstring\u7c7b\u578b version \u2013 MicroPython\u7248\u672c\u548c\u6784\u5efa\u65e5\u671f\uff0cstring\u7c7b\u578b machine \u2013 \u5e95\u5c42\u786c\u4ef6(\u5982\u4e3b\u677f\u3001CPU)\u7684\u6807\u8bc6\u7b26\uff0cstring\u7c7b\u578b \u793a\u4f8b\uff1a >>> import uos >>> uos.uname() (sysname='EC100Y', nodename='EC100Y', release='1.12.0', version='v1.12 on 2020-06-23', machine='EC100Y with QUECTEL') uos.urandom(n) \u8fd4\u56de\u5177\u6709 n\u4e2a \u968f\u673a\u5b57\u8282\u7684bytes\u5bf9\u8c61\uff0c\u53ea\u8981\u6709\u53ef\u80fd\uff0c\u5b83\u5c31\u4f1a\u7531\u786c\u4ef6\u968f\u673a\u6570\u751f\u6210\u5668\u751f\u6210\u3002 \u793a\u4f8b\uff1a >>> import uos >>> uos.urandom(5) b'\\xb3\\xc9Y\\x1b\\xe9' gc - \u5185\u5b58\u788e\u7247\u56de\u6536 gc \u6a21\u5757\u5b9e\u73b0\u5185\u5b58\u5783\u573e\u56de\u6536\u673a\u5236\uff0c\u8be5\u6a21\u5757\u5b9e\u73b0\u4e86CPython\u6a21\u5757\u76f8\u5e94\u6a21\u5757\u7684\u5b50\u96c6\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605\u9605CPython\u6587\u6863\uff1a gc gc.enable() \u542f\u7528\u81ea\u52a8\u56de\u6536\u5185\u5b58\u788e\u7247\u673a\u5236\u3002 gc.disable() \u7981\u7528\u81ea\u52a8\u56de\u6536\u673a\u5236\u3002 gc.collect() \u56de\u6536\u5185\u5b58\u788e\u7247\u3002 gc.mem_alloc() \u8fd4\u56de\u5206\u914d\u7684\u5806RAM\u7684\u5b57\u8282\u6570\u3002\u6b64\u529f\u80fd\u662fMicroPython\u6269\u5c55\u3002 gc.mem_free() \u8fd4\u56de\u53ef\u7528\u5806RAM\u7684\u5b57\u8282\u6570\uff0c\u5982\u679c\u6b64\u6570\u91cf\u672a\u77e5\uff0c\u5219\u8fd4\u56de-1\u3002\u6b64\u529f\u80fd\u662fMicroPython\u6269\u5c55\u3002 ubinascii - \u4e8c\u8fdb\u5236\u4e0eASCII\u8f6c\u6362 ubinascii \u6a21\u5757\u5b9e\u73b0\u4e86\u4e8c\u8fdb\u5236\u6570\u636e\u4e0e\u5404\u79cdASCII\u7f16\u7801\u4e4b\u95f4\u7684\u8f6c\u6362(\u53cc\u5411)\uff0c\u8be5\u6a21\u5757\u5b9e\u73b0\u4e86CPython\u6a21\u5757\u76f8\u5e94\u6a21\u5757\u7684\u5b50\u96c6\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605\u9605CPython\u6587\u6863\uff1a binascii ubinascii.a2b_base64(data) \u89e3\u7801base64\u7f16\u7801\u7684\u6570\u636e\uff0c\u4f1a\u81ea\u52a8\u5ffd\u7565\u8f93\u5165\u4e2d\u7684\u65e0\u6548\u5b57\u7b26\uff0c\u8fd4\u56de bytes \u5bf9\u8c61\u3002 ubinascii.b2a_base64(data) \u4ee5base64\u683c\u5f0f\u7f16\u7801\u4e8c\u8fdb\u5236\u6570\u636e\uff0c\u8fd4\u56de\u7f16\u7801\u6570\u636e\u3002\u540e\u9762\u8ddf\u6362\u884c\u7b26\uff0c\u4f5c\u4e3a bytes \u5bf9\u8c61\u3002 ubinascii.hexlify(data, [sep]) \u5c06\u4e8c\u8fdb\u5236\u6570\u636e\u8f6c\u6362\u4e3a\u5341\u516d\u8fdb\u5236\u5b57\u7b26\u4e32\u8868\u793a\u3002 \u793a\u4f8b\uff1a >>> import ubinascii # \u6ca1\u6709sep\u53c2\u6570 >>> ubinascii.hexlify('\\x11\\x22123') b'1122313233' >>> ubinascii.hexlify('abcdfg') b'616263646667' # \u6307\u5b9a\u4e86\u7b2c\u4e8c\u4e2a\u53c2\u6570sep\uff0c\u5b83\u5c06\u7528\u4e8e\u5206\u9694\u4e24\u4e2a\u5341\u516d\u8fdb\u5236\u6570 >>> ubinascii.hexlify('\\x11\\x22123', ' ') b'11 22 31 32 33' >>> ubinascii.hexlify('\\x11\\x22123', ',') b'11,22,31,32,33' ubinascii.unhexlify(data) \u5c06\u5341\u516d\u8fdb\u5236\u5f62\u5f0f\u7684\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u4e8c\u8fdb\u5236\u5f62\u5f0f\u7684\u5b57\u7b26\u4e32\u8868\u793a\u3002 \u793a\u4f8b\uff1a >>> import ubinascii >>> ubinascii.unhexlify('313222') b'12\"' ucollections - \u96c6\u5408\u548c\u5bb9\u5668\u7c7b\u578b ucollections \u6a21\u5757\u7528\u4e8e\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5bb9\u5668\u7c7b\u578b\uff0c\u7528\u4e8e\u4fdd\u5b58\u5404\u79cd\u5bf9\u8c61\u3002\u8be5\u6a21\u5757\u5b9e\u73b0\u4e86CPython\u6a21\u5757\u76f8\u5e94\u6a21\u5757\u7684\u5b50\u96c6\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605\u9605CPython\u6587\u6863\uff1a collections mytuple = ucollections.namedtuple(name, fields) \u521b\u5efa\u4e00\u4e2a\u5177\u6709\u7279\u5b9a\u540d\u79f0\u548c\u4e00\u7ec4\u5b57\u6bb5\u7684\u65b0namedtuple\u5bb9\u5668\u7c7b\u578b\uff0cnamedtuple\u662f\u5143\u7ec4\u7684\u5b50\u7c7b\uff0c\u5141\u8bb8\u901a\u8fc7\u7d22\u5f15\u6765\u8bbf\u95ee\u5b83\u7684\u5b57\u6bb5\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e name str \u65b0\u521b\u5efa\u5bb9\u5668\u7684\u7c7b\u578b\u540d\u79f0 fields tuple \u65b0\u521b\u5efa\u5bb9\u5668\u7c7b\u578b\u5305\u542b\u5b50\u7c7b\u578b\u7684\u5b57\u6bb5 \u793a\u4f8b\uff1a >>> import ucollections >>> mytuple = ucollections.namedtuple(\"mytuple\", (\"id\", \"name\")) >>> t1 = mytuple(1, \"foo\") >>> t2 = mytuple(2, \"bar\") >>> print(t1.name) foo dq = ucollections.deque(iterable, maxlen, flag) \u521b\u5efadeque\u53cc\u5411\u961f\u5217 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e iterable tuple iterable\u5fc5\u987b\u662f\u7a7a\u5143\u7ec4 maxlen int \u6307\u5b9amaxlen\u5e76\u5c06\u53cc\u7aef\u961f\u5217\u9650\u5236\u4e3a\u6b64\u6700\u5927\u957f\u5ea6 flag int \u53ef\u9009\u53c2\u6570\uff1b0(\u9ed8\u8ba4)\uff1a\u4e0d\u68c0\u67e5\u961f\u5217\u662f\u5426\u6ea2\u51fa\uff0c\u8fbe\u5230\u6700\u5927\u957f\u5ea6\u65f6\u7ee7\u7eedappend\u4f1a\u4e22\u5f03\u4e4b\u524d\u7684\u503c \uff0c1\uff1a\u5f53\u961f\u5217\u8fbe\u5230\u6700\u5927\u8bbe\u5b9a\u957f\u5ea6\u4f1a\u629b\u51faIndexError: full \u8fd4\u56de\u503c deque\u5bf9\u8c61 deque\u5bf9\u8c61\u65b9\u6cd5 \u200b dq.append(data) \u5f80\u961f\u5217\u4e2d\u63d2\u5165\u503c\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e data \u57fa\u672c\u6570\u636e\u7c7b\u578b \u9700\u8981\u6dfb\u52a0\u5230\u961f\u5217\u7684\u6570\u503c \u8fd4\u56de\u503c \u65e0 \u200b dq.popleft() \u4ecedeque\u7684\u5de6\u4fa7\u79fb\u9664\u5e76\u8fd4\u56de\u79fb\u9664\u7684\u6570\u636e\u3002\u5982\u679c\u6ca1\u6709deque\u4e3a\u7a7a\uff0c\u4f1a\u5f15\u8d77\u7d22\u5f15\u9519\u8bef \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u8fd4\u56depop\u51fa\u7684\u503c \u4f7f\u7528\u793a\u4f8b from ucollections import deque dq = deque((),5) dq.append(1) dq.append([\"a\"]) dq.append(\"a\") dq.popleft() # 1 dq.popleft() # [\"a\"] dq.popleft() # a urandom - \u751f\u6210\u968f\u673a\u6570 urandom \u6a21\u5757\u63d0\u4f9b\u4e86\u751f\u6210\u968f\u673a\u6570\u7684\u5de5\u5177\u3002 urandom.choice(obj) \u968f\u673a\u751f\u6210\u5bf9\u8c61 obj \u4e2d\u7684\u5143\u7d20\uff0cobj \u7c7b\u578b string\u3002 \u793a\u4f8b\uff1a >>> import urandom >>> urandom.choice(\"QuecPython\") 't' urandom.getrandbits(k) \u968f\u673a\u4ea7\u751f\u4e00\u4e2ak\u6bd4\u7279\u957f\u7684\u968f\u673a\u6574\u6570\u3002 \u793a\u4f8b\uff1a >>> import urandom >>> urandom.getrandbits(1) #1\u4f4d\u4e8c\u8fdb\u5236\u4f4d\uff0c\u8303\u56f4\u4e3a0~1\uff08\u5341\u8fdb\u5236\uff1a0~1\uff09 1 >>> urandom.getrandbits(1) 0 >>> urandom.getrandbits(8) #8\u4f4d\u4e8c\u8fdb\u5236\u4f4d\uff0c\u8303\u56f4\u4e3a0000 0000~1111 11111\uff08\u5341\u8fdb\u5236\uff1a0~255\uff09 224 urandom.randint(start, end) \u968f\u673a\u751f\u6210\u4e00\u4e2a start \u5230 end \u4e4b\u95f4\u7684\u6574\u6570\u3002 \u793a\u4f8b\uff1a >>> import urandom >>> urandom.randint(1, 4) 4 >>> urandom.randint(1, 4) 2 urandom.random() \u968f\u673a\u751f\u6210\u4e00\u4e2a 0 \u5230 1 \u4e4b\u95f4\u7684\u6d6e\u70b9\u6570\u3002 \u793a\u4f8b\uff1a >>> import urandom >>> urandom.random() 0.8465231 urandom.randrange(start, end, step) \u968f\u673a\u751f\u6210 start \u5230 end \u95f4\u5e76\u4e14\u9012\u589e\u4e3a step \u7684\u6b63\u6574\u6570\u3002 \u793a\u4f8b\uff1a >>> import urandom >>> urandom.randrange(0, 8, 2) 0 >>> urandom.randrange(0, 8, 2) 6 urandom.seed(sed) \u6307\u5b9a\u968f\u673a\u6570\u79cd\u5b50\uff0c\u901a\u5e38\u548c\u5176\u5b83\u968f\u673a\u6570\u751f\u6210\u51fd\u6570\u642d\u914d\u4f7f\u7528\u3002 \u793a\u4f8b\uff1a >>> import urandom >>> urandom.seed(20) #\u6307\u5b9a\u968f\u673a\u6570\u79cd\u5b50 >>> for i in range(0, 15): #\u751f\u62100~15\u8303\u56f4\u5185\u7684\u968f\u673a\u5e8f\u5217 ... print(urandom.randint(1, 10)) ... 8 10 9 10 2 1 9 3 2 2 6 1 10 9 6 urandom.uniform(start, end) \u968f\u673a\u751f\u6210 start \u5230 end \u8303\u56f4\u5185\u7684\u6d6e\u70b9\u6570\u3002 \u793a\u4f8b\uff1a >>> import urandom >>> urandom.uniform(3, 5) 3.219261 >>> urandom.uniform(3, 5) 4.00403 math - \u6570\u5b66\u8fd0\u7b97 math \u6a21\u5757\u63d0\u4f9b\u6570\u5b66\u8fd0\u7b97\u51fd\u6570\u3002\u8be5\u6a21\u5757\u5b9e\u73b0\u76f8\u5e94CPython\u6a21\u5757\u7684\u5b50\u96c6\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605\u9605CPython\u6587\u6863\uff1a math math.pow(x, y) \u8fd4\u56dex\u7684y\u6b21\u65b9\uff0c\u8fd4\u56de\u503c\u662f\u6d6e\u70b9\u6570\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.pow(2, 3) 8.0 math.acos(x) \u8fd4\u56dex\u7684\u53cd\u4f59\u5f26\u5f27\u5ea6\u503c\uff0c\u8fd4\u56de\u503c\u4e3a\u6d6e\u70b9\u6570\u3002x\u662f-1~1\u4e4b\u95f4\u7684\u6570\uff0c\u5305\u62ec-1\u548c1\uff0c\u5982\u679c\u5c0f\u4e8e-1\u6216\u8005\u5927\u4e8e1\uff0c\u4f1a\u4ea7\u751f\u9519\u8bef\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.acos(0.6) 0.9272952 math.asin(x) \u8fd4\u56dex\u7684\u53cd\u6b63\u5f26\u5f27\u5ea6\u503c\uff0c\u8fd4\u56de\u503c\u4e3a\u6d6e\u70b9\u6570\u3002x\u662f-1~1\u4e4b\u95f4\u7684\u6570\uff0c\u5305\u62ec-1\u548c1\uff0c\u5982\u679c\u5c0f\u4e8e-1\u6216\u8005\u5927\u4e8e1\uff0c\u4f1a\u4ea7\u751f\u9519\u8bef\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.asin(-1) -1.570796 math.atan(x) \u8fd4\u56dex\u7684\u53cd\u6b63\u5207\u5f27\u5ea6\u503c\uff0c\u8fd4\u56de\u503c\u4e3a\u6d6e\u70b9\u6570\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.atan(-8) -1.446441 >>> math.atan(6.4) 1.4158 math.atan2(x, y) \u8fd4\u56de\u7ed9\u5b9a\u7684 X \u53ca Y \u5750\u6807\u503c\u7684\u53cd\u6b63\u5207\u503c\uff0c\u8fd4\u56de\u503c\u4e3a\u6d6e\u70b9\u6570\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.atan2(-0.50,0.48) -0.8058035 >>> math.atan2(7, 9) 0.6610432 math.ceil(x) \u8fd4\u56de\u6570\u5b57\u7684\u4e0a\u5165\u6574\u6570\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.ceil(4.1) 5 math.copysign(x, y) \u628ay\u7684\u6b63\u8d1f\u53f7\u52a0\u5230x\u524d\u9762\uff0c\u53ef\u4ee5\u4f7f\u75280\uff0c\u8fd4\u56de\u503c\u4e3a\u6d6e\u70b9\u6570\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.copysign(5, 0) 5.0 >>> math.copysign(5, -4) -5.0 >>> math.copysign(5, 9) 5.0 math.cos(x) \u8fd4\u56dex\u7684\u5f27\u5ea6\u7684\u4f59\u5f26\u503c\uff0c\u8303\u56f4\u518d-1~1\u4e4b\u95f4\uff0c\u8fd4\u56de\u503c\u4e3a\u6d6e\u70b9\u6570\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.cos(3) -0.9899925 math.degrees(x) \u5c06\u5f27\u5ea6\u8f6c\u6362\u4e3a\u89d2\u5ea6\uff0c\u8fd4\u56de\u503c\u4e3a\u6d6e\u70b9\u6570\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.degrees(5) 286.4789 >>> math.degrees(math.pi/2) 90.0 math.e \u6570\u5b66\u5e38\u91cf e \uff0c e \u5373\u81ea\u7136\u5e38\u6570\u3002 math.exp(x) \u8fd4\u56dee\u7684x\u6b21\u5e42\uff0c\u8fd4\u56de\u503c\u4e3a\u6d6e\u70b9\u6570\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.exp(1) 2.718282 >>> print(math.e) 2.718282 math.fabs(x) \u8fd4\u56de\u6570\u5b57\u7684\u7edd\u5bf9\u503c\uff0c\u8fd4\u56de\u503c\u4e3a\u6d6e\u70b9\u6570\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.fabs(-3.88) 3.88 math.floor(x) \u8fd4\u56de\u6570\u5b57\u7684\u4e0b\u820d\u6574\u6570\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.floor(8.7) 8 >>> math.floor(9) 9 >>> math.floor(-7.6) -8 math.fmod(x, y) \u8fd4\u56dex/y\u7684\u4f59\u6570\uff0c\u8fd4\u56de\u503c\u4e3a\u6d6e\u70b9\u6570\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.fmod(15, 4) 3.0 >>> math.fmod(15, 3) 0.0 math.modf(x) \u8fd4\u56de\u7531x\u7684\u5c0f\u6570\u90e8\u5206\u548c\u6574\u6570\u90e8\u5206\u7ec4\u6210\u7684\u5143\u7ec4\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.modf(17.592) (0.5919991, 17.0) math.frexp(x) \u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4(m,e),\u5176\u8ba1\u7b97\u65b9\u5f0f\u4e3a\uff1ax\u5206\u522b\u96640.5\u548c1,\u5f97\u5230\u4e00\u4e2a\u503c\u7684\u8303\u56f4\uff0c2e\u7684\u503c\u5728\u8fd9\u4e2a\u8303\u56f4\u5185\uff0ce\u53d6\u7b26\u5408\u8981\u6c42\u7684\u6700\u5927\u6574\u6570\u503c,\u7136\u540ex/(2e)\uff0c\u5f97\u5230m\u7684\u503c\u3002\u5982\u679cx\u7b49\u4e8e0\uff0c\u5219m\u548ce\u7684\u503c\u90fd\u4e3a0\uff0cm\u7684\u7edd\u5bf9\u503c\u7684\u8303\u56f4\u4e3a(0.5,1)\u4e4b\u95f4\uff0c\u4e0d\u5305\u62ec0.5\u548c1\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.frexp(52) (0.8125, 6) math.isfinite(x) \u5224\u65ad x \u662f\u5426\u4e3a\u6709\u9650\u6570\uff0c\u662f\u5219\u8fd4\u56deTrue\uff0c\u5426\u5219\u8fd4\u56deFalse\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.isfinite(8) True math.isinf(x) \u5982\u679cx\u662f\u6b63\u65e0\u7a77\u5927\u6216\u8d1f\u65e0\u7a77\u5927\uff0c\u5219\u8fd4\u56deTrue,\u5426\u5219\u8fd4\u56deFalse\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.isinf(123) False math.isnan(x) \u5982\u679cx\u4e0d\u662f\u6570\u5b57True,\u5426\u5219\u8fd4\u56deFalse\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.isnan(23) False math.ldexp(x, exp) \u8fd4\u56dex (2 *i)\u7684\u503c\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.ldexp(2, 1) 4.0 math.log(x) \u8fd4\u56dex\u7684\u81ea\u7136\u5bf9\u6570\uff0cx > 0\uff0c\u5c0f\u4e8e0\u4f1a\u62a5\u9519\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.log(2) 0.6931472 math.pi \u6570\u5b66\u5e38\u91cf pi\uff08\u5706\u5468\u7387\uff0c\u4e00\u822c\u4ee5\u03c0\u6765\u8868\u793a\uff09\u3002 math.radians(x) \u5c06\u89d2\u5ea6\u8f6c\u6362\u4e3a\u5f27\u5ea6\uff0c\u8fd4\u56de\u503c\u4e3a\u6d6e\u70b9\u6570\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.radians(90) 1.570796 math.sin(x) \u8fd4\u56dex\u5f27\u5ea6\u7684\u6b63\u5f26\u503c\uff0c\u6570\u503c\u5728 -1 \u5230 1 \u4e4b\u95f4\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.sin(-18) 0.7509873 >>> math.sin(50) -0.2623749 math.sqrt(x) \u8fd4\u56de\u6570\u5b57x\u7684\u5e73\u65b9\u6839\uff0c\u8fd4\u56de\u503c\u4e3a\u6d6e\u70b9\u6570\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.sqrt(4) 2.0 >>> math.sqrt(7) 2.645751 math.tan(x) \u8fd4\u56de x \u5f27\u5ea6\u7684\u6b63\u5207\u503c\uff0c\u6570\u503c\u5728 -1 \u5230 1 \u4e4b\u95f4\uff0c\u4e3a\u6d6e\u70b9\u6570\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.tan(9) -0.4523157 math.trunc(x) \u8fd4\u56dex\u7684\u6574\u6570\u90e8\u5206\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.trunc(7.123) 7 usocket - socket\u6a21\u5757 usocket \u6a21\u5757\u63d0\u4f9b\u5bf9BSD\u5957\u63a5\u5b57\u63a5\u53e3\u7684\u8bbf\u95ee\u3002\u8be5\u6a21\u5757\u5b9e\u73b0\u76f8\u5e94CPython\u6a21\u5757\u7684\u5b50\u96c6\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605\u9605CPython\u6587\u6863\uff1a socket usocket.socket(af=AF_INET, type=SOCK_STREAM, proto=IPPROTO_TCP) \u6839\u636e\u7ed9\u5b9a\u7684\u5730\u5740\u65cf\u3001\u5957\u63a5\u5b57\u7c7b\u578b\u4ee5\u53ca\u534f\u8bae\u7c7b\u578b\u53c2\u6570\uff0c\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5957\u63a5\u5b57\u3002\u6ce8\u610f\uff0c\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u4e0d\u9700\u8981\u6307\u5b9a proto \uff0c\u4e5f\u4e0d\u5efa\u8bae\u8fd9\u6837\u505a\uff0c\u56e0\u4e3a\u67d0\u4e9bMicroPython\u7aef\u53e3\u53ef\u80fd\u4f1a\u7701\u7565 IPPROTO_* \u5e38\u91cf\u3002 \u5e38\u91cf\u8bf4\u660e af - \u5730\u5740\u65cf usocket.AF_INET \uff1aIPV4 usocket.AF_INET6 \uff1aIPV6 type - socket\u7c7b\u578b usocket.SOCK_STREAM \uff1a\u5bf9\u5e94TCP\u7684\u6d41\u5f0f\u5957\u63a5\u5b57 usocket.SOCK_DGRAM \uff1a\u5bf9\u5e94UDP\u7684\u6570\u636e\u5305\u5957\u63a5\u5b57 usocket.SOCK_RAW \uff1a\u539f\u59cb\u5957\u63a5\u5b57 proto - \u534f\u8bae\u53f7 usocket.IPPROTO_TCP usocket.IPPROTO_UDP \u5176\u4ed6 usocket.SOL_SOCKET - \u5957\u63a5\u5b57\u9009\u9879\u7ea7\u522b\uff0c usocket.SO_REUSEADDR - \u5141\u8bb8\u7ed1\u5b9a\u5730\u5740\u5feb\u901f\u91cd\u7528 \u793a\u4f8b\uff1a import usocket # \u521b\u5efa\u57fa\u4e8eTCP\u7684\u6d41\u5f0f\u5957\u63a5\u5b57 socket = usocket.socket(usocket.AF_INET, usocket.SOCK_STREAM) # \u521b\u5efa\u57fa\u4e8eUDP\u7684\u6570\u636e\u62a5\u5957\u63a5\u5b57 socket = usocket.socket(usocket.AF_INET, usocket.SOCK_DGRAM) usocket.getaddrinfo(host, port) \u5c06\u4e3b\u673a\u57df\u540d\uff08host\uff09\u548c\u7aef\u53e3\uff08port\uff09\u8f6c\u6362\u4e3a\u7528\u4e8e\u521b\u5efa\u5957\u63a5\u5b57\u76845\u5143\u7ec4\u5e8f\u5217\uff0c\u5143\u7ec4\u7ed3\u6784\u5982\u4e0b\uff1a (family, type, proto, canonname, sockaddr) socket\u7c7b\u7684\u65b9\u6cd5 socket.bind(address) \u7ed1\u5b9a\u5730\u5740address\u3002\u5728\u6b64\u4e4b\u524d\uff0csocket\u5fc5\u987b\u6ca1\u6709\u7ed1\u5b9a\u8fc7\u3002 address \uff1a\u7531\u5730\u5740\u7aef\u53e3\u53f7\u7ec4\u6210\u7684\u5217\u8868\u6216\u8005\u5143\u7ec4 \u793a\u4f8b\uff1a addr = ('127.0.0.1', 6000) socket.bind(addr) socket.listen(backlog) \u5141\u8bb8\u670d\u52a1\u7aef\u63a5\u53d7\u8fde\u63a5\uff0c\u53ef\u6307\u5b9a\u6700\u5927\u8fde\u63a5\u6570\u3002 backlog \uff1a\u63a5\u53d7\u5957\u63a5\u5b57\u7684\u6700\u5927\u4e2a\u6570\uff0c\u81f3\u5c11\u4e3a0\u3002 socket.accept() \u63a5\u53d7\u8fde\u63a5\u8bf7\u6c42\uff0c\u8fd4\u56de\u5143\u7ec4\uff0c\u5305\u542b\u65b0\u7684\u5957\u63a5\u5b57\u548c\u5ba2\u6237\u7aef\u5730\u5740\uff0c\u5f62\u5f0f\u4e3a\uff1a (conn, address) conn \uff1a\u65b0\u7684\u5957\u63a5\u5b57\u5bf9\u8c61\uff0c\u53ef\u4ee5\u7528\u6765\u53d1\u9001\u548c\u63a5\u6536\u6570\u636e address \uff1a\u8fde\u63a5\u5230\u670d\u52a1\u5668\u7684\u5ba2\u6237\u7aef\u5730\u5740 socket.connect(address) \u8fde\u63a5\u5230\u6307\u5b9a\u5730\u5740address\u7684\u670d\u52a1\u5668\u3002 address \uff1a\u5305\u542b\u5730\u5740\u548c\u7aef\u53e3\u53f7\u7684\u5143\u7ec4\u6216\u5217\u8868 socket.read( [ size ] ) \u4ece\u5957\u63a5\u5b57\u4e2d\u8bfb\u53d6size\u5b57\u8282\u6570\u636e\uff0c\u8fd4\u56de\u4e00\u4e2a\u5b57\u8282\u5bf9\u8c61\u3002\u5982\u679c\u6ca1\u6709\u6307\u5b9asize\uff0c\u5219\u4f1a\u4ece\u5957\u63a5\u5b57\u8bfb\u53d6\u6240\u6709\u53ef\u8bfb\u6570\u636e\uff0c\u76f4\u5230\u8bfb\u53d6\u5230\u6570\u636e\u7ed3\u675f\uff0c\u6b64\u65f6\u4f5c\u7528\u548c socket.readall() \u76f8\u540c\u3002 socket.readinto(buf, [ , nbytes ]) \u5c06\u5b57\u8282\u8bfb\u53d6\u5230\u7f13\u51b2\u533abuf\u4e2d\u3002\u5982\u679c\u6307\u5b9a\u4e86nbytes\uff0c\u5219\u6700\u591a\u8bfb\u53d6nbytes\u6570\u91cf\u7684\u5b57\u8282\uff1b\u5982\u679c\u6ca1\u6709\u6307\u5b9anbytes\uff0c\u5219\u6700\u591a\u8bfb\u53d6len(buf)\u5b57\u8282\u3002\u8fd4\u56de\u503c\u662f\u5b9e\u9645\u8bfb\u53d6\u7684\u5b57\u8282\u6570\u3002 socket.readline() \u6309\u884c\u8bfb\u53d6\u6570\u636e\uff0c\u9047\u5230\u6362\u884c\u7b26\u7ed3\u675f\uff0c\u8fd4\u56de\u8bfb\u53d6\u7684\u6570\u636e\u884c\u3002 socket.write(buf) \u5199\u5165\u7f13\u51b2\u533a\u7684\u6570\u636e\uff0cbuf\u4e3a\u5f85\u5199\u5165\u7684\u6570\u636e\uff0c\u8fd4\u56de\u5b9e\u9645\u5199\u5165\u7684\u5b57\u8282\u6570\u3002 socket.send(bytes) \u53d1\u9001\u6570\u636e\uff0c\u8fd4\u56de\u5b9e\u9645\u53d1\u9001\u7684\u5b57\u8282\u6570\u3002 bytes \uff1abytes\u578b\u6570\u636e socket.sendall(bytes) \u5c06\u6240\u6709\u6570\u636e\u90fd\u53d1\u9001\u5230\u5957\u63a5\u5b57\u3002\u4e0e send() \u65b9\u6cd5\u4e0d\u540c\u7684\u662f\uff0c\u6b64\u65b9\u6cd5\u5c06\u5c1d\u8bd5\u901a\u8fc7\u4f9d\u6b21\u9010\u5757\u53d1\u9001\u6570\u636e\u6765\u53d1\u9001\u6240\u6709\u6570\u636e\u3002 \u6ce8\u610f\uff1a\u8be5\u65b9\u6cd5\u518d\u975e\u963b\u585e\u5957\u63a5\u5b57\u4e0a\u7684\u884c\u4e3a\u662f\u4e0d\u786e\u5b9a\u7684\uff0c\u5efa\u8bae\u518dMicroPython\u4e2d\uff0c\u4f7f\u7528 write() \u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u5177\u6709\u76f8\u540c\u7684\u201c\u7981\u6b62\u77ed\u5199\u201d\u7b56\u7565\u6765\u963b\u585e\u5957\u63a5\u5b57\uff0c\u5e76\u4e14\u5c06\u8fd4\u56de\u5728\u975e\u963b\u585e\u5957\u63a5\u5b57\u4e0a\u53d1\u9001\u7684\u5b57\u8282\u6570\u3002 bytes \uff1abytes\u578b\u6570\u636e socket.sendto(bytes, address) \u5c06\u6570\u636e\u53d1\u9001\u5230\u5957\u63a5\u5b57\u3002\u8be5\u5957\u63a5\u5b57\u4e0d\u5e94\u8fde\u63a5\u5230\u8fdc\u7a0b\u5957\u63a5\u5b57\uff0c\u56e0\u4e3a\u76ee\u6807\u5957\u63a5\u5b57\u662f\u7531 address \u6307\u5b9a\u7684\u3002 bytes \uff1abytes\u578b\u6570\u636e address \uff1a\u5305\u542b\u5730\u5740\u548c\u7aef\u53e3\u53f7\u7684\u5143\u7ec4\u6216\u5217\u8868 socket.recv(bufsize) \u4ece\u5957\u63a5\u5b57\u63a5\u6536\u6570\u636e\u3002\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u5b57\u8282\u5bf9\u8c61\uff0c\u8868\u793a\u63a5\u6536\u5230\u7684\u6570\u636e\u3002\u4e00\u6b21\u63a5\u6536\u7684\u6700\u5927\u6570\u636e\u91cf\u7531bufsize\u6307\u5b9a\u3002 bufsize \uff1a\u4e00\u6b21\u63a5\u6536\u7684\u6700\u5927\u6570\u636e\u91cf socket.close() \u5c06\u5957\u63a5\u5b57\u6807\u8bb0\u4e3a\u5173\u95ed\u5e76\u91ca\u653e\u6240\u6709\u8d44\u6e90\u3002 socket.recvfrom(bufsize) \u4ece\u5957\u63a5\u5b57\u63a5\u6536\u6570\u636e\u3002\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4\uff0c\u5305\u542b\u5b57\u8282\u5bf9\u8c61\u548c\u5730\u5740\u3002 \u8fd4\u56de\u503c\u5f62\u5f0f\u4e3a\uff1a (bytes, address) bytes \uff1a\u63a5\u6536\u6570\u636e\u7684\u5b57\u8282\u5bf9\u8c61 address \uff1a\u53d1\u9001\u6570\u636e\u7684\u5957\u63a5\u5b57\u7684\u5730\u5740 socket.setsockopt(level, optname, value) \u8bbe\u7f6e\u5957\u63a5\u5b57\u9009\u9879\u7684\u503c\u3002 level \uff1a\u5957\u63a5\u5b57\u9009\u9879\u7ea7\u522b optname \uff1asocket\u9009\u9879 value \uff1a\u65e2\u53ef\u4ee5\u662f\u4e00\u4e2a\u6574\u6570\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u8868\u793a\u7f13\u51b2\u533a\u7684bytes\u7c7b\u5bf9\u8c61 \u793a\u4f8b\uff1a socket.setsockopt(usocket.SOL_SOCKET, usocket.SO_REUSEADDR, 1) socket.setblocking(flag) \u8bbe\u7f6e\u5957\u63a5\u5b57\u4e3a\u963b\u585e\u6a21\u5f0f\u6216\u8005\u975e\u963b\u585e\u6a21\u5f0f\u3002\u5982\u679c\u6807\u5fd7\u4e3afalse\uff0c\u5219\u5c06\u5957\u63a5\u5b57\u8bbe\u7f6e\u4e3a\u975e\u963b\u585e\uff0c\u5426\u5219\u8bbe\u7f6e\u4e3a\u963b\u585e\u6a21\u5f0f\u3002 \u8be5\u65b9\u6cd5\u662f\u67d0\u4e9b settimeout() \u8c03\u7528\u7684\u7b80\u5199\uff1a socket.setblocking(True) \u76f8\u5f53\u4e8e socket.settimeout(None) socket.setblocking(False) \u76f8\u5f53\u4e8e socket.settimeout(0) socket.settimeout(value) \u8bbe\u7f6e\u5957\u63a5\u5b57\u7684\u8d85\u65f6\u65f6\u95f4\uff0c\u5355\u4f4d\u79d2\u3002 value \uff1a\u53ef\u4ee5\u662f\u8868\u793a\u79d2\u7684\u975e\u8d1f\u6d6e\u70b9\u6570\uff0c\u4e5f\u53ef\u4ee5\u662fNone\u3002\u5982\u679c\u7ed9\u51fa\u4e00\u4e2a\u975e\u96f6\u503c\uff0c\u5219 OSError \u5728\u8be5\u64cd\u4f5c\u5b8c\u6210\u4e4b\u524d\u5df2\u8d85\u8fc7\u8d85\u65f6\u65f6\u95f4\u503c\uff0c\u5219\u968f\u540e\u7684\u5957\u63a5\u5b57\u64cd\u4f5c\u5c06\u5f15\u53d1\u5f02\u5e38\u3002\u5982\u679c\u7ed9\u5b9a\u96f6\uff0c\u5219\u5c06\u5957\u63a5\u5b57\u7f6e\u4e8e\u975e\u963b\u585e\u6a21\u5f0f\u3002\u5982\u679c\u672a\u6307\u5b9a\uff0c\u5219\u5957\u63a5\u5b57\u5c06\u5904\u4e8e\u963b\u585e\u6a21\u5f0f\u3002 socket.makefile(mode='rb') \u8fd4\u56de\u4e0e\u5957\u63a5\u5b57\u5173\u8054\u7684\u6587\u4ef6\u5bf9\u8c61\uff0c\u8fd4\u56de\u503c\u7c7b\u578b\u4e0e\u6307\u5b9a\u7684\u53c2\u6570\u6709\u5173\u3002\u4ec5\u652f\u6301\u4e8c\u8fdb\u5236\u6a21\u5f0f (rb\u548cwb)\u3002 socket\u901a\u4fe1\u793a\u4f8b \uff1a # \u5ba2\u6237\u7aef\u793a\u4f8b import usocket client = usocket.socket(usocket.AF_INET, usocket.SOCK_STREAM) sockaddr = usocket.getaddrinfo('www.tongxinmao.com',80)[0][-1] client.connect(sockaddr) while True: re_data = input() client.send(re_data.encode(\"utf8\")) data = client.recv(1024) print(data.decode(\"utf8\")) uio - \u8f93\u5165\u8f93\u51fa\u6d41 uio \u6a21\u5757\u5305\u542b\u5176\u4ed6\u7c7b\u578b\u7684stream\uff08\u7c7b\u6587\u4ef6\uff09\u5bf9\u8c61\u548c\u8f85\u52a9\u51fd\u6570\u3002\u8be5\u6a21\u5757\u5b9e\u73b0\u76f8\u5e94CPython\u6a21\u5757\u7684\u5b50\u96c6\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605\u9605CPython\u6587\u6863\uff1a io fd = uio.open(name, mode=\u2019r\u2019, **kwarg) \u6253\u5f00\u6587\u4ef6\uff0c\u5185\u7f6e open() \u51fd\u6570\u662f\u8be5\u51fd\u6570\u7684\u522b\u540d\u3002 name \uff1a\u6587\u4ef6\u540d mode \uff1a\u6253\u5f00\u6a21\u5f0f r \u53ea\u8bfb\u6a21\u5f0f\u6253\u5f00\u6587\u4ef6 w \u5199\u5165\u6a21\u5f0f\u6253\u5f00\u6587\u4ef6\uff0c\u6bcf\u6b21\u5199\u5165\u4f1a\u8986\u76d6\u4e0a\u6b21\u5199\u5165\u6570\u636e a \u53ea\u5199\u8ffd\u52a0\u6a21\u5f0f\u6253\u5f00\u6587\u4ef6\uff0c\u53ef\u8fde\u7eed\u5199\u5165\u6587\u4ef6\u6570\u636e\u800c\u4e0d\u662f\u8986\u76d6\u6570\u636e **kwarg \uff1a\u53ef\u53d8\u957f\u53c2\u6570\u5217\u8868 fd.close() \u5173\u95ed\u6253\u5f00\u7684\u6587\u4ef6\u3002 ustruct - \u6253\u5305\u548c\u89e3\u538b\u539f\u59cb\u6570\u636e\u7c7b\u578b \u8be5\u6a21\u5757\u5b9e\u73b0\u76f8\u5e94CPython\u6a21\u5757\u7684\u5b50\u96c6\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605\u9605CPython\u6587\u6863\uff1a struct \u5b57\u8282\u987a\u5e8f\uff0c\u5927\u5c0f\u548c\u5bf9\u9f50\u65b9\u5f0f \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cC\u7c7b\u578b\u4ee5\u673a\u5668\u7684\u672c\u673a\u683c\u5f0f\u548c\u5b57\u8282\u987a\u5e8f\u8868\u793a\uff0c\u5e76\u5728\u5fc5\u8981\u65f6\u901a\u8fc7\u8df3\u8fc7\u586b\u5145\u5b57\u8282\u6765\u6b63\u786e\u5bf9\u9f50\uff08\u6839\u636eC\u7f16\u8bd1\u5668\u4f7f\u7528\u7684\u89c4\u5219\uff09\u3002\u6839\u636e\u4e0b\u8868\uff0c\u683c\u5f0f\u5b57\u7b26\u4e32\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u53ef\u7528\u4e8e\u6307\u793a\u6253\u5305\u6570\u636e\u7684\u5b57\u8282\u987a\u5e8f\uff0c\u5927\u5c0f\u548c\u5bf9\u9f50\u65b9\u5f0f\uff1a Character Byte order Size Alignment @ native native native = native standard none < little-endian standard none > big-endian standard none ! network (= big-endian) standard none \u683c\u5f0f\u5316\u5b57\u7b26\u8868 Format C Type Python type Standard size x pad byte no value c char bytes of length 1 1 b signed char integer 1 B unsigned char integer 1 ? _Bool bool 1 h short integer 2 H unsigned short integer 2 i int integer 4 I unsigned int integer 4 l long integer 4 L unsigned long integer 4 q long long integer 8 Q unsigned long long integer 8 n ssize_t integer N size_t integer f float float 4 d double float 8 s char[] bytes p char[] bytes P void * integer \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cC\u7c7b\u578b\u4ee5\u673a\u5668\u7684\u672c\u673a\u683c\u5f0f\u548c\u5b57\u8282\u987a\u5e8f\u8868\u793a\uff0c\u5e76\u5728\u5fc5\u8981\u65f6\u901a\u8fc7\u8df3\u8fc7\u586b\u5145\u5b57\u8282\u6765\u6b63\u786e\u5bf9\u9f50\uff08\u6839\u636eC\u7f16\u8bd1\u5668\u4f7f\u7528\u7684\u89c4\u5219\uff09 ustruct.calcsize(fmt) \u8fd4\u56de\u5b58\u653e fmt \u9700\u8981\u7684\u5b57\u8282\u6570\u3002 fmt \uff1a\u683c\u5f0f\u5b57\u7b26\u7684\u7c7b\u578b\uff0c\u8be6\u60c5\u89c1\u4e0a\u6587\u683c\u5316\u5f0f\u5b57\u7b26\u8868 \u793a\u4f8b\uff1a >>> import ustruct >>> ustruct.calcsize('i') 4 >>> ustruct.calcsize('f') 4 >>> ustruct.calcsize('d') 8 ustruct.pack(fmt, v1, v2, ...) \u6309\u7167\u683c\u5f0f\u5b57\u7b26\u4e32 fmt \u538b\u7f29\u53c2\u6570v1\u3001 v2\u3001\u2026\u8fd4\u56de\u503c\u662f\u53c2\u6570\u7f16\u7801\u540e\u7684\u5b57\u8282\u5bf9\u8c61\u3002 fmt \uff1a\u683c\u5f0f\u5b57\u7b26\u7684\u7c7b\u578b\uff0c\u8be6\u60c5\u89c1\u4e0a\u6587\u683c\u5316\u5f0f\u5b57\u7b26\u8868 unstrcut.unpack(fmt, data) \u6839\u636e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32 fmt \u5bf9\u6570\u636e\u8fdb\u884c\u89e3\u538b\uff0c\u8fd4\u56de\u503c\u4e3a\u4e00\u4e2a\u5143\u7ec4\u3002 \u793a\u4f8b\uff1a >>> import ustruct >>> ustruct.pack('ii', 7, 9) #\u6253\u53052\u4e24\u4e2a\u6574\u6570 b'\\x07\\x00\\x00\\x00\\t\\x00\\x00\\x00' >>> ustruct.unpack('ii', b'\\x07\\x00\\x00\\x00\\t\\x00\\x00\\x00') #\u89e3\u538b\u4e24\u4e2a\u6574\u6570 (7, 9) ustruct.pack_info(fmt, buffer, offset, v1, v2, ...) \u6839\u636e\u683c\u5f0f\u5b57\u7b26\u4e32fmt\u5c06\u503cv1\u3001v2\u3001 \u2026\u6253\u5305\u5230\u4ece offset \u5f00\u59cb\u7684\u7f13\u51b2\u533a\u4e2d\u3002\u4ece\u7f13\u51b2\u533a\u7684\u672b\u5c3e\u7b97\u8d77\uff0c offset \u53ef\u80fd\u4e3a\u8d1f\u3002 fmt \uff1a\u683c\u5f0f\u5b57\u7b26\u7684\u7c7b\u578b\uff0c\u8be6\u60c5\u89c1\u4e0a\u6587\u683c\u5316\u5f0f\u5b57\u7b26\u8868 unstruct.unpack_from(fmt, data, offset=0) \u6839\u636e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32 fmt \u89e3\u6790\u4ece offest \u5f00\u59cb\u7684\u6570\u636e\u89e3\u538b\uff0c\u4ece\u7f13\u51b2\u533a\u672b\u5c3e\u5f00\u59cb\u8ba1\u6570\u7684\u504f\u79fb\u91cf\u53ef\u80fd\u4e3a\u8d1f\u503c\u3002\u8fd4\u56de\u503c\u662f\u89e3\u538b\u503c\u7684\u5143\u7ec4\u3002 ujson - JSON\u7f16\u7801\u548c\u89e3\u7801 ujson \u6a21\u5757\u5b9e\u73b0\u5728Python\u6570\u636e\u5bf9\u8c61\u548cJSON\u6570\u636e\u683c\u5f0f\u4e4b\u95f4\u8fdb\u884c\u8f6c\u6362\u7684\u529f\u80fd\u3002\u8be5\u6a21\u5757\u5b9e\u73b0\u76f8\u5e94CPython\u6a21\u5757\u7684\u5b50\u96c6\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605\u9605CPython\u6587\u6863\uff1a json ujson.dump(obj, stream) \u5c06 obj \u6570\u636e\u5bf9\u8c61\u8f6c\u5316\u6210 JSON\u5b57\u7b26\u4e32\uff0c\u5c06\u5176\u5199\u5165\u5230\u7ed9\u5b9a\u7684 stream \u4e2d\u3002 ujson.dumps(dict) \u5c06 dict \u7c7b\u578b\u7684\u6570\u636e\u8f6c\u6362\u6210str\u3002 ujson.load(stream) \u89e3\u6790\u7ed9\u5b9a\u7684\u6570\u636e stream \uff0c\u5c06\u5176\u89e3\u91ca\u4e3aJSON\u5b57\u7b26\u4e32\u5e76\u53cd\u5e8f\u5217\u5316\u6210Python\u5bf9\u8c61\u3002 ujson.loads(str) \u89e3\u6790JSON\u5b57\u7b26\u4e32\u5e76\u8fd4\u56de obj \u5bf9\u8c61 \u793a\u4f8b\uff1a >>> import ujson >>> msg = ['foo',{'bar':('baz',None,1,2)}] >>> print(msg) ['foo', {'bar': ('baz', None, 1, 2)}] >>> s = ujson.dumps(msg) >>> print(s) [\"foo\", {\"bar\": [\"baz\", null, 1, 2]}] >>> s1 = ujson.loads(s) >>> print(s1) ['foo', {'bar': ['baz', None, 1, 2]}] utime - \u4e0e\u65f6\u95f4\u76f8\u5173\u529f\u80fd utime \u6a21\u5757\u7528\u4e8e\u83b7\u53d6\u5f53\u524d\u65f6\u95f4\u548c\u65e5\u671f\u3001\u6d4b\u91cf\u65f6\u95f4\u95f4\u9694\u548c\u5ef6\u8fdf\u3002\u8be5\u6a21\u5757\u5b9e\u73b0\u76f8\u5e94CPython\u6a21\u5757\u7684\u5b50\u96c6\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605\u9605CPython\u6587\u6863\uff1a time utime.localtime([secs]) \u8be5\u51fd\u6570\u7528\u6765\u5c06\u4e00\u4e2a\u4ee5\u79d2\u8868\u793a\u7684\u65f6\u95f4\u8f6c\u6362\u4e3a\u4e00\u4e2a\u5143\u7ec4\uff0c\u5143\u7ec4\u5305\u542b\u4e86\u4e86\u5e74\u3001\u6708\u3001\u65e5\u3001\u65f6\u3001\u5206\u3001\u79d2\u3001\u661f\u671f\u3001\u4e00\u5e74\u4e2d\u7b2c\u51e0\u5929\uff1b\u5982\u679c\u6ca1\u6709\u7ed9\u5b9a\u53c2\u6570sec\uff0c\u5219\u4f7f\u7528RTC\u65f6\u95f4\u3002\u8fd4\u56de\u503c\u5f62\u5f0f\u5982\u4e0b\uff1a (year, month, mday, hour, minute, second, weekday, yearday) year \uff1a\u5e74\u4efd\uff0cint\u578b month \uff1a\u6708\u4efd\uff0c1~12\uff0cint\u578b mday \uff1a\u65e5\uff0c\u5f53\u6708\u591a\u5c11\u53f7\uff0c1~31\uff0cint\u578b hour \uff1a\u5c0f\u65f6\uff0c0~23\uff0cint\u578b minute \uff1a\u5206\u949f\uff0c0~59\uff0cint\u578b second \uff1a\u79d2\uff0c0~59\uff0cint\u578b weekday \uff1a\u661f\u671f\uff0c\u5468\u4e00\u5230\u5468\u65e5\u662f0~6\uff0cint\u578b yearday \uff1a\u4e00\u5e74\u4e2d\u7684\u7b2c\u591a\u5c11\u5929\uff0cint\u578b \u793a\u4f8b\uff1a >>> import utime >>> utime.localtime() (2020, 9, 29, 8, 54, 42, 1, 273) >>> utime.localtime(646898736) (2020, 7, 1, 6, 5, 36, 2, 183) utime.mktime(date) \u8be5\u51fd\u6570\u4f5c\u7528\u4e0elocatime()\u76f8\u53cd\uff0c\u5b83\u5c06\u4e00\u4e2a\u5b58\u653e\u5728\u5143\u7ec4\u4e2d\u7684\u65f6\u95f4\u8f6c\u6362\u4e3a\u4ee5\u79d2\u8ba1\u7684\u65f6\u95f4\u6233\u3002 \u793a\u4f8b\uff1a >>> import utime >>> date = (2020, 9, 29, 8, 54, 42, 1, 273) >>> utime.mktime(date) 1601340882 utime.sleep(seconds) \u4f11\u7720\u7ed9\u5b9a\u79d2\u6570\u7684\u65f6\u95f4\u3002 \u6ce8\u610f\uff1asleep()\u51fd\u6570\u7684\u8c03\u7528\u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u4f11\u7720\u963b\u585e\u3002 utime.sleep_ms(ms) \u4f11\u7720\u7ed9\u5b9a\u6beb\u79d2\u6570\u7684\u65f6\u95f4\u3002 \u6ce8\u610f\uff1asleep_ms()\u51fd\u6570\u7684\u8c03\u7528\u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u4f11\u7720\u963b\u585e\u3002 utime.sleep_us(us) \u4f11\u7720\u7ed9\u5b9a\u5fae\u79d2\u7684\u65f6\u95f4\u3002 \u6ce8\u610f\uff1asleep_us()\u51fd\u6570\u7684\u8c03\u7528\u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u4f11\u7720\u963b\u585e\u3002 utime.ticks_ms() \u8fd4\u56de\u4e0d\u65ad\u9012\u589e\u7684\u6beb\u79d2\u8ba1\u6570\u5668\uff0c\u5728\u67d0\u4e9b\u503c\u540e\u4f1a\u91cd\u65b0\u8ba1\u6570(\u672a\u6307\u5b9a)\u3002\u8ba1\u6570\u503c\u672c\u8eab\u65e0\u7279\u5b9a\u610f\u4e49\uff0c\u53ea\u9002\u5408\u7528\u5728 ticks_diff() \u51fd\u6570\u4e2d\u3002 \u6ce8\u610f\uff1asleep_us()\u51fd\u6570\u7684\u8c03\u7528\u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u4f11\u7720\u963b\u585e\u3002 utime.ticks_us() \u548c ticks_ms() \u7c7b\u4f3c\uff0c\u53ea\u662f\u8fd4\u56de\u5fae\u79d2\u8ba1\u6570\u5668\u3002 utime.ticks_cpu() \u548c ticks_ms/ticks_us \u7c7b\u4f3c\uff0c\u5177\u6709\u66f4\u9ad8\u7cbe\u5ea6 (\u4f7f\u7528 CPU \u65f6\u949f)\u3002 utime.ticks_diff(old, new) \u8ba1\u7b97\u4e24\u6b21\u8c03\u7528 ticks_ms() \uff0c ticks_us() \uff0c\u6216 ticks_cpu() \u4e4b\u95f4\u7684\u65f6\u95f4\u3002\u56e0\u4e3a\u8fd9\u4e9b\u51fd\u6570\u7684\u8ba1\u6570\u503c\u53ef\u80fd\u4f1a\u56de\u7ed5\uff0c\u6240\u4ee5\u4e0d\u80fd\u76f4\u63a5\u76f8\u51cf\uff0c\u9700\u8981\u4f7f\u7528 ticks_diff() \u51fd\u6570\u3002\u201c\u65e7\u201d \u65f6\u95f4\u9700\u8981\u5728 \u201c\u65b0\u201d \u65f6\u95f4\u4e4b\u524d\uff0c\u5426\u5219\u7ed3\u679c\u65e0\u6cd5\u786e\u5b9a\u3002\u8fd9\u4e2a\u51fd\u6570\u4e0d\u8981\u7528\u5728\u8ba1\u7b97\u5f88\u957f\u7684\u65f6\u95f4 (\u56e0\u4e3a ticks_*() \u51fd\u6570\u4f1a\u56de\u7ed5\uff0c\u901a\u5e38\u5468\u671f\u4e0d\u662f\u5f88\u957f)\u3002\u901a\u5e38\u7528\u6cd5\u662f\u5728\u5e26\u8d85\u65f6\u7684\u8f6e\u8be2\u4e8b\u4ef6\u4e2d\u8c03\u7528\u3002 \u793a\u4f8b\uff1a import utime start = utime.ticks_us() while pin.value() == 0: if utime.ticks_diff(time.ticks_us(), start) > 500: raise TimeoutError utime.time() \u8fd4\u56de\u81ea\u7eaa\u5143\u4ee5\u6765\u7684\u79d2\u6570\uff08\u4ee5\u6574\u6570\u5f62\u5f0f\uff09\u3002\u5982\u679c\u672a\u8bbe\u7f6eRTC\uff0c\u5219\u6b64\u51fd\u6570\u8fd4\u56de\u81ea\u7279\u5b9a\u4e8e\u7aef\u53e3\u7684\u53c2\u8003\u65f6\u95f4\u70b9\u4ee5\u6765\u7684\u79d2\u6570\uff08\u5bf9\u4e8e\u4e0d\u5177\u6709\u7535\u6c60\u540e\u5907RTC\u7684\u5d4c\u5165\u5f0f\u677f\uff0c\u901a\u5e38\u662f\u7531\u4e8e\u52a0\u7535\u6216\u590d\u4f4d\uff09\u3002\u5982\u679c\u8981\u5f00\u53d1\u53ef\u79fb\u690d\u7684MicroPython\u5e94\u7528\u7a0b\u5e8f\uff0c\u5219\u4e0d\u5e94\u4f9d\u8d56\u6b64\u529f\u80fd\u63d0\u4f9b\u9ad8\u4e8e\u79d2\u7684\u7cbe\u5ea6\u3002\u5982\u679c\u9700\u8981\u66f4\u9ad8\u7684\u7cbe\u5ea6\uff0c\u8bf7\u4f7f\u7528 ticks_ms() \u548c ticks_us() \u51fd\u6570\uff0c\u5982\u679c\u9700\u8981\u65e5\u5386\u65f6\u95f4\uff0c\u5219 localtime() \u4e0d\u5e26\u53c2\u6570\u4f1a\u66f4\u597d\u3002 sys - \u7cfb\u7edf\u76f8\u5173\u529f\u80fd sys \u6a21\u5757\u4e2d\u63d0\u4f9b\u4e86\u4e0eQuecPython\u8fd0\u884c\u73af\u5883\u6709\u5173\u7684\u51fd\u6570\u548c\u53d8\u91cf\u3002\u8be5\u6a21\u5757\u5b9e\u73b0\u76f8\u5e94CPython\u6a21\u5757\u7684\u5b50\u96c6\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605\u9605CPython\u6587\u6863\uff1a sys \u5e38\u6570\u8bf4\u660e sys.argv \u5f53\u524d\u7a0b\u5e8f\u542f\u52a8\u7684\u53ef\u53d8\u53c2\u6570\u5217\u8868\u3002 sys.byteorder \u5b57\u8282\u987a\u5e8f (\u2018little\u2019 - \u5c0f\u7aef\uff0c \u2018big\u2019 - \u5927\u7aef)\u3002 sys.implementation \u8fd4\u56de\u5f53\u524dmicroPython\u7248\u672c\u4fe1\u606f\u3002\u5bf9\u4e8eMicroPython\uff0c\u5b83\u5177\u6709\u4ee5\u4e0b\u5c5e\u6027\uff1a name - \u5b57\u7b26\u4e32\u201c micropython\u201d version - \u5143\u7ec4\uff08\u4e3b\u8981\uff0c\u6b21\u8981\uff0c\u5fae\u578b\uff09\uff0c\u4f8b\u5982\uff081\u30017\u30010\uff09 \u5efa\u8bae\u4f7f\u7528\u6b64\u5bf9\u8c61\u6765\u5c06MicroPython\u4e0e\u5176\u4ed6Python\u5b9e\u73b0\u533a\u5206\u5f00\u3002 sys.maxsize \u672c\u673a\u6574\u6570\u7c7b\u578b\u53ef\u4ee5\u5728\u5f53\u524d\u5e73\u53f0\u4e0a\u4fdd\u7559\u7684\u6700\u5927\u503c\uff0c\u5982\u679c\u5b83\u5c0f\u4e8e\u5e73\u53f0\u6700\u5927\u503c\uff0c\u5219\u4e3aMicroPython\u6574\u6570\u7c7b\u578b\u8868\u793a\u7684\u6700\u5927\u503c\uff08\u5bf9\u4e8e\u4e0d\u652f\u6301\u957f\u6574\u578b\u7684MicroPython\u7aef\u53e3\u5c31\u662f\u8fd9\u79cd\u60c5\u51b5\uff09\u3002 sys.modules \u5df2\u8f7d\u5165\u6a21\u5757\u7684\u5b57\u5178\u3002 sys.platform MicroPython\u8fd0\u884c\u7684\u5e73\u53f0\u3002 sys.stdin \u6807\u51c6\u8f93\u5165\uff08\u9ed8\u8ba4\u662fUSB\u865a\u62df\u4e32\u53e3\uff0c\u53ef\u9009\u5176\u4ed6\u4e32\u53e3\uff09\u3002 sys.stdout \u6807\u51c6\u8f93\u51fa\uff08\u9ed8\u8ba4\u662fUSB\u865a\u62df\u4e32\u53e3\uff0c\u53ef\u9009\u5176\u4ed6\u4e32\u53e3\uff09\u3002 sys.version MicroPython \u8bed\u8a00\u7248\u672c\uff0c\u5b57\u7b26\u4e32\u683c\u5f0f\u3002 sys.version_info MicroPython \u8bed\u8a00\u7248\u672c\uff0c\u6574\u6570\u5143\u7ec4\u683c\u5f0f\u3002 \u65b9\u6cd5 sys.exit(retval=0) \u4f7f\u7528\u7ed9\u5b9a\u7684\u53c2\u6570\u9000\u51fa\u5f53\u524d\u7a0b\u5e8f\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u8be5\u51fd\u6570\u4f1a\u5f15\u53d1 SystemExit \u9000\u51fa\u3002\u5982\u679c\u7ed9\u5b9a\u4e86\u53c2\u6570\uff0c\u5219\u5c06\u5176\u503c\u4f5c\u4e3a\u53c2\u6570\u8d4b\u503c\u7ed9 SystemExit \u3002 sys.print_exception(exc, file=sys.stdout) \u6253\u5370\u5f02\u5e38\u5230\u6587\u4ef6\u5bf9\u8c61\uff0c\u9ed8\u8ba4\u662f sys.stdout\uff0c\u5373\u8f93\u51fa\u5f02\u5e38\u4fe1\u606f\u7684\u6807\u51c6\u8f93\u51fa\u3002 uzlib - zlib\u89e3\u538b\u7f29 uzlib \u6a21\u5757\u89e3\u538b\u7f29\u7528 DEFLATE\u7b97\u6cd5 \u538b\u7f29\u7684\u4e8c\u8fdb\u5236\u6570\u636e \uff08\u901a\u5e38\u5728zlib\u5e93\u548cgzip\u5b58\u6863\u5668\u4e2d\u4f7f\u7528\uff09\uff0c\u538b\u7f29\u5c1a\u672a\u5b9e\u73b0\u3002\u8be5\u6a21\u5757\u5b9e\u73b0\u76f8\u5e94CPython\u6a21\u5757\u7684\u5b50\u96c6\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605\u9605CPython\u6587\u6863\uff1a zlib \u6ce8\u610f\uff1a\u89e3\u538b\u7f29\u524d\uff0c\u5e94\u68c0\u67e5\u6a21\u5757\u5185\u53ef\u4f7f\u7528\u7684\u7a7a\u95f4\uff0c\u786e\u4fdd\u6709\u8db3\u591f\u7a7a\u95f4\u89e3\u538b\u6587\u4ef6\u3002 uzlib.decompress(data, wbits=0, bufsize=0) \u8fd4\u56de\u89e3\u538b\u540e\u7684 bytes \u5bf9\u8c61\u3002 wbits \u662f\u89e3\u538b\u65f6\u4f7f\u7528\u7684DEFLATE\u5b57\u5178\u7a97\u53e3\u5927\u5c0f\uff088-15\uff0c\u5b57\u5178\u5927\u5c0f\u662f wbits \u503c\u76842\u7684\u5e42\uff09\u3002\u5982\u679c\u8be5\u503c\u4e3a\u6b63\uff0c\u5219\u5047\u5b9a data \u4e3azlib\u6d41\uff08\u5e26\u6709zlib\u6807\u5934\uff09\uff0c\u5982\u679c\u4e3a\u8d1f\uff0c\u5219\u5047\u5b9a\u4e3a\u539f\u59cb\u7684DEFLATE\u6d41\u3002 bufsize \u53c2\u6570\u662f\u4e3a\u4e86\u4e0eCPython\u517c\u5bb9\uff0c\u5c06\u88ab\u5ffd\u7565\u3002 class uzlib.DecompIO(stream, wbits=0) \u521b\u5efa\u4e00\u4e2a stream \u88c5\u9970\u5668\uff0c\u8be5\u88c5\u9970\u5668\u5141\u8bb8\u5728\u53e6\u4e00\u4e2a\u6d41\u4e2d\u900f\u660e\u5730\u538b\u7f29\u6570\u636e\u3002\u8fd9\u5141\u8bb8\u5904\u7406\u6570\u636e\u5927\u4e8e\u53ef\u7528\u5806\u5927\u5c0f\u7684\u538b\u7f29\u6d41\u3002wbits\u7684\u503c\u9664\u4e86\u4e0a\u9762\u6240\u8ff0\u7684\u503c\u4ee5\u5916\uff0c\u8fd8\u53ef\u4ee5\u53d6\u503c24..31\uff0816 + 8..15\uff09\uff0c\u8fd9\u8868\u793a\u8f93\u5165\u6d41\u5177\u6709gzip\u6807\u5934\u3002 _thread - \u591a\u7ebf\u7a0b _thread \u6a21\u5757\u63d0\u4f9b\u521b\u5efa\u65b0\u7ebf\u7a0b\u7684\u65b9\u6cd5\uff0c\u5e76\u63d0\u4f9b\u4e92\u65a5\u9501\u3002 _thread.get_ident() \u83b7\u53d6\u5f53\u524d\u7ebf\u7a0b\u53f7\u3002 _thread.get_heap_size() \u83b7\u53d6\u7cfb\u7edf\u5269\u4f59\u5185\u5b58\u5927\u5c0f\u3002 _thread.stack_size(size) \u8bbe\u7f6e\u521b\u5efa\u65b0\u7ebf\u7a0b\u4f7f\u7528\u7684\u6808\u5927\u5c0f\uff08\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\uff09\uff0c\u9ed8\u8ba4\u4e3a8k\u3002 _thread.start_new_thread(function, args) \u521b\u5efa\u4e00\u4e2a\u65b0\u7ebf\u7a0b\uff0c\u63a5\u6536\u6267\u884c\u51fd\u6570\u548c\u88ab\u6267\u884c\u51fd\u6570\u53c2\u6570\u3002 _thread.allocate_lock() \u521b\u5efa\u4e00\u4e2a\u4e92\u65a5\u9501\u5bf9\u8c61\u3002 \u793a\u4f8b\uff1a import _thread lock = _thread.allocate_lock() lock.acquire() \u83b7\u53d6\u9501\uff0c\u6210\u529f\u8fd4\u56deTrue\uff0c\u5426\u5219\u8fd4\u56deFalse\u3002 lock.release() \u91ca\u653e\u9501\u3002 lock.locked() \u8fd4\u56de\u9501\u7684\u72b6\u6001\uff0cTrue\u8868\u793a\u88ab\u67d0\u4e2a\u7ebf\u7a0b\u83b7\u53d6\uff0cFalse\u5219\u8868\u793a\u6ca1\u6709\u3002 _thread\u4f7f\u7528\u793a\u4f8b import _thread a = 0 lock = _thread.allocate_lock() def th_func(delay, id): global a while True: lock.acquire() # \u83b7\u53d6\u9501 if a >= 10: print('thread %d exit' % id) lock.release() # \u91ca\u653e\u9501 break a+=1 print('[thread %d] a is %d' % (id, a)) lock.release() for i in range(2): _thread.start_new_thread(th_func, (i + 1, i)) uhashlib - \u54c8\u5e0c\u7b97\u6cd5 \u6a21\u5757\u529f\u80fd: \u5b9e\u73b0\u4e8c\u8fdb\u5236\u6570\u636e\u6563\u5217\u7b97\u6cd5,\u76ee\u524d\u652f\u6301sha256\uff0csha1\uff0cMD5\u3002 \u200b hash_obj = uhashlib.sha256(bytes) \u521b\u5efa\u4e00\u4e2aSHA256\u54c8\u5e0c\u5bf9\u8c61 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e bytes bytes \u53ef\u9009\u53c2\u6570\uff0c\u53ef\u5728\u521b\u5efa\u65f6\u4f20\u5165bytes\u6570\u636e\uff0c\u4e5f\u53ef\u901a\u8fc7update\u65b9\u6cd5 \u8fd4\u56de\u503c SHA256\u54c8\u5e0c\u5bf9\u8c61 \u200b hash_obj = uhashlib.sha1(bytes) \u521b\u5efa\u4e00\u4e2aSHA1\u54c8\u5e0c\u5bf9\u8c61 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e bytes bytes \u53ef\u9009\u53c2\u6570\uff0c\u53ef\u5728\u521b\u5efa\u65f6\u4f20\u5165bytes\u6570\u636e\uff0c\u4e5f\u53ef\u901a\u8fc7update\u65b9\u6cd5 \u8fd4\u56de\u503c SHA1\u54c8\u5e0c\u5bf9\u8c61 \u200b hash_obj = uhashlib.md5(bytes) \u521b\u5efa\u4e00\u4e2aMD5\u54c8\u5e0c\u5bf9\u8c61 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e bytes bytes \u53ef\u9009\u53c2\u6570\uff0c\u53ef\u5728\u521b\u5efa\u65f6\u4f20\u5165bytes\u6570\u636e\uff0c\u4e5f\u53ef\u901a\u8fc7update\u65b9\u6cd5 \u8fd4\u56de\u503c MD5\u54c8\u5e0c\u5bf9\u8c61 \u54c8\u5e0c\u5bf9\u8c61\u65b9\u6cd5 \u200b hash_obj .update(bytes) \u5c06\u66f4\u591a\u7684bytes\u6570\u636e\u52a0\u5230\u6563\u5217 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e bytes bytes \u9700\u8981\u88ab\u52a0\u5bc6\u7684\u6570\u636e \u8fd4\u56de\u503c \u65e0 \u200b hash_obj .digest() \u8fd4\u56de\u901a\u8fc7\u54c8\u5e0c\u4f20\u9012\u7684\u6240\u6709\u6570\u636e\u7684\u6563\u5217\uff0c\u6570\u636e\u4e3a\u5b57\u8282\u7c7b\u578b\u3002\u8c03\u7528\u6b64\u65b9\u6cd5\u540e\uff0c\u65e0\u6cd5\u518d\u5c06\u66f4\u591a\u7684\u6570\u636e\u9001\u5165\u6563\u5217\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u8fd4\u56de\u52a0\u5bc6\u540e\u5b57\u8282\u7c7b\u578b\u7684\u6570\u636e \u4f7f\u7528\u5b9e\u4f8b import uhashlib import ubinascii hash_obj = uhashlib.sha256() # \u521b\u5efahash\u5bf9\u8c61 hash_obj.update(b\"QuecPython\") res = hash_obj.digest() # b\"\\x1e\\xc6gq\\xb3\\xa9\\xac>\\xa4\\xc4O\\x00\\x9eTW\\x97\\xd4.\\x9e}Bo\\xff\\x82u\\x89Th\\xfe'\\xc6\\xcd\" # \u8f6c\u6210\u5341\u516d\u8fdb\u5236\u8868\u793a hex_msg = ubinascii.hexlify(res) # b'1ec66771b3a9ac3ea4c44f009e545797d42e9e7d426fff8275895468fe27c6cd'","title":"QuecPython\u6807\u51c6\u5e93\u4ecb\u7ecd"},{"location":"QuecPython%E6%A0%87%E5%87%86%E5%BA%93%E4%BB%8B%E7%BB%8D/#quecpython","text":"QuecPython\u6807\u51c6\u5e93","title":"QuecPython\u6807\u51c6\u5e93\u4ecb\u7ecd"},{"location":"QuecPython%E6%A0%87%E5%87%86%E5%BA%93%E4%BB%8B%E7%BB%8D/#uos-","text":"uos\u6a21\u5757\u5305\u542b\u6587\u4ef6\u7cfb\u7edf\u8bbf\u95ee\u548c\u6302\u8f7d\u6784\u5efa\uff0c\u8be5\u6a21\u5757\u5b9e\u73b0\u4e86CPython\u6a21\u5757\u76f8\u5e94\u6a21\u5757\u7684\u5b50\u96c6\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605\u9605CPython\u6587\u6863\uff1a os uos.remove(path) \u5220\u9664\u6587\u4ef6\u3002path\u8868\u793a\u6587\u4ef6\u540d\u3002 uos.chdir(path) \u6539\u53d8\u5f53\u524d\u76ee\u5f55\u3002path\u8868\u793a\u76ee\u5f55\u540d\u3002 uos.getcwd() \u83b7\u53d6\u5f53\u524d\u8def\u5f84\u3002 uos.listdir( [dir] ) \u6ca1\u6709\u53c2\u6570\u5217\u51fa\u5f53\u524d\u76ee\u5f55\u6587\u4ef6\uff0c\u5426\u5219\u5217\u51fa\u7ed9\u5b9a\u76ee\u5f55\u7684\u6587\u4ef6\u3002dir\u4e3a\u53ef\u9009\u53c2\u6570\uff0c\u8868\u793a\u76ee\u5f55\u540d\uff0c\u9ed8\u8ba4\u4e3a \u2018/\u2019 \u76ee\u5f55\u3002 \u793a\u4f8b\uff1a >>> uos.listdir() [\u2018file1\u2019, \u2018read.txt\u2019, \u2018demo.py\u2019] uos.mkdir(path) \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u76ee\u5f55\u3002path\u8868\u793a\u51c6\u5907\u521b\u5efa\u7684\u76ee\u5f55\u540d\u3002 \u793a\u4f8b\uff1a >>> uos.mkdir('testdir') >>> uos.listdir() [\u2018file1\u2019, \u2018read.txt\u2019, \u2018demo.py\u2019, 'testdir'] uos.rename(old_path, new_path) \u91cd\u547d\u540d\u6587\u4ef6\u3002old_path\u8868\u793a\u65e7\u6587\u4ef6\u6216\u76ee\u5f55\u540d\uff0cnew_path\u8868\u793a\u65b0\u6587\u4ef6\u6216\u76ee\u5f55\u540d\u3002 \u793a\u4f8b\uff1a >>> uos.rename('testdir', 'testdir1') uos.rmdir(path) \u5220\u9664\u6307\u5b9a\u76ee\u5f55\u3002path\u8868\u793a\u76ee\u5f55\u540d\u3002 \u793a\u4f8b\uff1a >>> uos.rmdir('testdir') >>> uos.listdir() [\u2018file1\u2019, \u2018read.txt\u2019, \u2018demo.py\u2019] uos.ilistdir( [dir] ) \u8be5\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u8be5\u8fed\u4ee3\u5668\u4f1a\u751f\u6210\u6240\u5217\u51fa\u6761\u76ee\u5bf9\u5e94\u76843\u5143\u7ec4\u3002dir\u4e3a\u53ef\u9009\u53c2\u6570\uff0c\u8868\u793a\u76ee\u5f55\u540d\uff0c\u6ca1\u6709\u53c2\u6570\u65f6\uff0c\u9ed8\u8ba4\u5217\u51fa\u5f53\u524d\u76ee\u5f55\uff0c\u6709\u53c2\u6570\u65f6\uff0c\u5219\u5217\u51fadir\u53c2\u6570\u6307\u5b9a\u7684\u76ee\u5f55\u3002\u5143\u7ec4\u7684\u5f62\u5f0f\u4e3a (name, type, inode[, size]) : name \u662f\u6761\u76ee\u7684\u540d\u79f0\uff0c\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u5982\u679cdir\u662f\u5b57\u8282\u5bf9\u8c61\uff0c\u5219\u540d\u79f0\u4e3a\u5b57\u8282; type \u662f\u6761\u76ee\u7684\u7c7b\u578b\uff0c\u6574\u578b\u6570\uff0c0x4000\u8868\u793a\u76ee\u5f55\uff0c0x8000\u8868\u793a\u5e38\u89c4\u6587\u4ef6\uff1b \u662f\u4e00\u4e2a\u4e0e\u6587\u4ef6\u7684\u7d22\u5f15\u8282\u70b9\u76f8\u5bf9\u5e94\u7684\u6574\u6570\uff0c\u5bf9\u4e8e\u6ca1\u6709\u8fd9\u79cd\u6982\u5ff5\u7684\u6587\u4ef6\u7cfb\u7edf\u6765\u8bf4\uff0c\u53ef\u80fd\u4e3a0\uff1b \u4e00\u4e9b\u5e73\u53f0\u53ef\u80fd\u4f1a\u8fd4\u56de\u4e00\u4e2a4\u5143\u7ec4\uff0c\u5176\u4e2d\u5305\u542b\u6761\u76ee\u7684size\u3002\u5bf9\u4e8e\u6587\u4ef6\u6761\u76ee\uff0csize\u8868\u793a\u6587\u4ef6\u5927\u5c0f\u7684\u6574\u6570\uff0c\u5982\u679c\u672a\u77e5\uff0c\u5219\u4e3a-1\u3002\u5bf9\u4e8e\u76ee\u5f55\u9879\uff0c\u5176\u542b\u4e49\u76ee\u524d\u5c1a\u672a\u5b9a\u4e49\u3002 uos.stat(path) \u83b7\u53d6\u6587\u4ef6\u6216\u76ee\u5f55\u7684\u72b6\u6001\u3002path\u8868\u793a\u6587\u4ef6\u6216\u76ee\u5f55\u540d\u3002\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u5143\u7ec4\uff0c\u8fd4\u56de\u503c\u5f62\u5f0f\u4e3a\uff1a (mode, ino, dev, nlink, uid, gid, size, atime, mtime, ctime) mode \u2013 inode\u4fdd\u62a4\u6a21\u5f0f ino \u2013 inode\u8282\u70b9\u53f7 dev \u2013 inode\u9a7b\u7559\u7684\u8bbe\u5907 nlink \u2013 inode\u7684\u94fe\u63a5\u6570 uid \u2013 \u6240\u6709\u8005\u7684\u7528\u6237ID gid \u2013 \u6240\u6709\u8005\u7684\u7ec4ID size \u2013 \u6587\u4ef6\u5927\u5c0f\uff0c\u5355\u4f4d\u5b57\u8282 atime \u2013 \u4e0a\u6b21\u8bbf\u95ee\u7684\u65f6\u95f4 mtime \u2013 \u6700\u540e\u4e00\u6b21\u4fee\u6539\u7684\u65f6\u95f4 ctime \u2013 \u64cd\u4f5c\u7cfb\u7edf\u62a5\u544a\u7684\u201cctime\u201d\uff0c\u5728\u67d0\u4e9b\u7cfb\u7edf\u4e0a\u662f\u6700\u65b0\u7684\u5143\u6570\u636e\u66f4\u6539\u7684\u65f6\u95f4\uff0c\u5728\u5176\u5b83\u7cfb\u7edf\u4e0a\u662f\u521b\u5efa\u65f6\u95f4\uff0c\u8be6\u7ec6\u4fe1\u606f\u53c2\u89c1\u5e73\u53f0\u6587\u6863 uos.statvfs(path) \u83b7\u53d6\u6587\u4ef6\u7cfb\u7edf\u72b6\u6001\u4fe1\u606f\u3002path\u8868\u793a\u6587\u4ef6\u6216\u76ee\u5f55\u540d\u3002\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u6587\u4ef6\u7cfb\u7edf\u4fe1\u606f\u7684\u5143\u7ec4\uff1a (f_bsize, f_frsize, f_blocks, f_bfree, f_bavail, f_files, f_ffree, f_favail, f_flag, f_namemax) f_bsize \u2013 \u6587\u4ef6\u7cfb\u7edf\u5757\u5927\u5c0f\uff0c\u5355\u4f4d\u5b57\u8282 f_frsize \u2013 \u5206\u6808\u5927\u5c0f\uff0c\u5355\u4f4d\u5b57\u8282 f_blocks \u2013 \u6587\u4ef6\u7cfb\u7edf\u6570\u636e\u5757\u603b\u6570 f_bfree \u2013 \u53ef\u7528\u5757\u6570 f_bavai \u2013 \u975e\u8d85\u7ea7\u7528\u6237\u53ef\u83b7\u53d6\u7684\u5757\u6570 f_files \u2013 \u6587\u4ef6\u7ed3\u70b9\u603b\u6570 f_ffree \u2013 \u53ef\u7528\u6587\u4ef6\u7ed3\u70b9\u6570 f_favail \u2013 \u8d85\u7ea7\u7528\u6237\u7684\u53ef\u7528\u6587\u4ef6\u7ed3\u70b9\u6570 f_flag \u2013 \u6302\u8f7d\u6807\u8bb0 f_namemax \u2013 \u6700\u5927\u6587\u4ef6\u957f\u5ea6\uff0c\u5355\u4f4d\u5b57\u8282 \u793a\u4f8b\uff1a >>> import uos >>> res = uos.statvfs(\"main.py\") >>> print(res) (4096, 4096, 256, 249, 249, 0, 0, 0, 0, 255) uos.uname() \u83b7\u53d6\u5173\u4e8e\u5e95\u5c42\u4fe1\u606f\u6216\u5176\u64cd\u4f5c\u7cfb\u7edf\u7684\u4fe1\u606f\u3002\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4\uff0c\u5f62\u5f0f\u4e3a\uff1a (sysname, nodename, release, version, machine) sysname \u2013 \u5e95\u5c42\u7cfb\u7edf\u7684\u540d\u79f0\uff0cstring\u7c7b\u578b nodename \u2013 \u7f51\u7edc\u540d\u79f0(\u53ef\u4ee5\u4e0e sysname \u76f8\u540c) \uff0cstring\u7c7b\u578b release \u2013 \u5e95\u5c42\u7cfb\u7edf\u7684\u7248\u672c\uff0cstring\u7c7b\u578b version \u2013 MicroPython\u7248\u672c\u548c\u6784\u5efa\u65e5\u671f\uff0cstring\u7c7b\u578b machine \u2013 \u5e95\u5c42\u786c\u4ef6(\u5982\u4e3b\u677f\u3001CPU)\u7684\u6807\u8bc6\u7b26\uff0cstring\u7c7b\u578b \u793a\u4f8b\uff1a >>> import uos >>> uos.uname() (sysname='EC100Y', nodename='EC100Y', release='1.12.0', version='v1.12 on 2020-06-23', machine='EC100Y with QUECTEL') uos.urandom(n) \u8fd4\u56de\u5177\u6709 n\u4e2a \u968f\u673a\u5b57\u8282\u7684bytes\u5bf9\u8c61\uff0c\u53ea\u8981\u6709\u53ef\u80fd\uff0c\u5b83\u5c31\u4f1a\u7531\u786c\u4ef6\u968f\u673a\u6570\u751f\u6210\u5668\u751f\u6210\u3002 \u793a\u4f8b\uff1a >>> import uos >>> uos.urandom(5) b'\\xb3\\xc9Y\\x1b\\xe9'","title":"uos - \u57fa\u672c\u7cfb\u7edf\u670d\u52a1"},{"location":"QuecPython%E6%A0%87%E5%87%86%E5%BA%93%E4%BB%8B%E7%BB%8D/#gc-","text":"gc \u6a21\u5757\u5b9e\u73b0\u5185\u5b58\u5783\u573e\u56de\u6536\u673a\u5236\uff0c\u8be5\u6a21\u5757\u5b9e\u73b0\u4e86CPython\u6a21\u5757\u76f8\u5e94\u6a21\u5757\u7684\u5b50\u96c6\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605\u9605CPython\u6587\u6863\uff1a gc gc.enable() \u542f\u7528\u81ea\u52a8\u56de\u6536\u5185\u5b58\u788e\u7247\u673a\u5236\u3002 gc.disable() \u7981\u7528\u81ea\u52a8\u56de\u6536\u673a\u5236\u3002 gc.collect() \u56de\u6536\u5185\u5b58\u788e\u7247\u3002 gc.mem_alloc() \u8fd4\u56de\u5206\u914d\u7684\u5806RAM\u7684\u5b57\u8282\u6570\u3002\u6b64\u529f\u80fd\u662fMicroPython\u6269\u5c55\u3002 gc.mem_free() \u8fd4\u56de\u53ef\u7528\u5806RAM\u7684\u5b57\u8282\u6570\uff0c\u5982\u679c\u6b64\u6570\u91cf\u672a\u77e5\uff0c\u5219\u8fd4\u56de-1\u3002\u6b64\u529f\u80fd\u662fMicroPython\u6269\u5c55\u3002","title":"gc - \u5185\u5b58\u788e\u7247\u56de\u6536"},{"location":"QuecPython%E6%A0%87%E5%87%86%E5%BA%93%E4%BB%8B%E7%BB%8D/#ubinascii-ascii","text":"ubinascii \u6a21\u5757\u5b9e\u73b0\u4e86\u4e8c\u8fdb\u5236\u6570\u636e\u4e0e\u5404\u79cdASCII\u7f16\u7801\u4e4b\u95f4\u7684\u8f6c\u6362(\u53cc\u5411)\uff0c\u8be5\u6a21\u5757\u5b9e\u73b0\u4e86CPython\u6a21\u5757\u76f8\u5e94\u6a21\u5757\u7684\u5b50\u96c6\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605\u9605CPython\u6587\u6863\uff1a binascii ubinascii.a2b_base64(data) \u89e3\u7801base64\u7f16\u7801\u7684\u6570\u636e\uff0c\u4f1a\u81ea\u52a8\u5ffd\u7565\u8f93\u5165\u4e2d\u7684\u65e0\u6548\u5b57\u7b26\uff0c\u8fd4\u56de bytes \u5bf9\u8c61\u3002 ubinascii.b2a_base64(data) \u4ee5base64\u683c\u5f0f\u7f16\u7801\u4e8c\u8fdb\u5236\u6570\u636e\uff0c\u8fd4\u56de\u7f16\u7801\u6570\u636e\u3002\u540e\u9762\u8ddf\u6362\u884c\u7b26\uff0c\u4f5c\u4e3a bytes \u5bf9\u8c61\u3002 ubinascii.hexlify(data, [sep]) \u5c06\u4e8c\u8fdb\u5236\u6570\u636e\u8f6c\u6362\u4e3a\u5341\u516d\u8fdb\u5236\u5b57\u7b26\u4e32\u8868\u793a\u3002 \u793a\u4f8b\uff1a >>> import ubinascii # \u6ca1\u6709sep\u53c2\u6570 >>> ubinascii.hexlify('\\x11\\x22123') b'1122313233' >>> ubinascii.hexlify('abcdfg') b'616263646667' # \u6307\u5b9a\u4e86\u7b2c\u4e8c\u4e2a\u53c2\u6570sep\uff0c\u5b83\u5c06\u7528\u4e8e\u5206\u9694\u4e24\u4e2a\u5341\u516d\u8fdb\u5236\u6570 >>> ubinascii.hexlify('\\x11\\x22123', ' ') b'11 22 31 32 33' >>> ubinascii.hexlify('\\x11\\x22123', ',') b'11,22,31,32,33' ubinascii.unhexlify(data) \u5c06\u5341\u516d\u8fdb\u5236\u5f62\u5f0f\u7684\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u4e8c\u8fdb\u5236\u5f62\u5f0f\u7684\u5b57\u7b26\u4e32\u8868\u793a\u3002 \u793a\u4f8b\uff1a >>> import ubinascii >>> ubinascii.unhexlify('313222') b'12\"'","title":"ubinascii - \u4e8c\u8fdb\u5236\u4e0eASCII\u8f6c\u6362"},{"location":"QuecPython%E6%A0%87%E5%87%86%E5%BA%93%E4%BB%8B%E7%BB%8D/#ucollections-","text":"ucollections \u6a21\u5757\u7528\u4e8e\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5bb9\u5668\u7c7b\u578b\uff0c\u7528\u4e8e\u4fdd\u5b58\u5404\u79cd\u5bf9\u8c61\u3002\u8be5\u6a21\u5757\u5b9e\u73b0\u4e86CPython\u6a21\u5757\u76f8\u5e94\u6a21\u5757\u7684\u5b50\u96c6\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605\u9605CPython\u6587\u6863\uff1a collections mytuple = ucollections.namedtuple(name, fields) \u521b\u5efa\u4e00\u4e2a\u5177\u6709\u7279\u5b9a\u540d\u79f0\u548c\u4e00\u7ec4\u5b57\u6bb5\u7684\u65b0namedtuple\u5bb9\u5668\u7c7b\u578b\uff0cnamedtuple\u662f\u5143\u7ec4\u7684\u5b50\u7c7b\uff0c\u5141\u8bb8\u901a\u8fc7\u7d22\u5f15\u6765\u8bbf\u95ee\u5b83\u7684\u5b57\u6bb5\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e name str \u65b0\u521b\u5efa\u5bb9\u5668\u7684\u7c7b\u578b\u540d\u79f0 fields tuple \u65b0\u521b\u5efa\u5bb9\u5668\u7c7b\u578b\u5305\u542b\u5b50\u7c7b\u578b\u7684\u5b57\u6bb5 \u793a\u4f8b\uff1a >>> import ucollections >>> mytuple = ucollections.namedtuple(\"mytuple\", (\"id\", \"name\")) >>> t1 = mytuple(1, \"foo\") >>> t2 = mytuple(2, \"bar\") >>> print(t1.name) foo dq = ucollections.deque(iterable, maxlen, flag) \u521b\u5efadeque\u53cc\u5411\u961f\u5217 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e iterable tuple iterable\u5fc5\u987b\u662f\u7a7a\u5143\u7ec4 maxlen int \u6307\u5b9amaxlen\u5e76\u5c06\u53cc\u7aef\u961f\u5217\u9650\u5236\u4e3a\u6b64\u6700\u5927\u957f\u5ea6 flag int \u53ef\u9009\u53c2\u6570\uff1b0(\u9ed8\u8ba4)\uff1a\u4e0d\u68c0\u67e5\u961f\u5217\u662f\u5426\u6ea2\u51fa\uff0c\u8fbe\u5230\u6700\u5927\u957f\u5ea6\u65f6\u7ee7\u7eedappend\u4f1a\u4e22\u5f03\u4e4b\u524d\u7684\u503c \uff0c1\uff1a\u5f53\u961f\u5217\u8fbe\u5230\u6700\u5927\u8bbe\u5b9a\u957f\u5ea6\u4f1a\u629b\u51faIndexError: full \u8fd4\u56de\u503c deque\u5bf9\u8c61 deque\u5bf9\u8c61\u65b9\u6cd5 \u200b dq.append(data) \u5f80\u961f\u5217\u4e2d\u63d2\u5165\u503c\u3002 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e data \u57fa\u672c\u6570\u636e\u7c7b\u578b \u9700\u8981\u6dfb\u52a0\u5230\u961f\u5217\u7684\u6570\u503c \u8fd4\u56de\u503c \u65e0 \u200b dq.popleft() \u4ecedeque\u7684\u5de6\u4fa7\u79fb\u9664\u5e76\u8fd4\u56de\u79fb\u9664\u7684\u6570\u636e\u3002\u5982\u679c\u6ca1\u6709deque\u4e3a\u7a7a\uff0c\u4f1a\u5f15\u8d77\u7d22\u5f15\u9519\u8bef \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u8fd4\u56depop\u51fa\u7684\u503c \u4f7f\u7528\u793a\u4f8b from ucollections import deque dq = deque((),5) dq.append(1) dq.append([\"a\"]) dq.append(\"a\") dq.popleft() # 1 dq.popleft() # [\"a\"] dq.popleft() # a","title":"ucollections - \u96c6\u5408\u548c\u5bb9\u5668\u7c7b\u578b"},{"location":"QuecPython%E6%A0%87%E5%87%86%E5%BA%93%E4%BB%8B%E7%BB%8D/#urandom-","text":"urandom \u6a21\u5757\u63d0\u4f9b\u4e86\u751f\u6210\u968f\u673a\u6570\u7684\u5de5\u5177\u3002 urandom.choice(obj) \u968f\u673a\u751f\u6210\u5bf9\u8c61 obj \u4e2d\u7684\u5143\u7d20\uff0cobj \u7c7b\u578b string\u3002 \u793a\u4f8b\uff1a >>> import urandom >>> urandom.choice(\"QuecPython\") 't' urandom.getrandbits(k) \u968f\u673a\u4ea7\u751f\u4e00\u4e2ak\u6bd4\u7279\u957f\u7684\u968f\u673a\u6574\u6570\u3002 \u793a\u4f8b\uff1a >>> import urandom >>> urandom.getrandbits(1) #1\u4f4d\u4e8c\u8fdb\u5236\u4f4d\uff0c\u8303\u56f4\u4e3a0~1\uff08\u5341\u8fdb\u5236\uff1a0~1\uff09 1 >>> urandom.getrandbits(1) 0 >>> urandom.getrandbits(8) #8\u4f4d\u4e8c\u8fdb\u5236\u4f4d\uff0c\u8303\u56f4\u4e3a0000 0000~1111 11111\uff08\u5341\u8fdb\u5236\uff1a0~255\uff09 224 urandom.randint(start, end) \u968f\u673a\u751f\u6210\u4e00\u4e2a start \u5230 end \u4e4b\u95f4\u7684\u6574\u6570\u3002 \u793a\u4f8b\uff1a >>> import urandom >>> urandom.randint(1, 4) 4 >>> urandom.randint(1, 4) 2 urandom.random() \u968f\u673a\u751f\u6210\u4e00\u4e2a 0 \u5230 1 \u4e4b\u95f4\u7684\u6d6e\u70b9\u6570\u3002 \u793a\u4f8b\uff1a >>> import urandom >>> urandom.random() 0.8465231 urandom.randrange(start, end, step) \u968f\u673a\u751f\u6210 start \u5230 end \u95f4\u5e76\u4e14\u9012\u589e\u4e3a step \u7684\u6b63\u6574\u6570\u3002 \u793a\u4f8b\uff1a >>> import urandom >>> urandom.randrange(0, 8, 2) 0 >>> urandom.randrange(0, 8, 2) 6 urandom.seed(sed) \u6307\u5b9a\u968f\u673a\u6570\u79cd\u5b50\uff0c\u901a\u5e38\u548c\u5176\u5b83\u968f\u673a\u6570\u751f\u6210\u51fd\u6570\u642d\u914d\u4f7f\u7528\u3002 \u793a\u4f8b\uff1a >>> import urandom >>> urandom.seed(20) #\u6307\u5b9a\u968f\u673a\u6570\u79cd\u5b50 >>> for i in range(0, 15): #\u751f\u62100~15\u8303\u56f4\u5185\u7684\u968f\u673a\u5e8f\u5217 ... print(urandom.randint(1, 10)) ... 8 10 9 10 2 1 9 3 2 2 6 1 10 9 6 urandom.uniform(start, end) \u968f\u673a\u751f\u6210 start \u5230 end \u8303\u56f4\u5185\u7684\u6d6e\u70b9\u6570\u3002 \u793a\u4f8b\uff1a >>> import urandom >>> urandom.uniform(3, 5) 3.219261 >>> urandom.uniform(3, 5) 4.00403","title":"urandom - \u751f\u6210\u968f\u673a\u6570"},{"location":"QuecPython%E6%A0%87%E5%87%86%E5%BA%93%E4%BB%8B%E7%BB%8D/#math-","text":"math \u6a21\u5757\u63d0\u4f9b\u6570\u5b66\u8fd0\u7b97\u51fd\u6570\u3002\u8be5\u6a21\u5757\u5b9e\u73b0\u76f8\u5e94CPython\u6a21\u5757\u7684\u5b50\u96c6\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605\u9605CPython\u6587\u6863\uff1a math math.pow(x, y) \u8fd4\u56dex\u7684y\u6b21\u65b9\uff0c\u8fd4\u56de\u503c\u662f\u6d6e\u70b9\u6570\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.pow(2, 3) 8.0 math.acos(x) \u8fd4\u56dex\u7684\u53cd\u4f59\u5f26\u5f27\u5ea6\u503c\uff0c\u8fd4\u56de\u503c\u4e3a\u6d6e\u70b9\u6570\u3002x\u662f-1~1\u4e4b\u95f4\u7684\u6570\uff0c\u5305\u62ec-1\u548c1\uff0c\u5982\u679c\u5c0f\u4e8e-1\u6216\u8005\u5927\u4e8e1\uff0c\u4f1a\u4ea7\u751f\u9519\u8bef\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.acos(0.6) 0.9272952 math.asin(x) \u8fd4\u56dex\u7684\u53cd\u6b63\u5f26\u5f27\u5ea6\u503c\uff0c\u8fd4\u56de\u503c\u4e3a\u6d6e\u70b9\u6570\u3002x\u662f-1~1\u4e4b\u95f4\u7684\u6570\uff0c\u5305\u62ec-1\u548c1\uff0c\u5982\u679c\u5c0f\u4e8e-1\u6216\u8005\u5927\u4e8e1\uff0c\u4f1a\u4ea7\u751f\u9519\u8bef\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.asin(-1) -1.570796 math.atan(x) \u8fd4\u56dex\u7684\u53cd\u6b63\u5207\u5f27\u5ea6\u503c\uff0c\u8fd4\u56de\u503c\u4e3a\u6d6e\u70b9\u6570\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.atan(-8) -1.446441 >>> math.atan(6.4) 1.4158 math.atan2(x, y) \u8fd4\u56de\u7ed9\u5b9a\u7684 X \u53ca Y \u5750\u6807\u503c\u7684\u53cd\u6b63\u5207\u503c\uff0c\u8fd4\u56de\u503c\u4e3a\u6d6e\u70b9\u6570\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.atan2(-0.50,0.48) -0.8058035 >>> math.atan2(7, 9) 0.6610432 math.ceil(x) \u8fd4\u56de\u6570\u5b57\u7684\u4e0a\u5165\u6574\u6570\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.ceil(4.1) 5 math.copysign(x, y) \u628ay\u7684\u6b63\u8d1f\u53f7\u52a0\u5230x\u524d\u9762\uff0c\u53ef\u4ee5\u4f7f\u75280\uff0c\u8fd4\u56de\u503c\u4e3a\u6d6e\u70b9\u6570\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.copysign(5, 0) 5.0 >>> math.copysign(5, -4) -5.0 >>> math.copysign(5, 9) 5.0 math.cos(x) \u8fd4\u56dex\u7684\u5f27\u5ea6\u7684\u4f59\u5f26\u503c\uff0c\u8303\u56f4\u518d-1~1\u4e4b\u95f4\uff0c\u8fd4\u56de\u503c\u4e3a\u6d6e\u70b9\u6570\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.cos(3) -0.9899925 math.degrees(x) \u5c06\u5f27\u5ea6\u8f6c\u6362\u4e3a\u89d2\u5ea6\uff0c\u8fd4\u56de\u503c\u4e3a\u6d6e\u70b9\u6570\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.degrees(5) 286.4789 >>> math.degrees(math.pi/2) 90.0 math.e \u6570\u5b66\u5e38\u91cf e \uff0c e \u5373\u81ea\u7136\u5e38\u6570\u3002 math.exp(x) \u8fd4\u56dee\u7684x\u6b21\u5e42\uff0c\u8fd4\u56de\u503c\u4e3a\u6d6e\u70b9\u6570\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.exp(1) 2.718282 >>> print(math.e) 2.718282 math.fabs(x) \u8fd4\u56de\u6570\u5b57\u7684\u7edd\u5bf9\u503c\uff0c\u8fd4\u56de\u503c\u4e3a\u6d6e\u70b9\u6570\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.fabs(-3.88) 3.88 math.floor(x) \u8fd4\u56de\u6570\u5b57\u7684\u4e0b\u820d\u6574\u6570\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.floor(8.7) 8 >>> math.floor(9) 9 >>> math.floor(-7.6) -8 math.fmod(x, y) \u8fd4\u56dex/y\u7684\u4f59\u6570\uff0c\u8fd4\u56de\u503c\u4e3a\u6d6e\u70b9\u6570\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.fmod(15, 4) 3.0 >>> math.fmod(15, 3) 0.0 math.modf(x) \u8fd4\u56de\u7531x\u7684\u5c0f\u6570\u90e8\u5206\u548c\u6574\u6570\u90e8\u5206\u7ec4\u6210\u7684\u5143\u7ec4\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.modf(17.592) (0.5919991, 17.0) math.frexp(x) \u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4(m,e),\u5176\u8ba1\u7b97\u65b9\u5f0f\u4e3a\uff1ax\u5206\u522b\u96640.5\u548c1,\u5f97\u5230\u4e00\u4e2a\u503c\u7684\u8303\u56f4\uff0c2e\u7684\u503c\u5728\u8fd9\u4e2a\u8303\u56f4\u5185\uff0ce\u53d6\u7b26\u5408\u8981\u6c42\u7684\u6700\u5927\u6574\u6570\u503c,\u7136\u540ex/(2e)\uff0c\u5f97\u5230m\u7684\u503c\u3002\u5982\u679cx\u7b49\u4e8e0\uff0c\u5219m\u548ce\u7684\u503c\u90fd\u4e3a0\uff0cm\u7684\u7edd\u5bf9\u503c\u7684\u8303\u56f4\u4e3a(0.5,1)\u4e4b\u95f4\uff0c\u4e0d\u5305\u62ec0.5\u548c1\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.frexp(52) (0.8125, 6) math.isfinite(x) \u5224\u65ad x \u662f\u5426\u4e3a\u6709\u9650\u6570\uff0c\u662f\u5219\u8fd4\u56deTrue\uff0c\u5426\u5219\u8fd4\u56deFalse\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.isfinite(8) True math.isinf(x) \u5982\u679cx\u662f\u6b63\u65e0\u7a77\u5927\u6216\u8d1f\u65e0\u7a77\u5927\uff0c\u5219\u8fd4\u56deTrue,\u5426\u5219\u8fd4\u56deFalse\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.isinf(123) False math.isnan(x) \u5982\u679cx\u4e0d\u662f\u6570\u5b57True,\u5426\u5219\u8fd4\u56deFalse\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.isnan(23) False math.ldexp(x, exp) \u8fd4\u56dex (2 *i)\u7684\u503c\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.ldexp(2, 1) 4.0 math.log(x) \u8fd4\u56dex\u7684\u81ea\u7136\u5bf9\u6570\uff0cx > 0\uff0c\u5c0f\u4e8e0\u4f1a\u62a5\u9519\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.log(2) 0.6931472 math.pi \u6570\u5b66\u5e38\u91cf pi\uff08\u5706\u5468\u7387\uff0c\u4e00\u822c\u4ee5\u03c0\u6765\u8868\u793a\uff09\u3002 math.radians(x) \u5c06\u89d2\u5ea6\u8f6c\u6362\u4e3a\u5f27\u5ea6\uff0c\u8fd4\u56de\u503c\u4e3a\u6d6e\u70b9\u6570\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.radians(90) 1.570796 math.sin(x) \u8fd4\u56dex\u5f27\u5ea6\u7684\u6b63\u5f26\u503c\uff0c\u6570\u503c\u5728 -1 \u5230 1 \u4e4b\u95f4\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.sin(-18) 0.7509873 >>> math.sin(50) -0.2623749 math.sqrt(x) \u8fd4\u56de\u6570\u5b57x\u7684\u5e73\u65b9\u6839\uff0c\u8fd4\u56de\u503c\u4e3a\u6d6e\u70b9\u6570\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.sqrt(4) 2.0 >>> math.sqrt(7) 2.645751 math.tan(x) \u8fd4\u56de x \u5f27\u5ea6\u7684\u6b63\u5207\u503c\uff0c\u6570\u503c\u5728 -1 \u5230 1 \u4e4b\u95f4\uff0c\u4e3a\u6d6e\u70b9\u6570\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.tan(9) -0.4523157 math.trunc(x) \u8fd4\u56dex\u7684\u6574\u6570\u90e8\u5206\u3002 \u793a\u4f8b\uff1a >>> import math >>> math.trunc(7.123) 7","title":"math - \u6570\u5b66\u8fd0\u7b97"},{"location":"QuecPython%E6%A0%87%E5%87%86%E5%BA%93%E4%BB%8B%E7%BB%8D/#usocket-socket","text":"usocket \u6a21\u5757\u63d0\u4f9b\u5bf9BSD\u5957\u63a5\u5b57\u63a5\u53e3\u7684\u8bbf\u95ee\u3002\u8be5\u6a21\u5757\u5b9e\u73b0\u76f8\u5e94CPython\u6a21\u5757\u7684\u5b50\u96c6\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605\u9605CPython\u6587\u6863\uff1a socket usocket.socket(af=AF_INET, type=SOCK_STREAM, proto=IPPROTO_TCP) \u6839\u636e\u7ed9\u5b9a\u7684\u5730\u5740\u65cf\u3001\u5957\u63a5\u5b57\u7c7b\u578b\u4ee5\u53ca\u534f\u8bae\u7c7b\u578b\u53c2\u6570\uff0c\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5957\u63a5\u5b57\u3002\u6ce8\u610f\uff0c\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u4e0d\u9700\u8981\u6307\u5b9a proto \uff0c\u4e5f\u4e0d\u5efa\u8bae\u8fd9\u6837\u505a\uff0c\u56e0\u4e3a\u67d0\u4e9bMicroPython\u7aef\u53e3\u53ef\u80fd\u4f1a\u7701\u7565 IPPROTO_* \u5e38\u91cf\u3002 \u5e38\u91cf\u8bf4\u660e af - \u5730\u5740\u65cf usocket.AF_INET \uff1aIPV4 usocket.AF_INET6 \uff1aIPV6 type - socket\u7c7b\u578b usocket.SOCK_STREAM \uff1a\u5bf9\u5e94TCP\u7684\u6d41\u5f0f\u5957\u63a5\u5b57 usocket.SOCK_DGRAM \uff1a\u5bf9\u5e94UDP\u7684\u6570\u636e\u5305\u5957\u63a5\u5b57 usocket.SOCK_RAW \uff1a\u539f\u59cb\u5957\u63a5\u5b57 proto - \u534f\u8bae\u53f7 usocket.IPPROTO_TCP usocket.IPPROTO_UDP \u5176\u4ed6 usocket.SOL_SOCKET - \u5957\u63a5\u5b57\u9009\u9879\u7ea7\u522b\uff0c usocket.SO_REUSEADDR - \u5141\u8bb8\u7ed1\u5b9a\u5730\u5740\u5feb\u901f\u91cd\u7528 \u793a\u4f8b\uff1a import usocket # \u521b\u5efa\u57fa\u4e8eTCP\u7684\u6d41\u5f0f\u5957\u63a5\u5b57 socket = usocket.socket(usocket.AF_INET, usocket.SOCK_STREAM) # \u521b\u5efa\u57fa\u4e8eUDP\u7684\u6570\u636e\u62a5\u5957\u63a5\u5b57 socket = usocket.socket(usocket.AF_INET, usocket.SOCK_DGRAM) usocket.getaddrinfo(host, port) \u5c06\u4e3b\u673a\u57df\u540d\uff08host\uff09\u548c\u7aef\u53e3\uff08port\uff09\u8f6c\u6362\u4e3a\u7528\u4e8e\u521b\u5efa\u5957\u63a5\u5b57\u76845\u5143\u7ec4\u5e8f\u5217\uff0c\u5143\u7ec4\u7ed3\u6784\u5982\u4e0b\uff1a (family, type, proto, canonname, sockaddr) socket\u7c7b\u7684\u65b9\u6cd5 socket.bind(address) \u7ed1\u5b9a\u5730\u5740address\u3002\u5728\u6b64\u4e4b\u524d\uff0csocket\u5fc5\u987b\u6ca1\u6709\u7ed1\u5b9a\u8fc7\u3002 address \uff1a\u7531\u5730\u5740\u7aef\u53e3\u53f7\u7ec4\u6210\u7684\u5217\u8868\u6216\u8005\u5143\u7ec4 \u793a\u4f8b\uff1a addr = ('127.0.0.1', 6000) socket.bind(addr) socket.listen(backlog) \u5141\u8bb8\u670d\u52a1\u7aef\u63a5\u53d7\u8fde\u63a5\uff0c\u53ef\u6307\u5b9a\u6700\u5927\u8fde\u63a5\u6570\u3002 backlog \uff1a\u63a5\u53d7\u5957\u63a5\u5b57\u7684\u6700\u5927\u4e2a\u6570\uff0c\u81f3\u5c11\u4e3a0\u3002 socket.accept() \u63a5\u53d7\u8fde\u63a5\u8bf7\u6c42\uff0c\u8fd4\u56de\u5143\u7ec4\uff0c\u5305\u542b\u65b0\u7684\u5957\u63a5\u5b57\u548c\u5ba2\u6237\u7aef\u5730\u5740\uff0c\u5f62\u5f0f\u4e3a\uff1a (conn, address) conn \uff1a\u65b0\u7684\u5957\u63a5\u5b57\u5bf9\u8c61\uff0c\u53ef\u4ee5\u7528\u6765\u53d1\u9001\u548c\u63a5\u6536\u6570\u636e address \uff1a\u8fde\u63a5\u5230\u670d\u52a1\u5668\u7684\u5ba2\u6237\u7aef\u5730\u5740 socket.connect(address) \u8fde\u63a5\u5230\u6307\u5b9a\u5730\u5740address\u7684\u670d\u52a1\u5668\u3002 address \uff1a\u5305\u542b\u5730\u5740\u548c\u7aef\u53e3\u53f7\u7684\u5143\u7ec4\u6216\u5217\u8868 socket.read( [ size ] ) \u4ece\u5957\u63a5\u5b57\u4e2d\u8bfb\u53d6size\u5b57\u8282\u6570\u636e\uff0c\u8fd4\u56de\u4e00\u4e2a\u5b57\u8282\u5bf9\u8c61\u3002\u5982\u679c\u6ca1\u6709\u6307\u5b9asize\uff0c\u5219\u4f1a\u4ece\u5957\u63a5\u5b57\u8bfb\u53d6\u6240\u6709\u53ef\u8bfb\u6570\u636e\uff0c\u76f4\u5230\u8bfb\u53d6\u5230\u6570\u636e\u7ed3\u675f\uff0c\u6b64\u65f6\u4f5c\u7528\u548c socket.readall() \u76f8\u540c\u3002 socket.readinto(buf, [ , nbytes ]) \u5c06\u5b57\u8282\u8bfb\u53d6\u5230\u7f13\u51b2\u533abuf\u4e2d\u3002\u5982\u679c\u6307\u5b9a\u4e86nbytes\uff0c\u5219\u6700\u591a\u8bfb\u53d6nbytes\u6570\u91cf\u7684\u5b57\u8282\uff1b\u5982\u679c\u6ca1\u6709\u6307\u5b9anbytes\uff0c\u5219\u6700\u591a\u8bfb\u53d6len(buf)\u5b57\u8282\u3002\u8fd4\u56de\u503c\u662f\u5b9e\u9645\u8bfb\u53d6\u7684\u5b57\u8282\u6570\u3002 socket.readline() \u6309\u884c\u8bfb\u53d6\u6570\u636e\uff0c\u9047\u5230\u6362\u884c\u7b26\u7ed3\u675f\uff0c\u8fd4\u56de\u8bfb\u53d6\u7684\u6570\u636e\u884c\u3002 socket.write(buf) \u5199\u5165\u7f13\u51b2\u533a\u7684\u6570\u636e\uff0cbuf\u4e3a\u5f85\u5199\u5165\u7684\u6570\u636e\uff0c\u8fd4\u56de\u5b9e\u9645\u5199\u5165\u7684\u5b57\u8282\u6570\u3002 socket.send(bytes) \u53d1\u9001\u6570\u636e\uff0c\u8fd4\u56de\u5b9e\u9645\u53d1\u9001\u7684\u5b57\u8282\u6570\u3002 bytes \uff1abytes\u578b\u6570\u636e socket.sendall(bytes) \u5c06\u6240\u6709\u6570\u636e\u90fd\u53d1\u9001\u5230\u5957\u63a5\u5b57\u3002\u4e0e send() \u65b9\u6cd5\u4e0d\u540c\u7684\u662f\uff0c\u6b64\u65b9\u6cd5\u5c06\u5c1d\u8bd5\u901a\u8fc7\u4f9d\u6b21\u9010\u5757\u53d1\u9001\u6570\u636e\u6765\u53d1\u9001\u6240\u6709\u6570\u636e\u3002 \u6ce8\u610f\uff1a\u8be5\u65b9\u6cd5\u518d\u975e\u963b\u585e\u5957\u63a5\u5b57\u4e0a\u7684\u884c\u4e3a\u662f\u4e0d\u786e\u5b9a\u7684\uff0c\u5efa\u8bae\u518dMicroPython\u4e2d\uff0c\u4f7f\u7528 write() \u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u5177\u6709\u76f8\u540c\u7684\u201c\u7981\u6b62\u77ed\u5199\u201d\u7b56\u7565\u6765\u963b\u585e\u5957\u63a5\u5b57\uff0c\u5e76\u4e14\u5c06\u8fd4\u56de\u5728\u975e\u963b\u585e\u5957\u63a5\u5b57\u4e0a\u53d1\u9001\u7684\u5b57\u8282\u6570\u3002 bytes \uff1abytes\u578b\u6570\u636e socket.sendto(bytes, address) \u5c06\u6570\u636e\u53d1\u9001\u5230\u5957\u63a5\u5b57\u3002\u8be5\u5957\u63a5\u5b57\u4e0d\u5e94\u8fde\u63a5\u5230\u8fdc\u7a0b\u5957\u63a5\u5b57\uff0c\u56e0\u4e3a\u76ee\u6807\u5957\u63a5\u5b57\u662f\u7531 address \u6307\u5b9a\u7684\u3002 bytes \uff1abytes\u578b\u6570\u636e address \uff1a\u5305\u542b\u5730\u5740\u548c\u7aef\u53e3\u53f7\u7684\u5143\u7ec4\u6216\u5217\u8868 socket.recv(bufsize) \u4ece\u5957\u63a5\u5b57\u63a5\u6536\u6570\u636e\u3002\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u5b57\u8282\u5bf9\u8c61\uff0c\u8868\u793a\u63a5\u6536\u5230\u7684\u6570\u636e\u3002\u4e00\u6b21\u63a5\u6536\u7684\u6700\u5927\u6570\u636e\u91cf\u7531bufsize\u6307\u5b9a\u3002 bufsize \uff1a\u4e00\u6b21\u63a5\u6536\u7684\u6700\u5927\u6570\u636e\u91cf socket.close() \u5c06\u5957\u63a5\u5b57\u6807\u8bb0\u4e3a\u5173\u95ed\u5e76\u91ca\u653e\u6240\u6709\u8d44\u6e90\u3002 socket.recvfrom(bufsize) \u4ece\u5957\u63a5\u5b57\u63a5\u6536\u6570\u636e\u3002\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4\uff0c\u5305\u542b\u5b57\u8282\u5bf9\u8c61\u548c\u5730\u5740\u3002 \u8fd4\u56de\u503c\u5f62\u5f0f\u4e3a\uff1a (bytes, address) bytes \uff1a\u63a5\u6536\u6570\u636e\u7684\u5b57\u8282\u5bf9\u8c61 address \uff1a\u53d1\u9001\u6570\u636e\u7684\u5957\u63a5\u5b57\u7684\u5730\u5740 socket.setsockopt(level, optname, value) \u8bbe\u7f6e\u5957\u63a5\u5b57\u9009\u9879\u7684\u503c\u3002 level \uff1a\u5957\u63a5\u5b57\u9009\u9879\u7ea7\u522b optname \uff1asocket\u9009\u9879 value \uff1a\u65e2\u53ef\u4ee5\u662f\u4e00\u4e2a\u6574\u6570\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u8868\u793a\u7f13\u51b2\u533a\u7684bytes\u7c7b\u5bf9\u8c61 \u793a\u4f8b\uff1a socket.setsockopt(usocket.SOL_SOCKET, usocket.SO_REUSEADDR, 1) socket.setblocking(flag) \u8bbe\u7f6e\u5957\u63a5\u5b57\u4e3a\u963b\u585e\u6a21\u5f0f\u6216\u8005\u975e\u963b\u585e\u6a21\u5f0f\u3002\u5982\u679c\u6807\u5fd7\u4e3afalse\uff0c\u5219\u5c06\u5957\u63a5\u5b57\u8bbe\u7f6e\u4e3a\u975e\u963b\u585e\uff0c\u5426\u5219\u8bbe\u7f6e\u4e3a\u963b\u585e\u6a21\u5f0f\u3002 \u8be5\u65b9\u6cd5\u662f\u67d0\u4e9b settimeout() \u8c03\u7528\u7684\u7b80\u5199\uff1a socket.setblocking(True) \u76f8\u5f53\u4e8e socket.settimeout(None) socket.setblocking(False) \u76f8\u5f53\u4e8e socket.settimeout(0) socket.settimeout(value) \u8bbe\u7f6e\u5957\u63a5\u5b57\u7684\u8d85\u65f6\u65f6\u95f4\uff0c\u5355\u4f4d\u79d2\u3002 value \uff1a\u53ef\u4ee5\u662f\u8868\u793a\u79d2\u7684\u975e\u8d1f\u6d6e\u70b9\u6570\uff0c\u4e5f\u53ef\u4ee5\u662fNone\u3002\u5982\u679c\u7ed9\u51fa\u4e00\u4e2a\u975e\u96f6\u503c\uff0c\u5219 OSError \u5728\u8be5\u64cd\u4f5c\u5b8c\u6210\u4e4b\u524d\u5df2\u8d85\u8fc7\u8d85\u65f6\u65f6\u95f4\u503c\uff0c\u5219\u968f\u540e\u7684\u5957\u63a5\u5b57\u64cd\u4f5c\u5c06\u5f15\u53d1\u5f02\u5e38\u3002\u5982\u679c\u7ed9\u5b9a\u96f6\uff0c\u5219\u5c06\u5957\u63a5\u5b57\u7f6e\u4e8e\u975e\u963b\u585e\u6a21\u5f0f\u3002\u5982\u679c\u672a\u6307\u5b9a\uff0c\u5219\u5957\u63a5\u5b57\u5c06\u5904\u4e8e\u963b\u585e\u6a21\u5f0f\u3002 socket.makefile(mode='rb') \u8fd4\u56de\u4e0e\u5957\u63a5\u5b57\u5173\u8054\u7684\u6587\u4ef6\u5bf9\u8c61\uff0c\u8fd4\u56de\u503c\u7c7b\u578b\u4e0e\u6307\u5b9a\u7684\u53c2\u6570\u6709\u5173\u3002\u4ec5\u652f\u6301\u4e8c\u8fdb\u5236\u6a21\u5f0f (rb\u548cwb)\u3002 socket\u901a\u4fe1\u793a\u4f8b \uff1a # \u5ba2\u6237\u7aef\u793a\u4f8b import usocket client = usocket.socket(usocket.AF_INET, usocket.SOCK_STREAM) sockaddr = usocket.getaddrinfo('www.tongxinmao.com',80)[0][-1] client.connect(sockaddr) while True: re_data = input() client.send(re_data.encode(\"utf8\")) data = client.recv(1024) print(data.decode(\"utf8\"))","title":"usocket - socket\u6a21\u5757"},{"location":"QuecPython%E6%A0%87%E5%87%86%E5%BA%93%E4%BB%8B%E7%BB%8D/#uio-","text":"uio \u6a21\u5757\u5305\u542b\u5176\u4ed6\u7c7b\u578b\u7684stream\uff08\u7c7b\u6587\u4ef6\uff09\u5bf9\u8c61\u548c\u8f85\u52a9\u51fd\u6570\u3002\u8be5\u6a21\u5757\u5b9e\u73b0\u76f8\u5e94CPython\u6a21\u5757\u7684\u5b50\u96c6\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605\u9605CPython\u6587\u6863\uff1a io fd = uio.open(name, mode=\u2019r\u2019, **kwarg) \u6253\u5f00\u6587\u4ef6\uff0c\u5185\u7f6e open() \u51fd\u6570\u662f\u8be5\u51fd\u6570\u7684\u522b\u540d\u3002 name \uff1a\u6587\u4ef6\u540d mode \uff1a\u6253\u5f00\u6a21\u5f0f r \u53ea\u8bfb\u6a21\u5f0f\u6253\u5f00\u6587\u4ef6 w \u5199\u5165\u6a21\u5f0f\u6253\u5f00\u6587\u4ef6\uff0c\u6bcf\u6b21\u5199\u5165\u4f1a\u8986\u76d6\u4e0a\u6b21\u5199\u5165\u6570\u636e a \u53ea\u5199\u8ffd\u52a0\u6a21\u5f0f\u6253\u5f00\u6587\u4ef6\uff0c\u53ef\u8fde\u7eed\u5199\u5165\u6587\u4ef6\u6570\u636e\u800c\u4e0d\u662f\u8986\u76d6\u6570\u636e **kwarg \uff1a\u53ef\u53d8\u957f\u53c2\u6570\u5217\u8868 fd.close() \u5173\u95ed\u6253\u5f00\u7684\u6587\u4ef6\u3002","title":"uio - \u8f93\u5165\u8f93\u51fa\u6d41"},{"location":"QuecPython%E6%A0%87%E5%87%86%E5%BA%93%E4%BB%8B%E7%BB%8D/#ustruct-","text":"\u8be5\u6a21\u5757\u5b9e\u73b0\u76f8\u5e94CPython\u6a21\u5757\u7684\u5b50\u96c6\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605\u9605CPython\u6587\u6863\uff1a struct \u5b57\u8282\u987a\u5e8f\uff0c\u5927\u5c0f\u548c\u5bf9\u9f50\u65b9\u5f0f \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cC\u7c7b\u578b\u4ee5\u673a\u5668\u7684\u672c\u673a\u683c\u5f0f\u548c\u5b57\u8282\u987a\u5e8f\u8868\u793a\uff0c\u5e76\u5728\u5fc5\u8981\u65f6\u901a\u8fc7\u8df3\u8fc7\u586b\u5145\u5b57\u8282\u6765\u6b63\u786e\u5bf9\u9f50\uff08\u6839\u636eC\u7f16\u8bd1\u5668\u4f7f\u7528\u7684\u89c4\u5219\uff09\u3002\u6839\u636e\u4e0b\u8868\uff0c\u683c\u5f0f\u5b57\u7b26\u4e32\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u53ef\u7528\u4e8e\u6307\u793a\u6253\u5305\u6570\u636e\u7684\u5b57\u8282\u987a\u5e8f\uff0c\u5927\u5c0f\u548c\u5bf9\u9f50\u65b9\u5f0f\uff1a Character Byte order Size Alignment @ native native native = native standard none < little-endian standard none > big-endian standard none ! network (= big-endian) standard none \u683c\u5f0f\u5316\u5b57\u7b26\u8868 Format C Type Python type Standard size x pad byte no value c char bytes of length 1 1 b signed char integer 1 B unsigned char integer 1 ? _Bool bool 1 h short integer 2 H unsigned short integer 2 i int integer 4 I unsigned int integer 4 l long integer 4 L unsigned long integer 4 q long long integer 8 Q unsigned long long integer 8 n ssize_t integer N size_t integer f float float 4 d double float 8 s char[] bytes p char[] bytes P void * integer \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cC\u7c7b\u578b\u4ee5\u673a\u5668\u7684\u672c\u673a\u683c\u5f0f\u548c\u5b57\u8282\u987a\u5e8f\u8868\u793a\uff0c\u5e76\u5728\u5fc5\u8981\u65f6\u901a\u8fc7\u8df3\u8fc7\u586b\u5145\u5b57\u8282\u6765\u6b63\u786e\u5bf9\u9f50\uff08\u6839\u636eC\u7f16\u8bd1\u5668\u4f7f\u7528\u7684\u89c4\u5219\uff09 ustruct.calcsize(fmt) \u8fd4\u56de\u5b58\u653e fmt \u9700\u8981\u7684\u5b57\u8282\u6570\u3002 fmt \uff1a\u683c\u5f0f\u5b57\u7b26\u7684\u7c7b\u578b\uff0c\u8be6\u60c5\u89c1\u4e0a\u6587\u683c\u5316\u5f0f\u5b57\u7b26\u8868 \u793a\u4f8b\uff1a >>> import ustruct >>> ustruct.calcsize('i') 4 >>> ustruct.calcsize('f') 4 >>> ustruct.calcsize('d') 8 ustruct.pack(fmt, v1, v2, ...) \u6309\u7167\u683c\u5f0f\u5b57\u7b26\u4e32 fmt \u538b\u7f29\u53c2\u6570v1\u3001 v2\u3001\u2026\u8fd4\u56de\u503c\u662f\u53c2\u6570\u7f16\u7801\u540e\u7684\u5b57\u8282\u5bf9\u8c61\u3002 fmt \uff1a\u683c\u5f0f\u5b57\u7b26\u7684\u7c7b\u578b\uff0c\u8be6\u60c5\u89c1\u4e0a\u6587\u683c\u5316\u5f0f\u5b57\u7b26\u8868 unstrcut.unpack(fmt, data) \u6839\u636e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32 fmt \u5bf9\u6570\u636e\u8fdb\u884c\u89e3\u538b\uff0c\u8fd4\u56de\u503c\u4e3a\u4e00\u4e2a\u5143\u7ec4\u3002 \u793a\u4f8b\uff1a >>> import ustruct >>> ustruct.pack('ii', 7, 9) #\u6253\u53052\u4e24\u4e2a\u6574\u6570 b'\\x07\\x00\\x00\\x00\\t\\x00\\x00\\x00' >>> ustruct.unpack('ii', b'\\x07\\x00\\x00\\x00\\t\\x00\\x00\\x00') #\u89e3\u538b\u4e24\u4e2a\u6574\u6570 (7, 9) ustruct.pack_info(fmt, buffer, offset, v1, v2, ...) \u6839\u636e\u683c\u5f0f\u5b57\u7b26\u4e32fmt\u5c06\u503cv1\u3001v2\u3001 \u2026\u6253\u5305\u5230\u4ece offset \u5f00\u59cb\u7684\u7f13\u51b2\u533a\u4e2d\u3002\u4ece\u7f13\u51b2\u533a\u7684\u672b\u5c3e\u7b97\u8d77\uff0c offset \u53ef\u80fd\u4e3a\u8d1f\u3002 fmt \uff1a\u683c\u5f0f\u5b57\u7b26\u7684\u7c7b\u578b\uff0c\u8be6\u60c5\u89c1\u4e0a\u6587\u683c\u5316\u5f0f\u5b57\u7b26\u8868 unstruct.unpack_from(fmt, data, offset=0) \u6839\u636e\u683c\u5f0f\u5316\u5b57\u7b26\u4e32 fmt \u89e3\u6790\u4ece offest \u5f00\u59cb\u7684\u6570\u636e\u89e3\u538b\uff0c\u4ece\u7f13\u51b2\u533a\u672b\u5c3e\u5f00\u59cb\u8ba1\u6570\u7684\u504f\u79fb\u91cf\u53ef\u80fd\u4e3a\u8d1f\u503c\u3002\u8fd4\u56de\u503c\u662f\u89e3\u538b\u503c\u7684\u5143\u7ec4\u3002","title":"ustruct - \u6253\u5305\u548c\u89e3\u538b\u539f\u59cb\u6570\u636e\u7c7b\u578b"},{"location":"QuecPython%E6%A0%87%E5%87%86%E5%BA%93%E4%BB%8B%E7%BB%8D/#ujson-json","text":"ujson \u6a21\u5757\u5b9e\u73b0\u5728Python\u6570\u636e\u5bf9\u8c61\u548cJSON\u6570\u636e\u683c\u5f0f\u4e4b\u95f4\u8fdb\u884c\u8f6c\u6362\u7684\u529f\u80fd\u3002\u8be5\u6a21\u5757\u5b9e\u73b0\u76f8\u5e94CPython\u6a21\u5757\u7684\u5b50\u96c6\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605\u9605CPython\u6587\u6863\uff1a json ujson.dump(obj, stream) \u5c06 obj \u6570\u636e\u5bf9\u8c61\u8f6c\u5316\u6210 JSON\u5b57\u7b26\u4e32\uff0c\u5c06\u5176\u5199\u5165\u5230\u7ed9\u5b9a\u7684 stream \u4e2d\u3002 ujson.dumps(dict) \u5c06 dict \u7c7b\u578b\u7684\u6570\u636e\u8f6c\u6362\u6210str\u3002 ujson.load(stream) \u89e3\u6790\u7ed9\u5b9a\u7684\u6570\u636e stream \uff0c\u5c06\u5176\u89e3\u91ca\u4e3aJSON\u5b57\u7b26\u4e32\u5e76\u53cd\u5e8f\u5217\u5316\u6210Python\u5bf9\u8c61\u3002 ujson.loads(str) \u89e3\u6790JSON\u5b57\u7b26\u4e32\u5e76\u8fd4\u56de obj \u5bf9\u8c61 \u793a\u4f8b\uff1a >>> import ujson >>> msg = ['foo',{'bar':('baz',None,1,2)}] >>> print(msg) ['foo', {'bar': ('baz', None, 1, 2)}] >>> s = ujson.dumps(msg) >>> print(s) [\"foo\", {\"bar\": [\"baz\", null, 1, 2]}] >>> s1 = ujson.loads(s) >>> print(s1) ['foo', {'bar': ['baz', None, 1, 2]}]","title":"ujson - JSON\u7f16\u7801\u548c\u89e3\u7801"},{"location":"QuecPython%E6%A0%87%E5%87%86%E5%BA%93%E4%BB%8B%E7%BB%8D/#utime-","text":"utime \u6a21\u5757\u7528\u4e8e\u83b7\u53d6\u5f53\u524d\u65f6\u95f4\u548c\u65e5\u671f\u3001\u6d4b\u91cf\u65f6\u95f4\u95f4\u9694\u548c\u5ef6\u8fdf\u3002\u8be5\u6a21\u5757\u5b9e\u73b0\u76f8\u5e94CPython\u6a21\u5757\u7684\u5b50\u96c6\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605\u9605CPython\u6587\u6863\uff1a time utime.localtime([secs]) \u8be5\u51fd\u6570\u7528\u6765\u5c06\u4e00\u4e2a\u4ee5\u79d2\u8868\u793a\u7684\u65f6\u95f4\u8f6c\u6362\u4e3a\u4e00\u4e2a\u5143\u7ec4\uff0c\u5143\u7ec4\u5305\u542b\u4e86\u4e86\u5e74\u3001\u6708\u3001\u65e5\u3001\u65f6\u3001\u5206\u3001\u79d2\u3001\u661f\u671f\u3001\u4e00\u5e74\u4e2d\u7b2c\u51e0\u5929\uff1b\u5982\u679c\u6ca1\u6709\u7ed9\u5b9a\u53c2\u6570sec\uff0c\u5219\u4f7f\u7528RTC\u65f6\u95f4\u3002\u8fd4\u56de\u503c\u5f62\u5f0f\u5982\u4e0b\uff1a (year, month, mday, hour, minute, second, weekday, yearday) year \uff1a\u5e74\u4efd\uff0cint\u578b month \uff1a\u6708\u4efd\uff0c1~12\uff0cint\u578b mday \uff1a\u65e5\uff0c\u5f53\u6708\u591a\u5c11\u53f7\uff0c1~31\uff0cint\u578b hour \uff1a\u5c0f\u65f6\uff0c0~23\uff0cint\u578b minute \uff1a\u5206\u949f\uff0c0~59\uff0cint\u578b second \uff1a\u79d2\uff0c0~59\uff0cint\u578b weekday \uff1a\u661f\u671f\uff0c\u5468\u4e00\u5230\u5468\u65e5\u662f0~6\uff0cint\u578b yearday \uff1a\u4e00\u5e74\u4e2d\u7684\u7b2c\u591a\u5c11\u5929\uff0cint\u578b \u793a\u4f8b\uff1a >>> import utime >>> utime.localtime() (2020, 9, 29, 8, 54, 42, 1, 273) >>> utime.localtime(646898736) (2020, 7, 1, 6, 5, 36, 2, 183) utime.mktime(date) \u8be5\u51fd\u6570\u4f5c\u7528\u4e0elocatime()\u76f8\u53cd\uff0c\u5b83\u5c06\u4e00\u4e2a\u5b58\u653e\u5728\u5143\u7ec4\u4e2d\u7684\u65f6\u95f4\u8f6c\u6362\u4e3a\u4ee5\u79d2\u8ba1\u7684\u65f6\u95f4\u6233\u3002 \u793a\u4f8b\uff1a >>> import utime >>> date = (2020, 9, 29, 8, 54, 42, 1, 273) >>> utime.mktime(date) 1601340882 utime.sleep(seconds) \u4f11\u7720\u7ed9\u5b9a\u79d2\u6570\u7684\u65f6\u95f4\u3002 \u6ce8\u610f\uff1asleep()\u51fd\u6570\u7684\u8c03\u7528\u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u4f11\u7720\u963b\u585e\u3002 utime.sleep_ms(ms) \u4f11\u7720\u7ed9\u5b9a\u6beb\u79d2\u6570\u7684\u65f6\u95f4\u3002 \u6ce8\u610f\uff1asleep_ms()\u51fd\u6570\u7684\u8c03\u7528\u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u4f11\u7720\u963b\u585e\u3002 utime.sleep_us(us) \u4f11\u7720\u7ed9\u5b9a\u5fae\u79d2\u7684\u65f6\u95f4\u3002 \u6ce8\u610f\uff1asleep_us()\u51fd\u6570\u7684\u8c03\u7528\u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u4f11\u7720\u963b\u585e\u3002 utime.ticks_ms() \u8fd4\u56de\u4e0d\u65ad\u9012\u589e\u7684\u6beb\u79d2\u8ba1\u6570\u5668\uff0c\u5728\u67d0\u4e9b\u503c\u540e\u4f1a\u91cd\u65b0\u8ba1\u6570(\u672a\u6307\u5b9a)\u3002\u8ba1\u6570\u503c\u672c\u8eab\u65e0\u7279\u5b9a\u610f\u4e49\uff0c\u53ea\u9002\u5408\u7528\u5728 ticks_diff() \u51fd\u6570\u4e2d\u3002 \u6ce8\u610f\uff1asleep_us()\u51fd\u6570\u7684\u8c03\u7528\u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u4f11\u7720\u963b\u585e\u3002 utime.ticks_us() \u548c ticks_ms() \u7c7b\u4f3c\uff0c\u53ea\u662f\u8fd4\u56de\u5fae\u79d2\u8ba1\u6570\u5668\u3002 utime.ticks_cpu() \u548c ticks_ms/ticks_us \u7c7b\u4f3c\uff0c\u5177\u6709\u66f4\u9ad8\u7cbe\u5ea6 (\u4f7f\u7528 CPU \u65f6\u949f)\u3002 utime.ticks_diff(old, new) \u8ba1\u7b97\u4e24\u6b21\u8c03\u7528 ticks_ms() \uff0c ticks_us() \uff0c\u6216 ticks_cpu() \u4e4b\u95f4\u7684\u65f6\u95f4\u3002\u56e0\u4e3a\u8fd9\u4e9b\u51fd\u6570\u7684\u8ba1\u6570\u503c\u53ef\u80fd\u4f1a\u56de\u7ed5\uff0c\u6240\u4ee5\u4e0d\u80fd\u76f4\u63a5\u76f8\u51cf\uff0c\u9700\u8981\u4f7f\u7528 ticks_diff() \u51fd\u6570\u3002\u201c\u65e7\u201d \u65f6\u95f4\u9700\u8981\u5728 \u201c\u65b0\u201d \u65f6\u95f4\u4e4b\u524d\uff0c\u5426\u5219\u7ed3\u679c\u65e0\u6cd5\u786e\u5b9a\u3002\u8fd9\u4e2a\u51fd\u6570\u4e0d\u8981\u7528\u5728\u8ba1\u7b97\u5f88\u957f\u7684\u65f6\u95f4 (\u56e0\u4e3a ticks_*() \u51fd\u6570\u4f1a\u56de\u7ed5\uff0c\u901a\u5e38\u5468\u671f\u4e0d\u662f\u5f88\u957f)\u3002\u901a\u5e38\u7528\u6cd5\u662f\u5728\u5e26\u8d85\u65f6\u7684\u8f6e\u8be2\u4e8b\u4ef6\u4e2d\u8c03\u7528\u3002 \u793a\u4f8b\uff1a import utime start = utime.ticks_us() while pin.value() == 0: if utime.ticks_diff(time.ticks_us(), start) > 500: raise TimeoutError utime.time() \u8fd4\u56de\u81ea\u7eaa\u5143\u4ee5\u6765\u7684\u79d2\u6570\uff08\u4ee5\u6574\u6570\u5f62\u5f0f\uff09\u3002\u5982\u679c\u672a\u8bbe\u7f6eRTC\uff0c\u5219\u6b64\u51fd\u6570\u8fd4\u56de\u81ea\u7279\u5b9a\u4e8e\u7aef\u53e3\u7684\u53c2\u8003\u65f6\u95f4\u70b9\u4ee5\u6765\u7684\u79d2\u6570\uff08\u5bf9\u4e8e\u4e0d\u5177\u6709\u7535\u6c60\u540e\u5907RTC\u7684\u5d4c\u5165\u5f0f\u677f\uff0c\u901a\u5e38\u662f\u7531\u4e8e\u52a0\u7535\u6216\u590d\u4f4d\uff09\u3002\u5982\u679c\u8981\u5f00\u53d1\u53ef\u79fb\u690d\u7684MicroPython\u5e94\u7528\u7a0b\u5e8f\uff0c\u5219\u4e0d\u5e94\u4f9d\u8d56\u6b64\u529f\u80fd\u63d0\u4f9b\u9ad8\u4e8e\u79d2\u7684\u7cbe\u5ea6\u3002\u5982\u679c\u9700\u8981\u66f4\u9ad8\u7684\u7cbe\u5ea6\uff0c\u8bf7\u4f7f\u7528 ticks_ms() \u548c ticks_us() \u51fd\u6570\uff0c\u5982\u679c\u9700\u8981\u65e5\u5386\u65f6\u95f4\uff0c\u5219 localtime() \u4e0d\u5e26\u53c2\u6570\u4f1a\u66f4\u597d\u3002","title":"utime - \u4e0e\u65f6\u95f4\u76f8\u5173\u529f\u80fd"},{"location":"QuecPython%E6%A0%87%E5%87%86%E5%BA%93%E4%BB%8B%E7%BB%8D/#sys-","text":"sys \u6a21\u5757\u4e2d\u63d0\u4f9b\u4e86\u4e0eQuecPython\u8fd0\u884c\u73af\u5883\u6709\u5173\u7684\u51fd\u6570\u548c\u53d8\u91cf\u3002\u8be5\u6a21\u5757\u5b9e\u73b0\u76f8\u5e94CPython\u6a21\u5757\u7684\u5b50\u96c6\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605\u9605CPython\u6587\u6863\uff1a sys \u5e38\u6570\u8bf4\u660e sys.argv \u5f53\u524d\u7a0b\u5e8f\u542f\u52a8\u7684\u53ef\u53d8\u53c2\u6570\u5217\u8868\u3002 sys.byteorder \u5b57\u8282\u987a\u5e8f (\u2018little\u2019 - \u5c0f\u7aef\uff0c \u2018big\u2019 - \u5927\u7aef)\u3002 sys.implementation \u8fd4\u56de\u5f53\u524dmicroPython\u7248\u672c\u4fe1\u606f\u3002\u5bf9\u4e8eMicroPython\uff0c\u5b83\u5177\u6709\u4ee5\u4e0b\u5c5e\u6027\uff1a name - \u5b57\u7b26\u4e32\u201c micropython\u201d version - \u5143\u7ec4\uff08\u4e3b\u8981\uff0c\u6b21\u8981\uff0c\u5fae\u578b\uff09\uff0c\u4f8b\u5982\uff081\u30017\u30010\uff09 \u5efa\u8bae\u4f7f\u7528\u6b64\u5bf9\u8c61\u6765\u5c06MicroPython\u4e0e\u5176\u4ed6Python\u5b9e\u73b0\u533a\u5206\u5f00\u3002 sys.maxsize \u672c\u673a\u6574\u6570\u7c7b\u578b\u53ef\u4ee5\u5728\u5f53\u524d\u5e73\u53f0\u4e0a\u4fdd\u7559\u7684\u6700\u5927\u503c\uff0c\u5982\u679c\u5b83\u5c0f\u4e8e\u5e73\u53f0\u6700\u5927\u503c\uff0c\u5219\u4e3aMicroPython\u6574\u6570\u7c7b\u578b\u8868\u793a\u7684\u6700\u5927\u503c\uff08\u5bf9\u4e8e\u4e0d\u652f\u6301\u957f\u6574\u578b\u7684MicroPython\u7aef\u53e3\u5c31\u662f\u8fd9\u79cd\u60c5\u51b5\uff09\u3002 sys.modules \u5df2\u8f7d\u5165\u6a21\u5757\u7684\u5b57\u5178\u3002 sys.platform MicroPython\u8fd0\u884c\u7684\u5e73\u53f0\u3002 sys.stdin \u6807\u51c6\u8f93\u5165\uff08\u9ed8\u8ba4\u662fUSB\u865a\u62df\u4e32\u53e3\uff0c\u53ef\u9009\u5176\u4ed6\u4e32\u53e3\uff09\u3002 sys.stdout \u6807\u51c6\u8f93\u51fa\uff08\u9ed8\u8ba4\u662fUSB\u865a\u62df\u4e32\u53e3\uff0c\u53ef\u9009\u5176\u4ed6\u4e32\u53e3\uff09\u3002 sys.version MicroPython \u8bed\u8a00\u7248\u672c\uff0c\u5b57\u7b26\u4e32\u683c\u5f0f\u3002 sys.version_info MicroPython \u8bed\u8a00\u7248\u672c\uff0c\u6574\u6570\u5143\u7ec4\u683c\u5f0f\u3002 \u65b9\u6cd5 sys.exit(retval=0) \u4f7f\u7528\u7ed9\u5b9a\u7684\u53c2\u6570\u9000\u51fa\u5f53\u524d\u7a0b\u5e8f\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u8be5\u51fd\u6570\u4f1a\u5f15\u53d1 SystemExit \u9000\u51fa\u3002\u5982\u679c\u7ed9\u5b9a\u4e86\u53c2\u6570\uff0c\u5219\u5c06\u5176\u503c\u4f5c\u4e3a\u53c2\u6570\u8d4b\u503c\u7ed9 SystemExit \u3002 sys.print_exception(exc, file=sys.stdout) \u6253\u5370\u5f02\u5e38\u5230\u6587\u4ef6\u5bf9\u8c61\uff0c\u9ed8\u8ba4\u662f sys.stdout\uff0c\u5373\u8f93\u51fa\u5f02\u5e38\u4fe1\u606f\u7684\u6807\u51c6\u8f93\u51fa\u3002","title":"sys - \u7cfb\u7edf\u76f8\u5173\u529f\u80fd"},{"location":"QuecPython%E6%A0%87%E5%87%86%E5%BA%93%E4%BB%8B%E7%BB%8D/#uzlib-zlib","text":"uzlib \u6a21\u5757\u89e3\u538b\u7f29\u7528 DEFLATE\u7b97\u6cd5 \u538b\u7f29\u7684\u4e8c\u8fdb\u5236\u6570\u636e \uff08\u901a\u5e38\u5728zlib\u5e93\u548cgzip\u5b58\u6863\u5668\u4e2d\u4f7f\u7528\uff09\uff0c\u538b\u7f29\u5c1a\u672a\u5b9e\u73b0\u3002\u8be5\u6a21\u5757\u5b9e\u73b0\u76f8\u5e94CPython\u6a21\u5757\u7684\u5b50\u96c6\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u9605\u9605CPython\u6587\u6863\uff1a zlib \u6ce8\u610f\uff1a\u89e3\u538b\u7f29\u524d\uff0c\u5e94\u68c0\u67e5\u6a21\u5757\u5185\u53ef\u4f7f\u7528\u7684\u7a7a\u95f4\uff0c\u786e\u4fdd\u6709\u8db3\u591f\u7a7a\u95f4\u89e3\u538b\u6587\u4ef6\u3002 uzlib.decompress(data, wbits=0, bufsize=0) \u8fd4\u56de\u89e3\u538b\u540e\u7684 bytes \u5bf9\u8c61\u3002 wbits \u662f\u89e3\u538b\u65f6\u4f7f\u7528\u7684DEFLATE\u5b57\u5178\u7a97\u53e3\u5927\u5c0f\uff088-15\uff0c\u5b57\u5178\u5927\u5c0f\u662f wbits \u503c\u76842\u7684\u5e42\uff09\u3002\u5982\u679c\u8be5\u503c\u4e3a\u6b63\uff0c\u5219\u5047\u5b9a data \u4e3azlib\u6d41\uff08\u5e26\u6709zlib\u6807\u5934\uff09\uff0c\u5982\u679c\u4e3a\u8d1f\uff0c\u5219\u5047\u5b9a\u4e3a\u539f\u59cb\u7684DEFLATE\u6d41\u3002 bufsize \u53c2\u6570\u662f\u4e3a\u4e86\u4e0eCPython\u517c\u5bb9\uff0c\u5c06\u88ab\u5ffd\u7565\u3002 class uzlib.DecompIO(stream, wbits=0) \u521b\u5efa\u4e00\u4e2a stream \u88c5\u9970\u5668\uff0c\u8be5\u88c5\u9970\u5668\u5141\u8bb8\u5728\u53e6\u4e00\u4e2a\u6d41\u4e2d\u900f\u660e\u5730\u538b\u7f29\u6570\u636e\u3002\u8fd9\u5141\u8bb8\u5904\u7406\u6570\u636e\u5927\u4e8e\u53ef\u7528\u5806\u5927\u5c0f\u7684\u538b\u7f29\u6d41\u3002wbits\u7684\u503c\u9664\u4e86\u4e0a\u9762\u6240\u8ff0\u7684\u503c\u4ee5\u5916\uff0c\u8fd8\u53ef\u4ee5\u53d6\u503c24..31\uff0816 + 8..15\uff09\uff0c\u8fd9\u8868\u793a\u8f93\u5165\u6d41\u5177\u6709gzip\u6807\u5934\u3002","title":"uzlib - zlib\u89e3\u538b\u7f29"},{"location":"QuecPython%E6%A0%87%E5%87%86%E5%BA%93%E4%BB%8B%E7%BB%8D/#_thread-","text":"_thread \u6a21\u5757\u63d0\u4f9b\u521b\u5efa\u65b0\u7ebf\u7a0b\u7684\u65b9\u6cd5\uff0c\u5e76\u63d0\u4f9b\u4e92\u65a5\u9501\u3002 _thread.get_ident() \u83b7\u53d6\u5f53\u524d\u7ebf\u7a0b\u53f7\u3002 _thread.get_heap_size() \u83b7\u53d6\u7cfb\u7edf\u5269\u4f59\u5185\u5b58\u5927\u5c0f\u3002 _thread.stack_size(size) \u8bbe\u7f6e\u521b\u5efa\u65b0\u7ebf\u7a0b\u4f7f\u7528\u7684\u6808\u5927\u5c0f\uff08\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\uff09\uff0c\u9ed8\u8ba4\u4e3a8k\u3002 _thread.start_new_thread(function, args) \u521b\u5efa\u4e00\u4e2a\u65b0\u7ebf\u7a0b\uff0c\u63a5\u6536\u6267\u884c\u51fd\u6570\u548c\u88ab\u6267\u884c\u51fd\u6570\u53c2\u6570\u3002 _thread.allocate_lock() \u521b\u5efa\u4e00\u4e2a\u4e92\u65a5\u9501\u5bf9\u8c61\u3002 \u793a\u4f8b\uff1a import _thread lock = _thread.allocate_lock() lock.acquire() \u83b7\u53d6\u9501\uff0c\u6210\u529f\u8fd4\u56deTrue\uff0c\u5426\u5219\u8fd4\u56deFalse\u3002 lock.release() \u91ca\u653e\u9501\u3002 lock.locked() \u8fd4\u56de\u9501\u7684\u72b6\u6001\uff0cTrue\u8868\u793a\u88ab\u67d0\u4e2a\u7ebf\u7a0b\u83b7\u53d6\uff0cFalse\u5219\u8868\u793a\u6ca1\u6709\u3002 _thread\u4f7f\u7528\u793a\u4f8b import _thread a = 0 lock = _thread.allocate_lock() def th_func(delay, id): global a while True: lock.acquire() # \u83b7\u53d6\u9501 if a >= 10: print('thread %d exit' % id) lock.release() # \u91ca\u653e\u9501 break a+=1 print('[thread %d] a is %d' % (id, a)) lock.release() for i in range(2): _thread.start_new_thread(th_func, (i + 1, i))","title":"_thread - \u591a\u7ebf\u7a0b"},{"location":"QuecPython%E6%A0%87%E5%87%86%E5%BA%93%E4%BB%8B%E7%BB%8D/#uhashlib-","text":"\u6a21\u5757\u529f\u80fd: \u5b9e\u73b0\u4e8c\u8fdb\u5236\u6570\u636e\u6563\u5217\u7b97\u6cd5,\u76ee\u524d\u652f\u6301sha256\uff0csha1\uff0cMD5\u3002 \u200b hash_obj = uhashlib.sha256(bytes) \u521b\u5efa\u4e00\u4e2aSHA256\u54c8\u5e0c\u5bf9\u8c61 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e bytes bytes \u53ef\u9009\u53c2\u6570\uff0c\u53ef\u5728\u521b\u5efa\u65f6\u4f20\u5165bytes\u6570\u636e\uff0c\u4e5f\u53ef\u901a\u8fc7update\u65b9\u6cd5 \u8fd4\u56de\u503c SHA256\u54c8\u5e0c\u5bf9\u8c61 \u200b hash_obj = uhashlib.sha1(bytes) \u521b\u5efa\u4e00\u4e2aSHA1\u54c8\u5e0c\u5bf9\u8c61 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e bytes bytes \u53ef\u9009\u53c2\u6570\uff0c\u53ef\u5728\u521b\u5efa\u65f6\u4f20\u5165bytes\u6570\u636e\uff0c\u4e5f\u53ef\u901a\u8fc7update\u65b9\u6cd5 \u8fd4\u56de\u503c SHA1\u54c8\u5e0c\u5bf9\u8c61 \u200b hash_obj = uhashlib.md5(bytes) \u521b\u5efa\u4e00\u4e2aMD5\u54c8\u5e0c\u5bf9\u8c61 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e bytes bytes \u53ef\u9009\u53c2\u6570\uff0c\u53ef\u5728\u521b\u5efa\u65f6\u4f20\u5165bytes\u6570\u636e\uff0c\u4e5f\u53ef\u901a\u8fc7update\u65b9\u6cd5 \u8fd4\u56de\u503c MD5\u54c8\u5e0c\u5bf9\u8c61 \u54c8\u5e0c\u5bf9\u8c61\u65b9\u6cd5 \u200b hash_obj .update(bytes) \u5c06\u66f4\u591a\u7684bytes\u6570\u636e\u52a0\u5230\u6563\u5217 \u53c2\u6570 \u53c2\u6570 \u53c2\u6570\u7c7b\u578b \u53c2\u6570\u8bf4\u660e bytes bytes \u9700\u8981\u88ab\u52a0\u5bc6\u7684\u6570\u636e \u8fd4\u56de\u503c \u65e0 \u200b hash_obj .digest() \u8fd4\u56de\u901a\u8fc7\u54c8\u5e0c\u4f20\u9012\u7684\u6240\u6709\u6570\u636e\u7684\u6563\u5217\uff0c\u6570\u636e\u4e3a\u5b57\u8282\u7c7b\u578b\u3002\u8c03\u7528\u6b64\u65b9\u6cd5\u540e\uff0c\u65e0\u6cd5\u518d\u5c06\u66f4\u591a\u7684\u6570\u636e\u9001\u5165\u6563\u5217\u3002 \u53c2\u6570 \u65e0 \u8fd4\u56de\u503c \u8fd4\u56de\u52a0\u5bc6\u540e\u5b57\u8282\u7c7b\u578b\u7684\u6570\u636e \u4f7f\u7528\u5b9e\u4f8b import uhashlib import ubinascii hash_obj = uhashlib.sha256() # \u521b\u5efahash\u5bf9\u8c61 hash_obj.update(b\"QuecPython\") res = hash_obj.digest() # b\"\\x1e\\xc6gq\\xb3\\xa9\\xac>\\xa4\\xc4O\\x00\\x9eTW\\x97\\xd4.\\x9e}Bo\\xff\\x82u\\x89Th\\xfe'\\xc6\\xcd\" # \u8f6c\u6210\u5341\u516d\u8fdb\u5236\u8868\u793a hex_msg = ubinascii.hexlify(res) # b'1ec66771b3a9ac3ea4c44f009e545797d42e9e7d426fff8275895468fe27c6cd'","title":"uhashlib - \u54c8\u5e0c\u7b97\u6cd5"},{"location":"QuecPython%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/","text":"QuecPython\u7f51\u7edc\u5e94\u7528\u5f00\u53d1 QuecPython Socket\u7f16\u7a0b QuecPython MQTT\u5ba2\u6237\u7aef\u5f00\u53d1 QuecPython HTTP\u5ba2\u6237\u7aef\u5f00\u53d1 QuecPython NTP\u5e94\u7528\u5f00\u53d1 QuecPython FTP","title":"QuecPython\u7f51\u7edc\u5e94\u7528\u5f00\u53d1"},{"location":"QuecPython%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/#quecpython","text":"","title":"QuecPython\u7f51\u7edc\u5e94\u7528\u5f00\u53d1"},{"location":"QuecPython%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/#quecpython-socket","text":"","title":"QuecPython Socket\u7f16\u7a0b"},{"location":"QuecPython%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/#quecpython-mqtt","text":"","title":"QuecPython MQTT\u5ba2\u6237\u7aef\u5f00\u53d1"},{"location":"QuecPython%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/#quecpython-http","text":"","title":"QuecPython HTTP\u5ba2\u6237\u7aef\u5f00\u53d1"},{"location":"QuecPython%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/#quecpython-ntp","text":"","title":"QuecPython NTP\u5e94\u7528\u5f00\u53d1"},{"location":"QuecPython%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/#quecpython-ftp","text":"","title":"QuecPython FTP"},{"location":"QuecPython%E9%A9%B1%E5%8A%A8%E5%AD%90%E7%B3%BB%E7%BB%9F/","text":"QuecPython\u9a71\u52a8\u5b50\u7cfb\u7edf QuecPython GPIO\u53caIO\u4e2d\u65ad\u5f00\u53d1 QuecPython UART\u5f00\u53d1 QuecPython I2C\u603b\u7ebf\u5f00\u53d1 QuecPython SPI\u603b\u7ebf\u5f00\u53d1 QuecPython Timer\u5b9a\u65f6\u5668\u5f00\u53d1 QuecPython RTC\u5f00\u53d1 QuecPython Watchdog\u5f00\u53d1 QuecPython PWM\u5f00\u53d1 QuecPython ADC\u91c7\u6837\u5f00\u53d1 Quecpython Power\u5f00\u5173\u673a QuecPython Audio\u6a21\u5757\u5f00\u53d1 QuecPython TTS\u6a21\u5757\u5f00\u53d1 QuecPython \u4f4e\u529f\u8017\u7ba1\u7406 QuecPython \u5145\u7535\u7ba1\u7406 QuecPython SD \u5361 QuecPython SPI Nor QuecPython \u6444\u50cf\u5934","title":"QuecPython\u9a71\u52a8\u5b50\u7cfb\u7edf"},{"location":"QuecPython%E9%A9%B1%E5%8A%A8%E5%AD%90%E7%B3%BB%E7%BB%9F/#quecpython","text":"","title":"QuecPython\u9a71\u52a8\u5b50\u7cfb\u7edf"},{"location":"QuecPython%E9%A9%B1%E5%8A%A8%E5%AD%90%E7%B3%BB%E7%BB%9F/#quecpython-gpioio","text":"","title":"QuecPython GPIO\u53caIO\u4e2d\u65ad\u5f00\u53d1"},{"location":"QuecPython%E9%A9%B1%E5%8A%A8%E5%AD%90%E7%B3%BB%E7%BB%9F/#quecpython-uart","text":"","title":"QuecPython UART\u5f00\u53d1"},{"location":"QuecPython%E9%A9%B1%E5%8A%A8%E5%AD%90%E7%B3%BB%E7%BB%9F/#quecpython-i2c","text":"","title":"QuecPython I2C\u603b\u7ebf\u5f00\u53d1"},{"location":"QuecPython%E9%A9%B1%E5%8A%A8%E5%AD%90%E7%B3%BB%E7%BB%9F/#quecpython-spi","text":"","title":"QuecPython SPI\u603b\u7ebf\u5f00\u53d1"},{"location":"QuecPython%E9%A9%B1%E5%8A%A8%E5%AD%90%E7%B3%BB%E7%BB%9F/#quecpython-timer","text":"","title":"QuecPython Timer\u5b9a\u65f6\u5668\u5f00\u53d1"},{"location":"QuecPython%E9%A9%B1%E5%8A%A8%E5%AD%90%E7%B3%BB%E7%BB%9F/#quecpython-rtc","text":"","title":"QuecPython RTC\u5f00\u53d1"},{"location":"QuecPython%E9%A9%B1%E5%8A%A8%E5%AD%90%E7%B3%BB%E7%BB%9F/#quecpython-watchdog","text":"","title":"QuecPython Watchdog\u5f00\u53d1"},{"location":"QuecPython%E9%A9%B1%E5%8A%A8%E5%AD%90%E7%B3%BB%E7%BB%9F/#quecpython-pwm","text":"","title":"QuecPython PWM\u5f00\u53d1"},{"location":"QuecPython%E9%A9%B1%E5%8A%A8%E5%AD%90%E7%B3%BB%E7%BB%9F/#quecpython-adc","text":"","title":"QuecPython ADC\u91c7\u6837\u5f00\u53d1"},{"location":"QuecPython%E9%A9%B1%E5%8A%A8%E5%AD%90%E7%B3%BB%E7%BB%9F/#quecpython-power","text":"","title":"Quecpython Power\u5f00\u5173\u673a"},{"location":"QuecPython%E9%A9%B1%E5%8A%A8%E5%AD%90%E7%B3%BB%E7%BB%9F/#quecpython-audio","text":"","title":"QuecPython Audio\u6a21\u5757\u5f00\u53d1"},{"location":"QuecPython%E9%A9%B1%E5%8A%A8%E5%AD%90%E7%B3%BB%E7%BB%9F/#quecpython-tts","text":"","title":"QuecPython TTS\u6a21\u5757\u5f00\u53d1"},{"location":"QuecPython%E9%A9%B1%E5%8A%A8%E5%AD%90%E7%B3%BB%E7%BB%9F/#quecpython_1","text":"","title":"QuecPython \u4f4e\u529f\u8017\u7ba1\u7406"},{"location":"QuecPython%E9%A9%B1%E5%8A%A8%E5%AD%90%E7%B3%BB%E7%BB%9F/#quecpython_2","text":"","title":"QuecPython \u5145\u7535\u7ba1\u7406"},{"location":"QuecPython%E9%A9%B1%E5%8A%A8%E5%AD%90%E7%B3%BB%E7%BB%9F/#quecpython-sd","text":"","title":"QuecPython SD \u5361"},{"location":"QuecPython%E9%A9%B1%E5%8A%A8%E5%AD%90%E7%B3%BB%E7%BB%9F/#quecpython-spi-nor","text":"","title":"QuecPython SPI Nor"},{"location":"QuecPython%E9%A9%B1%E5%8A%A8%E5%AD%90%E7%B3%BB%E7%BB%9F/#quecpython_3","text":"","title":"QuecPython \u6444\u50cf\u5934"}]}